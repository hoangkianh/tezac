{
  "transpiled": true,
  "noir_version": "1.0.0-beta.2+3278f71a05090dbd",
  "name": "NFT",
  "functions": [
    {
      "name": "transfer_in_public",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "error_types": {
          "10132274202417587856": {
            "error_kind": "string",
            "string": "invalid nonce"
          },
          "10846690067871036662": {
            "error_kind": "string",
            "string": "invalid owner"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "4939791462094160055": {
            "error_kind": "string",
            "string": "Message not authorized by account"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "939615093317106671": {
            "error_kind": "string",
            "string": "Invalid response from registry"
          }
        },
        "parameters": [
          {
            "name": "from",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          },
          {
            "name": "to",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          },
          {
            "name": "token_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "nonce",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": null
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": [
        "transfer_in_public"
      ]
    },
    {
      "name": "constructor",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "initializer"
      ],
      "abi": {
        "error_types": {
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17618083556256589634": {
            "error_kind": "string",
            "string": "Initialization hash does not match"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "2233873454491509486": {
            "error_kind": "string",
            "string": "Initializer address is not the contract deployer"
          },
          "2236649814169388962": {
            "error_kind": "string",
            "string": "PublicImmutable already initialized"
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "364657447181031001": {
            "error_kind": "string",
            "string": "invalid admin"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          }
        },
        "parameters": [
          {
            "name": "admin",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          },
          {
            "name": "name",
            "type": {
              "kind": "string",
              "length": 31
            },
            "visibility": "private"
          },
          {
            "name": "symbol",
            "type": {
              "kind": "string",
              "length": 31
            },
            "visibility": "private"
          }
        ],
        "return_type": null
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": [
        "constructor"
      ]
    },
    {
      "name": "finalize_transfer_to_private",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "error_types": {
          "10536464181608181124": {
            "error_kind": "string",
            "string": "transfer not prepared"
          },
          "11859452850824495745": {
            "error_kind": "fmtstring",
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ],
            "length": 60
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5527120278801020911": {
            "error_kind": "string",
            "string": "invalid NFT owner"
          }
        },
        "parameters": [
          {
            "name": "token_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "hiding_point_slot",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": null
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": [
        "finalize_transfer_to_private"
      ]
    },
    {
      "name": "public_get_name",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "view"
      ],
      "abi": {
        "error_types": {
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "18105278452957613314": {
            "error_kind": "string",
            "string": "Function public_get_name can only be called statically"
          }
        },
        "parameters": [],
        "return_type": {
          "abi_type": {
            "fields": [
              {
                "name": "value",
                "type": {
                  "kind": "field"
                }
              }
            ],
            "kind": "struct",
            "path": "compressed_string::field_compressed_string::FieldCompressedString"
          },
          "visibility": "public"
        }
      },
      "bytecode": "JgACBAEnAAABBIBFJgAABAMmAgEEACYCAgQAHxgAAgABgEQkAAAARSQAAABGLQQAAYBEJwIAAgSARCYCAwQBOg0AAgADJSQAAACbHgIAAQAeAgACADI4AAEAAgADJgIBAQEjAgADAAAAbyQAAADEHgIAAQkmAgIAAQo4AQIDIwIAAwAAAIskAAAA1iYCAQADLgwAAQACLAwCASUnAIAEBHgADQAAAIAEgAMjAIADAAAAwykBAAEF96Hzr6Wt1Mo7AQECJSkBAAEFvh4//z6k9vo7AQECJSkBAAEF+0Le07wSjQI7AQECJS0AGMoYyg==",
      "debug_symbols": "7VXbbsIwDP2XPPfBjp0bvzJNqEBBlaoWlTJpQvz7EtSG0kWgsbKnvVRxdexzepzaJ7EpVsfdsqy3zUEs3k6iatZ5Vza1j07nTKzasqrK3XL8WkB4GHXBH/Z5HcJDl7edWKDWMhNFvQlHI32FbVkVYqH98TsYQA1gkCqCUabQzGx6NLPSEe0wAbYUS1uSOAa/Z8LCDNptBHvxf6h9Dt8Zo+/6ke+odERrNPe1O3ID2DHxRLujWbUj3GoPDPbVDN6xl1Mg/ppCOxhunHaSHnQNYmUHVk26hvjTLw5JEp9JeoaJ+Jkkl0qSykGfJDWY+xaT4oGB9LiLJuUxShuHHY3QElK1DVnq0YaB77fPYJxFRt4OjIQOBKLr5dN62m3mf2cSzpx99JG3Zb6qin45bo/1erQru899MVmb+7ZZF5tjW4QFet2dGPaPdBnx5ffyAamMjOfwPF8=",
      "brillig_names": [
        "public_get_name"
      ]
    },
    {
      "name": "_finalize_transfer_to_private_unsafe",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "internal"
      ],
      "abi": {
        "error_types": {
          "10536464181608181124": {
            "error_kind": "string",
            "string": "transfer not prepared"
          },
          "11859452850824495745": {
            "error_kind": "fmtstring",
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ],
            "length": 60
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17028138060491915576": {
            "error_kind": "string",
            "string": "Function _finalize_transfer_to_private_unsafe can only be called internally"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5527120278801020911": {
            "error_kind": "string",
            "string": "invalid NFT owner"
          }
        },
        "parameters": [
          {
            "name": "from",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          },
          {
            "name": "token_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "hiding_point_slot",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": null
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": [
        "_finalize_transfer_to_private_unsafe"
      ]
    },
    {
      "name": "transfer_to_public",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "error_types": {
          "10132274202417587856": {
            "error_kind": "string",
            "string": "invalid nonce"
          },
          "10583567252049806039": {
            "error_kind": "string",
            "string": "Wrong collapsed vec order"
          },
          "11499495063250795588": {
            "error_kind": "string",
            "string": "Wrong collapsed vec content"
          },
          "11553125913047385813": {
            "error_kind": "string",
            "string": "Wrong collapsed vec length"
          },
          "11873158822563704285": {
            "error_kind": "string",
            "string": "Mismatch return note field."
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "1433889167918961673": {
            "error_kind": "fmtstring",
            "item_types": [],
            "length": 17
          },
          "15431201120282223247": {
            "error_kind": "string",
            "string": "Out of bounds index hint"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "4718290446670665014": {
            "error_kind": "string",
            "string": "NFT not found when transferring to public"
          },
          "4939791462094160055": {
            "error_kind": "string",
            "string": "Message not authorized by account"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5641381842727637878": {
            "error_kind": "string",
            "string": "Got more notes than limit."
          },
          "5672954975036048158": {
            "error_kind": "string",
            "string": "Collapse hint vec length mismatch"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6869395374906889440": {
            "error_kind": "string",
            "string": "Mismatch note header contract address."
          },
          "7506220854563469239": {
            "error_kind": "string",
            "string": "Dirty collapsed vec storage"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "855401245733623969": {
            "error_kind": "string",
            "string": "Obtained invalid key validation request"
          }
        },
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::block_header::BlockHeader"
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ],
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs"
            },
            "visibility": "private"
          },
          {
            "name": "from",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          },
          {
            "name": "to",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          },
          {
            "name": "token_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "nonce",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "std::option::Option"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint"
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::note_hash::NoteHash"
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::nullifier::Nullifier"
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "args_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::side_effect::counted::Counted"
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "args_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::log::Log"
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_log::PrivateLogData"
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::LogHash"
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::block_header::BlockHeader"
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                }
              }
            ],
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"
          },
          "visibility": "databus"
        }
      },
      "bytecode": "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",
      "debug_symbols": "",
      "brillig_names": [
        "store_in_execution_cache_oracle_wrapper",
        "call_private_function_internal",
        "load",
        "notify_created_nullifier_oracle_wrapper",
        "get_notes_internal",
        "get_collapse_hints",
        "field_less_than",
        "decompose_hint",
        "lte_hint",
        "get_public_keys_and_partial_address",
        "get_key_validation_request",
        "notify_nullified_note_oracle_wrapper",
        "store_in_execution_cache_oracle_wrapper",
        "enqueue_public_function_call_internal",
        "directive_invert",
        "directive_integer_quotient",
        "directive_to_radix"
      ],
      "verification_key": "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"
    },
    {
      "name": "private_get_symbol",
      "is_unconstrained": false,
      "custom_attributes": [
        "private",
        "view"
      ],
      "abi": {
        "error_types": {
          "1186437190978851533": {
            "error_kind": "string",
            "string": "Non-zero hint for zero hash"
          },
          "1589673740894288059": {
            "error_kind": "string",
            "string": "Hint values do not match hash"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "18192277837884173995": {
            "error_kind": "string",
            "string": "Function private_get_symbol can only be called statically"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "7764445047318889914": {
            "error_kind": "string",
            "string": "Public data tree index doesn't match witness"
          },
          "9199403315589104763": {
            "error_kind": "string",
            "string": "Proving public value inclusion failed"
          }
        },
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::block_header::BlockHeader"
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ],
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "std::option::Option"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint"
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::note_hash::NoteHash"
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::nullifier::Nullifier"
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "args_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::side_effect::counted::Counted"
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "args_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::log::Log"
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_log::PrivateLogData"
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::LogHash"
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::block_header::BlockHeader"
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                }
              }
            ],
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"
          },
          "visibility": "databus"
        }
      },
      "bytecode": "",
      "debug_symbols": "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",
      "brillig_names": [
        "storage_read",
        "get_public_data_witness",
        "field_less_than",
        "decompose_hint",
        "lte_hint",
        "store_in_execution_cache_oracle_wrapper",
        "directive_integer_quotient",
        "directive_invert",
        "directive_to_radix"
      ],
      "verification_key": "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"
    },
    {
      "name": "cancel_authwit",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "error_types": {
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          }
        },
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::block_header::BlockHeader"
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ],
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs"
            },
            "visibility": "private"
          },
          {
            "name": "inner_hash",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "std::option::Option"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint"
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::note_hash::NoteHash"
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::nullifier::Nullifier"
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "args_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::side_effect::counted::Counted"
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "args_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::log::Log"
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_log::PrivateLogData"
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::LogHash"
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::block_header::BlockHeader"
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                }
              }
            ],
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"
          },
          "visibility": "databus"
        }
      },
      "bytecode": "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",
      "debug_symbols": "7ZfBbtswDIbfReccSIqixLzKMBRO4hYGDCdwkgFD0HefnEWygyr1IVuxAb6J9g/y1ydRti5mV2/Oby9N97o/mvW3i2n32+rU7LsYXQza67PjoeqG8Hiq+pNZowitTN3thqGn95V5bdrarCUOP4iJxN/EREGzGMGV1MrhprZAOKNGYeuyE+YxO3ktZUeS5AXZjWqVUnYrNiVnhDv195VBXtg8ZOMWNg/ZyMLmIRv/NBsGTWJGClmscC0Q/nYBfboAWuAktnayulRUA/q0AHGsdmqotHWCat47+sE/wX/uH4v+wWred8DMM/0FCGm+BLFMlnsuyINomkHw1s40TODcMIE9z6itS2KmSbuUeos8ZjJ3NoqN6EfqXt2MGHJmBAlT8YCcFuRfjdwuyL8aOZeRs+MRuZfPkQs6uKkFg/v8qMMw+onwx3NUfp907k8YopC2gJDqk2ev/FuOYrDpm7Zt3l7ubjVwvdoU15MU0r8SqYN75u8x/FH1TbVp6yHR8PbcbVPeGJ5+HtKbVPnQ77f17tzXg4dJ+eE7i7IijGlj6l8=",
      "brillig_names": [
        "notify_created_nullifier_oracle_wrapper"
      ],
      "verification_key": "AAAAAAAQAAAAAAAAAAAAFAAAAAAAAAAQAAAAAAADKLEBAAAAAAAAAAEAAAACAAAAAwAAAAQAAAAF\nAAAABgAAAAcAAAAIAAAACQAAAAoAAAALAAAADAAAAA0AAAAOAAAADwAAAAAAAAAAABnbIZEyk5ek\nwOpQT28sE3szFRq9fWnl1Rf/UjVhujO2GHlvnzEedgzsSIY7MNwpqUVSN2Sdw3PR0aGMQfjZiG4B\nhLIxqc5gBBa2F+TktF3ZAv1BObFaoGXpGpr4+jK/bxvh+AZGdb6h7RG9uH6OwlnzgjHWUs1cq30K\nJbNssafKH6elqVcKnUH0Y70VHrzT2rHmH/8D50u3OuclXAWRNGgMdMEx416zZHFy95bhXlTGy6Kk\nOd7KxWynAkyzqX7KCiADgyz0sL5r0Foix0OtJNwDDqda+dq0yONdT9eungeJGe+shGrPfPjNDaw5\n4GVPHfRQKBBUeZf6NI0VXA+i1JcttmKngrx7Vv5ikrsJIGQv6I7lR4+wjyZXq77DVNWiFAnpbDqo\ngmLQ/6tER/Aor44Vn3zgNu9RK27D4gilrHsRF9fi+5FrMAuZelA3Z2NWbZJW6g591NbQFFdS8mOv\n0fUX7YJx6cRHpOWOyu/dO7DdfbZy+gS8tBkY0E+Z/O7A6QRWu3AbWwtGO7zwxP5xkFUjk9CVM+Gy\nAEvYTp+KU6iPA4D05rswR3a/1Psi4gmHdBVkgemj+PCR0w2xADptqrQpjDMR/JFw+S3pQLBCqrmQ\n1TxqOyYznNprc9+SCDFBWQewX0CKYShHJZAWuSBK5L83U36xlrBcHZj6UQFqm6y7FMc8xwe728Qf\n3yovdhg49DoJM3rUq6ZgJX+RPXHm5wMdZ3W8f0VZXKlAEgVPhhUa1CDN1uc8Y98pQg5nTk7HJhQH\nuXHUZSUuien7WhICd8GF6pmJPVoWfU6cq9qKeg+XKvmMef9SA+ZAwA4tIS1vkplPVZg44AbUU15W\n/rgR1wEAph3qx2s3DKT0L3OmZct1qevcWM1L34r35/z/o21bcS5ZeJ8Nnbs/Fa3lOEt4SQ2x2DN5\nxzvkESPev8iMn8jWK3KtwTdDjKDTNxRFpXqWkOZE9YS6+kVBJM8BrVvgsTkBGeJB7rvr/1x9fyDc\nbFrRtq943CBtf3eFPwX95+vTcgf0jcSnJ0Jght+Tse5RZcbcT12spv9buvyWd9eqdr8lFSs21A6y\n5dFloEMW6/zEHtu+8puCHX6TzXdfzcMlasQvM+G/khBYclK6gii8QDUlNUdKuFMlOP+X60z0m7kW\n5w29uxwitMsCX2wtJsOBJ9ufmtpuI9FpbPX/SAJRAO5IBUpdmSmft+K4XqY0LUylEi/6dAoirBun\neZyfIL0KXn8CKXUGuhn355ilgSMUkIAoT+ELXDQ7DT8IxQ5Ns8hK9wOu7zUmvtmZMOyadtiLMj1F\nlE9a3gK4uaK83VBR9RPyEoLQrCpstZk0nzfRP3C2DxMtFsUaSCGsjtt5Zt4jYG8VkKMSiL14NEbg\noIxrGzYnI6eTTQlnTxoJQCjlJ0235xYWbkT4n15EgB9FrtCicTx9YhcQ2UOjX7+Q52zHfHe6KoWl\nRivJraUIEDDz09lEWmbXXT+lXPXKBHZvhZSb+uMDjNDDtsyAJO2QTkPRsfnN8bRLpL9duY6P53dn\n3NQKthWBjKf4U4rWvOfCUX79SQKLJA6nZikPOjdnJl2fPjWICFHV6LDXEfJra59oEWaEBobl8ymG\nw04LY6ULtaSd+z8AkKF8jLPAnuR/9/yzNMwP/gsAeUMM0UcY1LB9doejKRfLcxuIYJw/sGoR7OI3\nlhySW1evqWhOkfhVCYrDYP83F1azi2LNJFQ4DIlR1cGKxh+4IF8/5t9tDivIWCJDRK8PrBbfERA6\n6Yj2hJKpocS0I+WVs/ZgV4Wq0raFjdBSaR4mpOJ5lOnZJVpIAOIAlUnLHY6QyldKvnXbmnSn9Kh3\nADjWMCBN+/mNwwusN44uELga1KSDsyK9rcHRcE2FFLEK3InEjXW1cWNvW760qAb29FliAjAbauTr\nDrvq3SAzQAZvKBNXSPEZYxw/4H+p1wADTj4nRU75krS/hLl7qnRxLiV4NVHfUMAE7HzR9N2LO2Sm\nbyrEl5tl5WVoxaMbFO0Y92zwzuzLR5jedBrom2ToJY+ER3wbYlZaVZunuziDLi0pn7aGeNAVC8xb\nFtyCUjU9Q/pw6ZI5wcHGficaDurFFdOsWhmau3STOk78mMWbKBTt580n2u0AwzwShgvEsEYtONbU\nuh5HY6dOzbEcofNGloDCcOVRUVNEWS9ZGI+nZRLbOeiSgmsyYQ7gglHgBfzpF8DV3KAZR3xS9gdT\nMrYSAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAisgyycLJP5SAU6nP2CwRliv2VY5eDmoxdz736mQoKg/JdirDBliZHMjHgShihuQ\nU6UeBL0D9yzXsBWJ1m45a3APy7+dPPQCuqPu2l8Knkm1werJWyZMMC3IVObyLXMw3yg+39qJyUgF\nl/CzRC6XUt751Y/Ckgg2GUJh97Fj/vuvHViqYcZK1SIEPXnEgCIZ5Vuhl1Gt/mw2Mk0/tsLaCYkt\nfBipPD2uWICfqu7GqGp49LO8YfGdbnBpNZu/R+f5Bw=="
    },
    {
      "name": "owner_of",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "view"
      ],
      "abi": {
        "error_types": {
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "9443383425599897888": {
            "error_kind": "string",
            "string": "Function owner_of can only be called statically"
          },
          "9605075991997100073": {
            "error_kind": "string",
            "string": "token does not exist"
          }
        },
        "parameters": [
          {
            "name": "token_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "fields": [
              {
                "name": "inner",
                "type": {
                  "kind": "field"
                }
              }
            ],
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
          },
          "visibility": "public"
        }
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": [
        "owner_of"
      ]
    },
    {
      "name": "compute_note_hash_and_optionally_a_nullifier",
      "is_unconstrained": true,
      "custom_attributes": [],
      "abi": {
        "error_types": {
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5972837590977953198": {
            "error_kind": "fmtstring",
            "item_types": [
              {
                "kind": "field"
              }
            ],
            "length": 36
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          }
        },
        "parameters": [
          {
            "name": "contract_address",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          },
          {
            "name": "nonce",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "storage_slot",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "note_type_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "compute_nullifier",
            "type": {
              "kind": "boolean"
            },
            "visibility": "private"
          },
          {
            "name": "packed_note_content",
            "type": {
              "kind": "array",
              "length": 3,
              "type": {
                "kind": "field"
              }
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "array",
            "length": 4,
            "type": {
              "kind": "field"
            }
          },
          "visibility": "public"
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "compute_note_hash_and_optionally_a_nullifier"
      ]
    },
    {
      "name": "sync_notes",
      "is_unconstrained": true,
      "custom_attributes": [],
      "abi": {
        "error_types": {
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        },
        "parameters": [],
        "return_type": null
      },
      "bytecode": "H4sIAAAAAAAA/7WTyw7CIBBFqcUo0sTEx39MU0y7dOHafyCtLHVRN+766dZkJkyI0QVwEzJMgMNcHoXwKjBKESGCHDEqjAs2Xs7tjDnEqVbBvin5HRijvvhLWH+jkFnk4QPxM50/rJBzmTyfe6F913PTrF8J/z5y+af7y+l//8OzRq9bzCvh/8P4uvfXx/M2ij/SbJGc0ptoOwAqvkT+EvmhJBvn8w+Yb4Svj6KMqNO1tnaNdfZkh8H0dhfwP+KH/QbzqHp4zgQAAA==",
      "debug_symbols": "bY9dCoMwEITvss8+ZG39qVeRIlFXCYREYlIowbs3aaVNW1+GneXbYcfDSL2bO6EmvULTepB64FZoFZzfMuiNkFLMXboGFgVPT35duIp2tdxYaIpzBqRGaMo8XE9C0mv8A5Gxut5ZZIjFG8eSHfJYVR/+Un7x1y3YGzeC95L21yenhqSJvS/0U2oxeqDRGYr1kmZBWyyynIXYEP0A",
      "brillig_names": [
        "sync_notes"
      ]
    },
    {
      "name": "_finish_transfer_to_public",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "internal"
      ],
      "abi": {
        "error_types": {
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "7176719043052132708": {
            "error_kind": "string",
            "string": "Function _finish_transfer_to_public can only be called internally"
          }
        },
        "parameters": [
          {
            "name": "to",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          },
          {
            "name": "token_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": null
      },
      "bytecode": "JgACBAEnAAABBIBGJgAABAMmAgMEAiYCBAQAHxgABAADgEQtCIBEAAEtCIBFAAIkAAAASyQAAABTJwIAAQSARiYCAgQAOg0AAQACJwCAQwQAAyUkAAADuh4CAAQAHgIABQAyOAAEAAUABiYCBAEBIwIABgAAAHwkAAAD4x4CAAUBHgIABgAKOAUGByMCAAcAAACYJAAAA/UmAgUACCwIAQYmAgcEAwAQAQcBJgMGBAEAKAYCBywMBwgsDgUIACgIAggsDgIIJgICAAAsCAEFJgIHBAQAEAEHASYDBQQBACgFAgcsDAcILA4CCAAoCAIILA4CCAAoCAIILA4CCCwNBQcAKAcCBywOBwUqAgAHAAAAAAAAAAACAAAAAAAAAAAsCAEIJgIJBAUAEAEJASYDCAQBACgIAgksDAkKLA4CCgAoCgIKLA4CCgAoCgIKLA4CCgAoCgIKLA4HCiwNBQcAKAcCBywOBwUsCAEHAAABAgEsDgUHLA0IBQAoBQIFLA4FCCwIAQUAAAECASwOCAUsCAEIAAABAgEmAgkEACwOCQgsCAEKAAABAgEmAgsBACwOCwomAgwEAiYCDQQBLAwJAyIAAAHFDDgDDA4jAgAOAAACYCIAAAHXLA0KAwo4AwsGIwIABgAAAfEmAgwEADsJAQwmAgMEDCwIAAwsDAcNLAwFDiwMCA8sDAoQABAAAwAkAAAEBywEAAAsDQcDLA0FBiwNCAwsDgMHLA4GBSwODAgsDgQKACgGAgQAOAQJBSwNBQMKOAMCBAo4BAsCIwIAAgAAAlkkAAAFZC8MAAEAAyUjAgAOAAACbSIAAAOsJgIPBAIMOAMPECMCABAAAAKEJAAABXYAKAYCDwA4DwMQLA0QDiwNCA8sDQoQCjgQCxEjAgARAAACsCYCEgQAOwkBEgsoAA+AQwAQIwIAEAAAAz4iAAACxSwNBw8sDQUQLA0IESwNChImAhQEAww4ERQVIwIAFQAAAuwkAAAFdi0EAA+AAycAgAQEAAQkAAAFiC0IgAUAEwAoEwIUADgUERUsDg4VADgRDQ4OOBEODyMCAA8AAAMpJAAABhYsDhMHLA4QBSwODggsDhIKIgAAA6wmAg8EECwIABAsDAcRLAwFEiwMCBMsDAoUABAADwAkAAAEBywEAAAsDQcPLA0FECwNChEtBAAPgAMnAIAEBAAEJAAABYgtCIAFABIAKBICEwA4EwkULA4OFCwOEgcsDhAFLA4NCCwOEQoiAAADrAA4Aw0OLAwOAyIAAAHFJwCABAR4AA0AAACABIADIwCAAwAAA+IpAQABBfeh86+lrdTKOwEBAiUpAQABBb4eP/8+pPb6OwEBAiUpAQABBWOY0/Id51lkOwEBAiUkAAADuiYCBgQBJgIHBAAsDAcFIgAABB8NKAAFgEMAByMCAAcAAASPIgAABDQsDQEFLA0CBiwNAwcsDQQIJgIJBAQsCAEKJgILBAUAEAELASYDCgQBACgGAgsmAgwEBAAoCgINPg8ACwANLA0KBgAoBgIGLA4GCiwOBQEsDgoCLA4HAywOCAQlLA0DBww4BQcIADgFBgcjAgAIAAAEqiIAAAVbLA0BCCwNAgksDQMKLA0ECyYCDQQEDDgFDQ4jAgAOAAAE0SQAAAV2ACgJAg0AOA0FDiwNDgwmAg4EAww4BQ4PIwIADwAABPYkAAAFdgAoCAIOADgOBQ8sDQ8NADgMDQ4mAg0EBAw4BQ0PIwIADwAABSAkAAAFdi0EAAmAAycAgAQEAAUkAAAFiC0IgAUADAAoDAINADgNBQ8sDg4PLA4IASwODAIsDgoDLA4LBCIAAAVbLAwHBSIAAAQfKQEAAQUC3G4ngHYSnTsBAQIlKQEAAQXonQn+oREtDjsBAQIlLQGAA4AGCwCABgACgAcjAIAHAAAFoyIAAAWuLQCAA4AFIgAABhUtAAABgAUBAAABgAQAAQEAgAOABIAJLQCAA4AKLQCABYALCwCACoAJgAwjAIAMAAAGAS0BgAqACC0CgAiACwEAgAoAAoAKAQCACwACgAsiAAAF0CcBgAUEAAEDAIAGAAKABiIAAAYVJSkBAAEFRafKcRlB5BU7AQECJS0AGMoYyg==",
      "debug_symbols": "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",
      "brillig_names": [
        "_finish_transfer_to_public"
      ]
    },
    {
      "name": "mint",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "error_types": {
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "6515419266667913063": {
            "error_kind": "string",
            "string": "zero token ID not supported"
          },
          "9296579303138805202": {
            "error_kind": "string",
            "string": "token already exists"
          }
        },
        "parameters": [
          {
            "name": "to",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          },
          {
            "name": "token_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": null
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": [
        "mint"
      ]
    },
    {
      "name": "public_get_symbol",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "view"
      ],
      "abi": {
        "error_types": {
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "15009911310769716579": {
            "error_kind": "string",
            "string": "Function public_get_symbol can only be called statically"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        },
        "parameters": [],
        "return_type": {
          "abi_type": {
            "fields": [
              {
                "name": "value",
                "type": {
                  "kind": "field"
                }
              }
            ],
            "kind": "struct",
            "path": "compressed_string::field_compressed_string::FieldCompressedString"
          },
          "visibility": "public"
        }
      },
      "bytecode": "JgACBAEnAAABBIBFJgAABAMmAgEEACYCAgQAHxgAAgABgEQkAAAARSQAAABGLQQAAYBEJwIAAgSARCYCAwQBOg0AAgADJSQAAACSHgIAAQAeAgACADI4AAEAAgADJgIBAQEjAgADAAAAbyQAAAC7HgIAAQkmAgIAAQo4AQIDIwIAAwAAAIskAAAAzS4MAAIAASUnAIAEBHgADQAAAIAEgAMjAIADAAAAuikBAAEF96Hzr6Wt1Mo7AQECJSkBAAEFvh4//z6k9vo7AQECJSkBAAEF0E3qz6yL/WM7AQECJS0AGMoYyg==",
      "debug_symbols": "vZXbjoIwEIbfpddcdA49+SobY1CrISFgEDfZGN99WwMVXaJZFveGUPLN/D8zzcxZbP36tF8V1a4+isXHWZT1Jm+Lugqn8yUT66Yoy2K/Gn4WMj6MuvLHQ17F47HNm1YsQGvMhK+28dVgyLArSi8WOrz+hKVUPSxRJRhwjGZm09HMSifawQhsKaW2hDCEl5mwcgbvNsHB/D96n6PuDKnu+lXdQelEazDPvTtyPeyY+MG7o1m9g7z3HhXsuxVCxd4uAfBnCe1kf+O0Q3rRNZkyO2nVQ9cAfvvHMQhhStAUJeIpQW4sCC3aLggtm+clJsW9AulhF81YjQFtGnY0oFGO5TZkqaMNS37ePgNpFhm8HxgjPkAS3S6fvhtGy0s4feZNka9L362A3anaDDZC+3XwD8vh0NQbvz01Pq6J24aAOGXRZITXSxQOQZhU0Ag63w==",
      "brillig_names": [
        "public_get_symbol"
      ]
    },
    {
      "name": "get_admin",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "view"
      ],
      "abi": {
        "error_types": {
          "10055739771636044368": {
            "error_kind": "string",
            "string": "Function get_admin can only be called statically"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        },
        "parameters": [],
        "return_type": {
          "abi_type": {
            "kind": "field"
          },
          "visibility": "public"
        }
      },
      "bytecode": "JgACBAEnAAABBIBFJgAABAMmAgEEACYCAgQAHxgAAgABgEQkAAAARSQAAABGLQQAAYBEJwIAAgSARCYCAwQBOg0AAgADJSQAAACbHgIAAQAeAgACADI4AAEAAgADJgIBAQEjAgADAAAAbyQAAADEHgIAAQkmAgIAAQo4AQIDIwIAAwAAAIskAAAA1iYCAQAFLgwAAQACLAwCASUnAIAEBHgADQAAAIAEgAMjAIADAAAAwykBAAEF96Hzr6Wt1Mo7AQECJSkBAAEFvh4//z6k9vo7AQECJSkBAAEFi40qC3IiUlA7AQECJS0AGMoYyg==",
      "debug_symbols": "5ZXBbsIwDIbfJece4thxEl5lmlCBgCpVLSpl0oR49yWoBOgqqnVll12quPps/7GT+CQ2fnXcLYtqWx/E4u0kynqdt0VdBet0zsSqKcqy2C3vfwsZP0Zf+MM+r6J5aPOmFQtgVpnw1SYujQoRtkXpxYLD8jsspb7CUukEgxqiich0NJHmRDsYgC2m0BYV3MPvmbByBu02wUH8H2qfo+4Eqe48VnfQnGgG81y7Q3eFHSH1tDucVTvIR+0xg311hlCxl6cA+HUKdvJ64tgpHOmaTJGdtLrXNYCf7jg6KZjiNCUT0hQnN+SEkqhzQsljXQxBUhf5dtbBDNEGLXa0IUnPG2IgvS5GPT4BQzok4u04Mff7R/RP9noO1kfeFPmq9N0A2x6r9d08az/3vjfa9k299ptj4+OQu803iDNCuQzpcgWCgTpDE3KEPF8=",
      "brillig_names": [
        "get_admin"
      ]
    },
    {
      "name": "transfer_in_private",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "error_types": {
          "10132274202417587856": {
            "error_kind": "string",
            "string": "invalid nonce"
          },
          "10583567252049806039": {
            "error_kind": "string",
            "string": "Wrong collapsed vec order"
          },
          "11499495063250795588": {
            "error_kind": "string",
            "string": "Wrong collapsed vec content"
          },
          "11553125913047385813": {
            "error_kind": "string",
            "string": "Wrong collapsed vec length"
          },
          "11873158822563704285": {
            "error_kind": "string",
            "string": "Mismatch return note field."
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "1433889167918961673": {
            "error_kind": "fmtstring",
            "item_types": [],
            "length": 17
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "15431201120282223247": {
            "error_kind": "string",
            "string": "Out of bounds index hint"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "16954044801249163952": {
            "error_kind": "string",
            "string": "NFT not found when transferring"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "4939791462094160055": {
            "error_kind": "string",
            "string": "Message not authorized by account"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5641381842727637878": {
            "error_kind": "string",
            "string": "Got more notes than limit."
          },
          "5672954975036048158": {
            "error_kind": "string",
            "string": "Collapse hint vec length mismatch"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6869395374906889440": {
            "error_kind": "string",
            "string": "Mismatch note header contract address."
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "7506220854563469239": {
            "error_kind": "string",
            "string": "Dirty collapsed vec storage"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "855401245733623969": {
            "error_kind": "string",
            "string": "Obtained invalid key validation request"
          }
        },
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::block_header::BlockHeader"
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ],
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs"
            },
            "visibility": "private"
          },
          {
            "name": "from",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          },
          {
            "name": "to",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          },
          {
            "name": "token_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "nonce",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "std::option::Option"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint"
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::note_hash::NoteHash"
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::nullifier::Nullifier"
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "args_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::side_effect::counted::Counted"
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "args_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::log::Log"
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_log::PrivateLogData"
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::LogHash"
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::block_header::BlockHeader"
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                }
              }
            ],
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"
          },
          "visibility": "databus"
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "store_in_execution_cache_oracle_wrapper",
        "call_private_function_internal",
        "load",
        "notify_created_nullifier_oracle_wrapper",
        "get_notes_internal",
        "get_collapse_hints",
        "field_less_than",
        "decompose_hint",
        "lte_hint",
        "get_public_keys_and_partial_address",
        "get_key_validation_request",
        "notify_nullified_note_oracle_wrapper",
        "random",
        "notify_created_note_oracle_wrapper",
        "debug_log_oracle_wrapper",
        "build_msg_block",
        "attach_len_to_msg_block",
        "get_random_bytes",
        "get_app_tag_as_sender",
        "increment_app_tagging_secret_index_as_sender_wrapper",
        "directive_invert",
        "directive_integer_quotient",
        "directive_to_radix"
      ],
      "verification_key": "AAAAAAAQAAAAAAAAAAAAFAAAAAAAAAAQAAAAAAADKLEBAAAAAAAAAAEAAAACAAAAAwAAAAQAAAAF\nAAAABgAAAAcAAAAIAAAACQAAAAoAAAALAAAADAAAAA0AAAAOAAAADwAAAAAAAAAAAC/wV65Xg3n/\nI7+AOPre+CtsVq86Zo9Y+lRvTn/WvDkaG7y2UkVanUaK5+xv++zPONxen4+5oAruElg3Gj1zk+0n\nvj4fGgXNewDEZ9/yWExzaafGLurXdO7azsGzqM2O+gb41n7w2Njjyzu4Zg+iQEegNJIEdU9xh+ct\nfu+SH3+AA+EzBv8xvA8CRluJ3IyVaHURjj+Jq8e4q5uqEoaBlEISxilihf4gosME6pZ+6MsXvOJ/\n+/V/4qHVEi5+nh2wxRD3/7gvdZPZMJkOzMzVt9MWabcHETRBq8L/VOeWWfKXLpUqTdGqwAdsl5kn\nB8H+/C5iIc0CXYG1QZqsWAU1Wk4ppT3o+t27uJHFSR7iCeJHQf5G25oz9MtteqNT1VuNiS7lAXNI\nAsXCFiP3c3J81xOZt4w+PdVXKG58RxMMbRdxD708BeF7KOqFiD+Bi58lSLYLMjGoTqF/IBSCbbOC\n13Ikz/t6ickNasbsxrP30GFJ/bp4jVMCfRSUl4LuUG/ZeQRWu3AbWwtGO7zwxP5xkFUjk9CVM+Gy\nAEvYTp+KU6iPA4D05rswR3a/1Psi4gmHdBVkgemj+PCR0w2xADptqrQILGSm2icPadfnG6m4ZqNf\n4SDBQSlCJJZpiMt7HIhx8RcabAExTz/o5qg84tb5xkbcnzP6omUt0HTVBhFO4G1DBAwSb0OmTy0C\nGItPZBQnWGv6qlJ1+mzVrq0rH7pI14MaN29pUinLpYfd/ki16vi5ir9hYiHWlTd58lIb58j+bh5S\n6kggAVmW3Zhi9TIseqpwmwChT4cOUC4WvQ7q2b2PKhKqW1ttPBot3mvEEgwlMD1i+5OMyqhLYu+r\nDwRGdIAJTGjbZ7wShB6QY5Gzw21SRUg42RYcd/w+gyLxXboWkC9aFMwr5aCT7rGShEZurEGI+U+P\nCl5z2G02lGlPr3QZE8JGGPS0GQZh6qMkPNJNgoEnI5JNePRvh0Wh82fVZZERR5ZpEeUTvChnajPQ\n0cQuXBEczpZ7Y0l7sTPir2C9XQUEDgqbCrSpcYOC9SfsDIvFvbpmxONQLmrrFRLei3BIJebTAhaW\nG392HlNS/Dpit4t4wmqU11oFsangxuc19k0MU9jGfB8us4F41quO0zG/TdiX5kpprc74XXrSAAiA\nxDALHHmSM+S6WmVGOxdqCGxVoTfPVsW2nFqpE/eQ96z0B/ke1HM8ZU4JIJA3WY3jtwfs4vUIUHln\nN1bkCM9+3CQV5kRKUjR1Wu7Nmcx4qBKQUlhlv0+Fmq7S+u05t7O3yyTYWeBrSA2P4ntU7XuwDP+e\nUudlo0DSD1yz9Ldhwc+XJqOCoqaYkg5Pj7yEotbvKdmRs5PNsxLjG2/Yka1F8KQLHmMUMmMM85o/\nlgwYJPeRVz8XXlFF1soY5enzFP29JhdlEXes30dYptphCXkcdewiJ3lIZDcM2tHh+5UvM+rzFFqW\nKsKhuf6JWO7FtZHZsVQLXr/0VJShzZDkf8ntrf0Q+bdVvxyRwsXpTer72RntBAz01x7y3ug3SBk3\ngRafLi8TJnWoKN7qaFicUpb82MJXe85qeQFy1VOKwQdi/GguJPnx1Qk1oL2mqFLvkhyVIt/w4SZe\nL8uffgTOdbD1q9omXqYfoyQwu2oq2xl+9o0d0lSdAi67IEiiQihIAYPUlg3N9X0mFEmNN/p3QNhG\nELJLRMG6PAYH2aVdQYn5595nHjbyHJf27LbeMp4d6RxiESLLeV5EvYzt1EMRHSnfilYQjBzz6YEq\nG6keDv8JOtypncp3KvXYWiS7Zf7kePwT5RCqqVGuf37icxjyK1lpq5CVKAm2PwsuA2/zvv1+m09/\nLvNIj3U0M4UBSrXitBKwo/5GWWdBOJIaef5RVJTT4usLWg0+wuXyswQ61ZJ/de4iTnuLsHbAHZ0V\n5pXbSWKEeS9JPkqiXqcfkP+VfiqqnqJkmE8Vy36rLE9ppdgIpW9NDA38Mhan5E5CXO/xhhn0K38P\n64NkjhGx/g2LxrYMbyELfgcMNa3kSIGrDKvqaUG+P83kxOCBYb55eUgirvuz9hdMTarMb+voLYgx\nqQRE7xF99hpL8Yp0RrVNjs3Q5SchDT0PcFycO0JuL3hkeQrozxTE8gbrB6Mxl/9c9rusC68HA5vn\nC1V7bw1NWfsSgKGZWD0KkObVU+S9ZEm1jvUHoQoRhUsNMK6nXa3orpJf7Wy/Be+z4rZbBL3nGjNN\nL+szAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAgT/O7oYPD8+Tajqy1JfAJqayJnWzEBKJwuvZIAO4bAbHAVv9mwqShYv5loDwDqE\nD1EL4iWH3xyUQG/El9h0FMYPy7+dPPQCuqPu2l8Knkm1werJWyZMMC3IVObyLXMw3yg+39qJyUgF\nl/CzRC6XUt751Y/Ckgg2GUJh97Fj/vuvHViqYcZK1SIEPXnEgCIZ5Vuhl1Gt/mw2Mk0/tsLaCYkt\nfBipPD2uWICfqu7GqGp49LO8YfGdbnBpNZu/R+f5Bw=="
    },
    {
      "name": "private_get_name",
      "is_unconstrained": false,
      "custom_attributes": [
        "private",
        "view"
      ],
      "abi": {
        "error_types": {
          "1186437190978851533": {
            "error_kind": "string",
            "string": "Non-zero hint for zero hash"
          },
          "1589673740894288059": {
            "error_kind": "string",
            "string": "Hint values do not match hash"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "2111772463301017956": {
            "error_kind": "string",
            "string": "Function private_get_name can only be called statically"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "7764445047318889914": {
            "error_kind": "string",
            "string": "Public data tree index doesn't match witness"
          },
          "9199403315589104763": {
            "error_kind": "string",
            "string": "Proving public value inclusion failed"
          }
        },
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::block_header::BlockHeader"
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ],
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "std::option::Option"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint"
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::note_hash::NoteHash"
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::nullifier::Nullifier"
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "args_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::side_effect::counted::Counted"
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "args_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::log::Log"
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_log::PrivateLogData"
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::LogHash"
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::block_header::BlockHeader"
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                }
              }
            ],
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"
          },
          "visibility": "databus"
        }
      },
      "bytecode": "",
      "debug_symbols": "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",
      "brillig_names": [
        "storage_read",
        "get_public_data_witness",
        "field_less_than",
        "decompose_hint",
        "lte_hint",
        "store_in_execution_cache_oracle_wrapper",
        "directive_integer_quotient",
        "directive_invert",
        "directive_to_radix"
      ],
      "verification_key": "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"
    },
    {
      "name": "_store_payload_in_transient_storage_unsafe",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "internal"
      ],
      "abi": {
        "error_types": {
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "16958085610837407363": {
            "error_kind": "string",
            "string": "Function _store_payload_in_transient_storage_unsafe can only be called internally"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        },
        "parameters": [
          {
            "name": "slot",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "point",
            "type": {
              "fields": [
                {
                  "name": "x",
                  "type": {
                    "kind": "field"
                  }
                },
                {
                  "name": "y",
                  "type": {
                    "kind": "field"
                  }
                },
                {
                  "name": "is_infinite",
                  "type": {
                    "kind": "boolean"
                  }
                }
              ],
              "kind": "struct",
              "path": "std::embedded_curve_ops::EmbeddedCurvePoint"
            },
            "visibility": "private"
          },
          {
            "name": "setup_log",
            "type": {
              "kind": "array",
              "length": 9,
              "type": {
                "kind": "field"
              }
            },
            "visibility": "private"
          }
        ],
        "return_type": null
      },
      "bytecode": "JgACBAEnAAABBIBRJgAABAMmAgYEDSYCBwQAHxgABwAGgEQdAIBHgEcBLQiARAABLQiARQACLQiARgADLQiARwAEJwIABQSASCYCBwQJLAgBBiYCCAQKABABCAEmAwYEAQAoBgIILQQABYADLQQACIAELQQAB4AFJAAAAJ0sDAYFJAAAAOMkAAAA6ycCAAEEgFEmAgIEADoNAAEAAgEAgAOABYAHLQCAA4AILQCABIAJCwCACIAHgAojAIAKAAAA4i0BgAiABi0CgAaACQEAgAgAAoAIAQCACQACgAkiAAAAsSUnAIBDBAADJSQAAAOCLAgBBwAAAQIBJgIIAQAsDggHLAgBBwAAAQIBJgIIAAAsDggHLAgBBwAAAQIBJgIJAAIsDgkHHgIABwAeAgAJADI4AAcACQAKJgIHAQEjAgAKAAABSiQAAAOrHgIABwEeAgAJAAo4BwkKIwIACgAAAWYkAAADvRwMBAcALAgBBCYCCQQEABABCQEmAwQEAQAoBAIJLAwJCiwOAgoAKAoCCiwOAwoAKAoCCiwOBwomAgIEASYCAwQALAwDBiIAAAGwDSgABoBDAAcjAgAHAAADPyIAAAHFJgIGAAMAOAEGBywIAQEmAgYECgAQAQYBJgMBBAEAKAECBiwMBgksDggJACgJAgksDggJACgJAgksDggJACgJAgksDggJACgJAgksDggJACgJAgksDggJACgJAgksDggJACgJAgksDggJACgJAgksDggJLAgBBgAAAQIBLA4BBiYCAQQJLAwDBCIAAAJSDDgEAQgjAgAIAAACxyIAAAJkLA0GBSwMAwQiAAACcQw4BAEDIwIAAwAAAoQiAAACgyUcDAQDAAA4BwMGJgIIBAkMOAQICSMCAAkAAAKlJAAAA88AKAUCCAA4CAQJLA0JAy8MAAMABgA4BAIDLAwDBCIAAAJxJgIJBAkMOAQJCiMCAAoAAALeJAAAA88AKAUCCQA4CQQKLA0KCCwNBgkmAgsECQw4BAsMIwIADAAAAwckAAADzy0EAAmAAycAgAQEAAokAAAD4S0IgAUACgAoCgILADgLBAwsDggMLA4KBgA4BAIILAwIBCIAAAJSHAwGBwAAOAEHCSYCCgQDDDgGCgsjAgALAAADYCQAAAPPACgEAgoAOAoGCywNCwcvDAAHAAkAOAYCBywMBwYiAAABsCcAgAQEeAANAAAAgASAAyMAgAMAAAOqKQEAAQX3ofOvpa3UyjsBAQIlKQEAAQW+Hj//PqT2+jsBAQIlKQEAAQXrVzkD6KB2gzsBAQIlKQEAAQXonQn+oREtDjsBAQIlLQGAA4AGCwCABgACgAcjAIAHAAAD/CIAAAQHLQCAA4AFIgAABG4tAAABgAUBAAABgAQAAQEAgAOABIAJLQCAA4AKLQCABYALCwCACoAJgAwjAIAMAAAEWi0BgAqACC0CgAiACwEAgAoAAoAKAQCACwACgAsiAAAEKScBgAUEAAEDAIAGAAKABiIAAARuJS0AGMoYyg==",
      "debug_symbols": "1ZvdTuswDMffpde9iGM7tnmVI4QGDDRp2tAYRzpCvPtJx5bBPooopXNvpnazl1//aWwnbV6r++nty+PNbPGwfK6u/rxW8+XdZD1bLvLZ61td3a5m8/ns8ebj11VoPiKFjcPz02TRnD+vJ6t1dQUpxbqaLu6bQ4n5Lx5m82l1leLbdZ2dqIuTdXDiLi2xdnBKsYuTdHCSLi1J6uCkXTpXuYOTdWnJvtu59bFxCLwzDpGLMcRT1kQkW2siTsXa4ISxYvlrxQgfjTfw1gO8FuNMPxw8hj6UJyjKp6+UB07FOoG0wxvaztgI6RAeYq/wED7Db5qQX28i8q83geHHTVCKuybyoX1100ksN53KYb/hz6+4zzHQJfMhdQiOyNjF6WQSUyQr1yShXS1Rwa2xqGK7WjkYhTKebT/oovEJ6zxCtsZI8ZNtw55wxOwyXvbTlcVI2Eesu45Ydx2x7gYjZufRslMII2anEbPbeNmxjxiJqbCztrMLE+2Mmfig+qPTNZkSlJKRBA9qMjpTk7U7nSuGDIsTUI+dFjXt+iGq7i88zzjeecQXz7mi5WI8zvRRZ/qoM33OFQEX42FXPHwuWV+Mh5zxmC8e8JUvGNQXT/QVDzn6ioeMvuIhY/LFQ87iITnLF+QsHrKzfMHO4qGz+QU7m1+wOIuH4iwe2tDjy5LueCzZIU+CgfN7fkpU1i2C0BFP7CM+97ZwkYgGxkmluySJHuHY0DiMLTg8uDplhSwf2hGOucJJvtTpZeWnRxxxhaO+1FFf6vSy6vMtHLSCY6HdGABo/2YPfM5AG3pxQ59xBIYukcz2KTccpVyB5IsnOtMnmi8eJGc8zvQhZ/qQDl1i454H9YiHfZX8wuKLJznTR4IzHvbFo+CMR33xGDrjMVc8GsgZjzN9wNf9o+ArXyj28V5cb2tEeu4J0O/htK0R5b4YGqdtJquUXOGwL3XYXOGcW0G7FI4vdcSXOqJD4/S4RqRKbuiv3/LZ38lqNrmdT7d7Sh9eFncftpiu/z1ND3abPq2Wd9P7l9W02Xe633LazB1ArY4Q8mU2mTxqjZqPYfOTUA1izSlsLEMNGjNBpvgP",
      "brillig_names": [
        "_store_payload_in_transient_storage_unsafe"
      ]
    },
    {
      "name": "set_admin",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "error_types": {
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "8778930052620580050": {
            "error_kind": "string",
            "string": "caller is not an admin"
          }
        },
        "parameters": [
          {
            "name": "new_admin",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          }
        ],
        "return_type": null
      },
      "bytecode": "JgACBAEnAAABBIBFJgAABAMmAgIEASYCAwQAHxgAAwACgEQtCIBEAAEkAAAARSQAAABGJwIAAQSARSYCAgQAOg0AAQACJSQAAACYHgIAAgAeAgADADI4AAIAAwAEJgICAQEjAgAEAAAAbyQAAADBJgICAAUuDAACAAMeAgAEAQo4AwQFIwIABQAAAJEkAAAA0y8MAAEAAiUnAIAEBHgADQAAAIAEgAMjAIADAAAAwCkBAAEF96Hzr6Wt1Mo7AQECJSkBAAEFvh4//z6k9vo7AQECJSkBAAEFedUGXr5zdNI7AQECJS0AGMoYyg==",
      "debug_symbols": "5VXbjoIwEP2XPvPQudBp/ZXNxqCiISFgEDfZGP99i4GCSmxidF98IR1yhnNm5tA5qU2+Ou6WRbWtD2rxdVJlvc7aoq58dDonatUUZVnsltPXSncPSS/4wz6ruvDQZk2rFmAMJiqvNt1R0H9hW5S5Whh/vAdrnQ5gjWkAA86hmVl6NHNqAtrBDNhS+LQlhCn4O1FWv0C7DWAv/h+1v6LvDKHvJtZ3SE1AG5DH2h25AeyY+Ea7o5dqB32tvWOw72bwHXs7BcAcBWp2fRZqIxEKIBcozDgIkDm0kKUeLaz58YwFgvUFr/05p0MTjbUac2MJL+5zakWcr1Uo1Orgca1scLCOP7rYTSIYbhIrd3Ik2nrHUzldEuETSayfSZq96RBoaABCqiPOIAwDIXYxZ1gyw7BtaiPOMMF0YpyOOQN4XBdg6WoUZx/9ZE2Rrcq837vbY7WerOH2d5/fbOR9U6/zzbHJu908rmXoOo02Ibr8XD4gSch5Ds/zBw==",
      "brillig_names": [
        "set_admin"
      ]
    },
    {
      "name": "process_log",
      "is_unconstrained": true,
      "custom_attributes": [],
      "abi": {
        "error_types": {
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8861757336002045335": {
            "error_kind": "fmtstring",
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ],
            "length": 99
          },
          "9862881900111276825": {
            "error_kind": "fmtstring",
            "item_types": [
              {
                "kind": "field"
              }
            ],
            "length": 35
          }
        },
        "parameters": [
          {
            "name": "log_plaintext",
            "type": {
              "fields": [
                {
                  "name": "storage",
                  "type": {
                    "kind": "array",
                    "length": 18,
                    "type": {
                      "kind": "field"
                    }
                  }
                },
                {
                  "name": "len",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ],
              "kind": "struct",
              "path": "std::collections::bounded_vec::BoundedVec"
            },
            "visibility": "private"
          },
          {
            "name": "tx_hash",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "unique_note_hashes_in_tx",
            "type": {
              "fields": [
                {
                  "name": "storage",
                  "type": {
                    "kind": "array",
                    "length": 64,
                    "type": {
                      "kind": "field"
                    }
                  }
                },
                {
                  "name": "len",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ],
              "kind": "struct",
              "path": "std::collections::bounded_vec::BoundedVec"
            },
            "visibility": "private"
          },
          {
            "name": "first_nullifier_in_tx",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "recipient",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          }
        ],
        "return_type": null
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "process_log"
      ]
    },
    {
      "name": "get_private_nfts",
      "is_unconstrained": true,
      "custom_attributes": [],
      "abi": {
        "error_types": {
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          }
        },
        "parameters": [
          {
            "name": "owner",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          },
          {
            "name": "page_index",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "fields": [
              {
                "kind": "array",
                "length": 10,
                "type": {
                  "kind": "field"
                }
              },
              {
                "kind": "boolean"
              }
            ],
            "kind": "tuple"
          },
          "visibility": "public"
        }
      },
      "bytecode": "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",
      "debug_symbols": "",
      "brillig_names": [
        "get_private_nfts"
      ]
    },
    {
      "name": "prepare_private_balance_increase",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "error_types": {
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          }
        },
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::block_header::BlockHeader"
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ],
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs"
            },
            "visibility": "private"
          },
          {
            "name": "to",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "std::option::Option"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint"
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::note_hash::NoteHash"
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::nullifier::Nullifier"
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "args_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::side_effect::counted::Counted"
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "args_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::log::Log"
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_log::PrivateLogData"
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::LogHash"
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::block_header::BlockHeader"
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                }
              }
            ],
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"
          },
          "visibility": "databus"
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "random",
        "decompose_hint",
        "field_less_than",
        "lte_hint",
        "build_msg_block",
        "attach_len_to_msg_block",
        "get_random_bytes",
        "get_app_tag_as_sender",
        "increment_app_tagging_secret_index_as_sender_wrapper",
        "store_in_execution_cache_oracle_wrapper",
        "enqueue_public_function_call_internal",
        "store_in_execution_cache_oracle_wrapper",
        "directive_invert",
        "directive_integer_quotient",
        "directive_to_radix"
      ],
      "verification_key": "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"
    },
    {
      "name": "transfer_to_private",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "error_types": {
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          }
        },
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::block_header::BlockHeader"
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ],
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs"
            },
            "visibility": "private"
          },
          {
            "name": "to",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          },
          {
            "name": "token_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "std::option::Option"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint"
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::note_hash::NoteHash"
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::nullifier::Nullifier"
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "args_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::side_effect::counted::Counted"
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "args_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::log::Log"
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_log::PrivateLogData"
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::LogHash"
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::block_header::BlockHeader"
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                }
              }
            ],
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"
          },
          "visibility": "databus"
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "random",
        "decompose_hint",
        "field_less_than",
        "lte_hint",
        "build_msg_block",
        "attach_len_to_msg_block",
        "get_random_bytes",
        "get_app_tag_as_sender",
        "increment_app_tagging_secret_index_as_sender_wrapper",
        "store_in_execution_cache_oracle_wrapper",
        "enqueue_public_function_call_internal",
        "store_in_execution_cache_oracle_wrapper",
        "directive_invert",
        "directive_integer_quotient",
        "directive_to_radix"
      ],
      "verification_key": "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"
    },
    {
      "name": "public_dispatch",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "error_types": {
          "10055739771636044368": {
            "error_kind": "string",
            "string": "Function get_admin can only be called statically"
          },
          "10132274202417587856": {
            "error_kind": "string",
            "string": "invalid nonce"
          },
          "10536464181608181124": {
            "error_kind": "string",
            "string": "transfer not prepared"
          },
          "10846690067871036662": {
            "error_kind": "string",
            "string": "invalid owner"
          },
          "11859452850824495745": {
            "error_kind": "fmtstring",
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ],
            "length": 60
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "15009911310769716579": {
            "error_kind": "string",
            "string": "Function public_get_symbol can only be called statically"
          },
          "16541607464495309456": {
            "error_kind": "fmtstring",
            "item_types": [],
            "length": 16
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "16958085610837407363": {
            "error_kind": "string",
            "string": "Function _store_payload_in_transient_storage_unsafe can only be called internally"
          },
          "17028138060491915576": {
            "error_kind": "string",
            "string": "Function _finalize_transfer_to_private_unsafe can only be called internally"
          },
          "17618083556256589634": {
            "error_kind": "string",
            "string": "Initialization hash does not match"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "18105278452957613314": {
            "error_kind": "string",
            "string": "Function public_get_name can only be called statically"
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "2233873454491509486": {
            "error_kind": "string",
            "string": "Initializer address is not the contract deployer"
          },
          "2236649814169388962": {
            "error_kind": "string",
            "string": "PublicImmutable already initialized"
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "364657447181031001": {
            "error_kind": "string",
            "string": "invalid admin"
          },
          "4939791462094160055": {
            "error_kind": "string",
            "string": "Message not authorized by account"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5527120278801020911": {
            "error_kind": "string",
            "string": "invalid NFT owner"
          },
          "6515419266667913063": {
            "error_kind": "string",
            "string": "zero token ID not supported"
          },
          "7176719043052132708": {
            "error_kind": "string",
            "string": "Function _finish_transfer_to_public can only be called internally"
          },
          "8778930052620580050": {
            "error_kind": "string",
            "string": "caller is not an admin"
          },
          "9296579303138805202": {
            "error_kind": "string",
            "string": "token already exists"
          },
          "939615093317106671": {
            "error_kind": "string",
            "string": "Invalid response from registry"
          },
          "9443383425599897888": {
            "error_kind": "string",
            "string": "Function owner_of can only be called statically"
          },
          "9605075991997100073": {
            "error_kind": "string",
            "string": "token does not exist"
          }
        },
        "parameters": [
          {
            "name": "selector",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": null
      },
      "bytecode": "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",
      "debug_symbols": "",
      "brillig_names": [
        "public_dispatch"
      ]
    }
  ],
  "outputs": {
    "globals": {
      "notes": [
        {
          "fields": [
            {
              "kind": "integer",
              "sign": false,
              "value": "0000000000000000000000000000000000000000000000000000000000000000"
            },
            {
              "kind": "string",
              "value": "NFTNote"
            },
            {
              "fields": [
                {
                  "name": "owner",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000001"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "randomness",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000002"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "token_id",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000000"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": true
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                }
              ],
              "kind": "struct"
            }
          ],
          "kind": "tuple"
        }
      ],
      "storage": [
        {
          "fields": [
            {
              "name": "contract_name",
              "value": {
                "kind": "string",
                "value": "NFT"
              }
            },
            {
              "name": "fields",
              "value": {
                "fields": [
                  {
                    "name": "symbol",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000001"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "name",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000003"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "admin",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000005"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "private_nfts",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000006"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "nft_exists",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000007"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "public_owners",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000008"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  }
                ],
                "kind": "struct"
              }
            }
          ],
          "kind": "struct"
        }
      ]
    },
    "structs": {
      "events": [
        {
          "fields": [
            {
              "name": "from",
              "type": {
                "fields": [
                  {
                    "name": "inner",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
              }
            },
            {
              "name": "to",
              "type": {
                "fields": [
                  {
                    "name": "inner",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
              }
            },
            {
              "name": "token_id",
              "type": {
                "kind": "field"
              }
            }
          ],
          "kind": "struct",
          "path": "NFT::NFTTransfer"
        }
      ],
      "functions": [
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "from",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "to",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "token_id",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nonce",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "NFT::transfer_to_public_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "NFT::transfer_to_public_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "admin",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "name",
                    "type": {
                      "kind": "string",
                      "length": 31
                    }
                  },
                  {
                    "name": "symbol",
                    "type": {
                      "kind": "string",
                      "length": 31
                    }
                  }
                ],
                "kind": "struct",
                "path": "NFT::constructor_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "NFT::constructor_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "to",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  }
                ],
                "kind": "struct",
                "path": "NFT::prepare_private_balance_increase_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "kind": "field"
              }
            }
          ],
          "kind": "struct",
          "path": "NFT::prepare_private_balance_increase_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "slot",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "point",
                    "type": {
                      "fields": [
                        {
                          "name": "x",
                          "type": {
                            "kind": "field"
                          }
                        },
                        {
                          "name": "y",
                          "type": {
                            "kind": "field"
                          }
                        },
                        {
                          "name": "is_infinite",
                          "type": {
                            "kind": "boolean"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "std::embedded_curve_ops::EmbeddedCurvePoint"
                    }
                  },
                  {
                    "name": "setup_log",
                    "type": {
                      "kind": "array",
                      "length": 9,
                      "type": {
                        "kind": "field"
                      }
                    }
                  }
                ],
                "kind": "struct",
                "path": "NFT::_store_payload_in_transient_storage_unsafe_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "NFT::_store_payload_in_transient_storage_unsafe_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "from",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "to",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "token_id",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nonce",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "NFT::transfer_in_private_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "NFT::transfer_in_private_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "inner_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "NFT::cancel_authwit_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "NFT::cancel_authwit_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "to",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "token_id",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "NFT::_finish_transfer_to_public_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "NFT::_finish_transfer_to_public_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "from",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "token_id",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "hiding_point_slot",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "NFT::_finalize_transfer_to_private_unsafe_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "NFT::_finalize_transfer_to_private_unsafe_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "token_id",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "hiding_point_slot",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "NFT::finalize_transfer_to_private_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "NFT::finalize_transfer_to_private_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [],
                "kind": "struct",
                "path": "NFT::private_get_symbol_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "fields": [
                  {
                    "name": "value",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "compressed_string::field_compressed_string::FieldCompressedString"
              }
            }
          ],
          "kind": "struct",
          "path": "NFT::private_get_symbol_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [],
                "kind": "struct",
                "path": "NFT::public_get_name_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "fields": [
                  {
                    "name": "value",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "compressed_string::field_compressed_string::FieldCompressedString"
              }
            }
          ],
          "kind": "struct",
          "path": "NFT::public_get_name_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "to",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "token_id",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "NFT::transfer_to_private_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "NFT::transfer_to_private_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [],
                "kind": "struct",
                "path": "NFT::private_get_name_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "fields": [
                  {
                    "name": "value",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "compressed_string::field_compressed_string::FieldCompressedString"
              }
            }
          ],
          "kind": "struct",
          "path": "NFT::private_get_name_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "new_admin",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  }
                ],
                "kind": "struct",
                "path": "NFT::set_admin_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "NFT::set_admin_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [],
                "kind": "struct",
                "path": "NFT::public_get_symbol_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "fields": [
                  {
                    "name": "value",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "compressed_string::field_compressed_string::FieldCompressedString"
              }
            }
          ],
          "kind": "struct",
          "path": "NFT::public_get_symbol_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [],
                "kind": "struct",
                "path": "NFT::get_admin_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "kind": "field"
              }
            }
          ],
          "kind": "struct",
          "path": "NFT::get_admin_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "from",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "to",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "token_id",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nonce",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "NFT::transfer_in_public_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "NFT::transfer_in_public_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "to",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "token_id",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "NFT::mint_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "NFT::mint_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "token_id",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "NFT::owner_of_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "fields": [
                  {
                    "name": "inner",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
              }
            }
          ],
          "kind": "struct",
          "path": "NFT::owner_of_abi"
        }
      ]
    }
  },
  "file_map": {
    "100": {
      "path": "/Users/hka/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/aztec-nr/aztec/src/encrypted_logs/log_assembly_strategies/default_aes128/partial_note.nr",
      "source": "// THIS FILE WILL GO AWAY WHEN WE REFACTOR PARTIAL NOTES, SO I DON'T FEEL TOO\n// GUILTY ABOUT THE OBVIOUS CODE DUPLICATION VS note.nr & event.nr.\n\nuse crate::{\n    encrypted_logs::{\n        encrypt::aes128::derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256,\n        log_assembly_strategies::default_aes128::note::{\n            get_arr_of_size__log_bytes__from_PT, get_arr_of_size__log_bytes_padding__from_PT,\n            HEADER_CIPHERTEXT_SIZE_IN_BYTES,\n        },\n    },\n    keys::{\n        ecdh_shared_secret::derive_ecdh_shared_secret_using_aztec_address,\n        ephemeral::generate_ephemeral_key_pair,\n    },\n    oracle::notes::{get_app_tag_as_sender, increment_app_tagging_secret_index_as_sender},\n    utils::{bytes::{be_bytes_31_to_fields, get_random_bytes}, point::get_sign_of_point},\n};\nuse dep::protocol_types::{address::{aztec_address::ToField, AztecAddress}, hash::poseidon2_hash};\nuse std::aes128::aes128_encrypt;\n\npub fn compute_partial_public_log_payload<let N: u32, let M: u32>(\n    contract_address: AztecAddress,\n    plaintext: [u8; N],\n    recipient: AztecAddress,\n    sender: AztecAddress,\n) -> [Field; M] {\n    // *****************************************************************************\n    // Compute the shared secret\n    // *****************************************************************************\n\n    let (eph_sk, eph_pk) = generate_ephemeral_key_pair();\n\n    let eph_pk_sign_byte: u8 = get_sign_of_point(eph_pk) as u8;\n\n    let ciphertext_shared_secret = derive_ecdh_shared_secret_using_aztec_address(eph_sk, recipient); // not to be confused with the tagging shared secret\n\n    // TODO: also use this shared secret for deriving note randomness.\n\n    // *****************************************************************************\n    // Prepend/append extra bytes\n    // *****************************************************************************\n\n    // \"Proper\" meaning the main meaty stuff that we care about.\n    let proper_plaintext: [u8; N] = plaintext;\n    let final_plaintext = proper_plaintext;\n\n    // *****************************************************************************\n    // Convert the plaintext into whatever format the encryption function expects\n    // *****************************************************************************\n\n    // Already done for this strategy: AES expects bytes.\n\n    // *****************************************************************************\n    // Encrypt\n    // *****************************************************************************\n\n    let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n        ciphertext_shared_secret,\n    );\n\n    let ciphertext_bytes = aes128_encrypt(final_plaintext, iv, sym_key);\n\n    assert(ciphertext_bytes.len() == 16 * (1 + (2 + N) / 16));\n\n    // *****************************************************************************\n    // Compute the header ciphertext\n    // *****************************************************************************\n\n    let contract_address_bytes = contract_address.to_field().to_be_bytes::<32>();\n\n    let mut header_plaintext: [u8; 32 + 2] = [0; 32 + 2];\n    for i in 0..32 {\n        header_plaintext[i] = contract_address_bytes[i];\n    }\n    let offset = contract_address_bytes.len();\n\n    let ciphertext_bytes_length = ciphertext_bytes.len();\n    header_plaintext[offset] = (ciphertext_bytes_length >> 8) as u8;\n    header_plaintext[offset + 1] = ciphertext_bytes_length as u8;\n\n    // TODO: this is insecure and wasteful:\n    // \"Insecure\", because the esk shouldn't be used twice (once for the header,\n    // and again for the proper ciphertext) (at least, I never got the\n    // \"go ahead\" that this would be safe, unfortunately).\n    // \"Wasteful\", because the exact same computation is happening further down.\n    // I'm leaving that 2nd computation where it is, because this 1st computation\n    // will be imminently deleted, when the header logic is deleted.\n    let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n        ciphertext_shared_secret,\n    );\n\n    // Note: the aes128_encrypt builtin fn automatically appends bytes to the\n    // input, according to pkcs#7; hence why the output `header_ciphertext_bytes` is 16\n    // bytes larger than the input in this case.\n    let header_ciphertext_bytes = aes128_encrypt(header_plaintext, iv, sym_key);\n    // I recall that converting a slice to an array incurs constraints, so I'll check the length this way instead:\n    assert(header_ciphertext_bytes.len() == HEADER_CIPHERTEXT_SIZE_IN_BYTES);\n\n    // *****************************************************************************\n    // Prepend / append more bytes of data to the ciphertext, before converting back\n    // to fields.\n    // *****************************************************************************\n\n    let mut log_bytes_padding_to_mult_31 = get_arr_of_size__log_bytes_padding__from_PT::<2 + N>();\n    log_bytes_padding_to_mult_31 = unsafe { get_random_bytes() };\n\n    let mut log_bytes = get_arr_of_size__log_bytes__from_PT::<2 + N>();\n\n    log_bytes[0] = eph_pk_sign_byte;\n    let mut offset = 1;\n    for i in 0..header_ciphertext_bytes.len() {\n        log_bytes[offset + i] = header_ciphertext_bytes[i];\n    }\n    offset += header_ciphertext_bytes.len();\n\n    for i in 0..ciphertext_bytes.len() {\n        log_bytes[offset + i] = ciphertext_bytes[i];\n    }\n    offset += ciphertext_bytes.len();\n\n    for i in 0..log_bytes_padding_to_mult_31.len() {\n        log_bytes[offset + i] = log_bytes_padding_to_mult_31[i];\n    }\n\n    // *****************************************************************************\n    // Convert bytes back to fields\n    // *****************************************************************************\n\n    let log_bytes_as_fields = be_bytes_31_to_fields(log_bytes);\n\n    // *****************************************************************************\n    // Prepend / append fields, to create the final log\n    // *****************************************************************************\n\n    // We don't add any extra random padding.\n    // Whilst we do this in note.nr, we won't do it for this partial_note log, because it's going to get stored in public, and so:\n    // - The nature of the tx is going to be leaked.\n    // - We therefore don't care if it's padded to obscure the length of the actual ciphertext.\n    // Note: partial logs are going to be greatly refactored, soon.\n\n    // We assume that the sender wants for the recipient to find the tagged note, and therefore that they will cooperate\n    // and use the correct tag. Usage of a bad tag will result in the recipient not being able to find the note\n    // automatically.\n    let tag = unsafe { get_app_tag_as_sender(sender, recipient) };\n    increment_app_tagging_secret_index_as_sender(sender, recipient);\n\n    // Silo the tag with contract address.\n    // This is done by the kernel circuit to the private logs, but since the partial log will be finalized and emitted\n    // in public as unencrypted log, its tag is not siloed at the moment.\n    // To avoid querying logs using two types of tags, we silo the tag manually here.\n    // TODO(#10273) This should be done by the AVM when it's processing the raw logs instead of their hashes.\n    let siloed_tag = poseidon2_hash([contract_address.to_field(), tag]);\n\n    // Temporary hack so that the partial public log remains the same format.\n    // It should return field array and make the tag the first field as compute_private_log_payload does.\n\n    let mut final_log: [Field; M] = [0; M];\n\n    final_log[0] = siloed_tag;\n    final_log[1] = eph_pk.x;\n\n    let mut offset = 2;\n    for i in 0..log_bytes_as_fields.len() {\n        final_log[offset + i] = log_bytes_as_fields[i];\n    }\n\n    final_log\n}\n"
    },
    "105": {
      "path": "/Users/hka/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/aztec-nr/aztec/src/hash.nr",
      "source": "use crate::utils::to_bytes::{arr_to_be_bytes_arr, str_to_be_bytes_arr};\nuse dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{\n        GENERATOR_INDEX__FUNCTION_ARGS, GENERATOR_INDEX__MESSAGE_NULLIFIER,\n        GENERATOR_INDEX__SECRET_HASH,\n    },\n    hash::{poseidon2_hash_with_separator, poseidon2_hash_with_separator_slice, sha256_to_field},\n    point::Point,\n    traits::Hash,\n};\n\npub use dep::protocol_types::hash::{compute_siloed_nullifier, pedersen_hash};\n\npub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {\n    std::hash::pedersen_commitment_with_separator(inputs, hash_index)\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_l1_to_l2_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field,\n    leaf_index: Field,\n) -> Field {\n    let mut hash_bytes = [0 as u8; 224];\n    let sender_bytes: [u8; 32] = sender.to_field().to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let version_bytes: [u8; 32] = version.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let secret_hash_bytes: [u8; 32] = secret_hash.to_be_bytes();\n    let leaf_index_bytes: [u8; 32] = leaf_index.to_be_bytes();\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n        hash_bytes[i + 192] = leaf_index_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret\npub fn compute_l1_to_l2_message_nullifier(message_hash: Field, secret: Field) -> Field {\n    poseidon2_hash_with_separator([message_hash, secret], GENERATOR_INDEX__MESSAGE_NULLIFIER)\n}\n\npub struct ArgsHasher {\n    pub fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n#[test]\nunconstrained fn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..100 {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    dep::std::println(hash);\n    assert(hash == 0x19b0d74feb06ebde19edd85a28986c97063e84b3b351a8b666c7cac963ce655f);\n}\n"
    },
    "112": {
      "path": "/Users/hka/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/aztec-nr/aztec/src/history/public_storage.nr",
      "source": "use dep::protocol_types::{\n    address::AztecAddress, block_header::BlockHeader, constants::GENERATOR_INDEX__PUBLIC_LEAF_INDEX,\n    hash::poseidon2_hash_with_separator, utils::field::full_field_less_than,\n};\nuse dep::protocol_types::merkle_tree::root::root_from_sibling_path;\n\nuse crate::oracle::get_public_data_witness::get_public_data_witness;\n\ntrait PublicStorageHistoricalRead {\n    fn public_storage_historical_read(\n        header: BlockHeader,\n        storage_slot: Field,\n        contract_address: AztecAddress,\n    ) -> Field;\n}\n\nimpl PublicStorageHistoricalRead for BlockHeader {\n    fn public_storage_historical_read(\n        self,\n        storage_slot: Field,\n        contract_address: AztecAddress,\n    ) -> Field {\n        // 1) Compute the leaf index by siloing the storage slot with the contract address\n        let public_data_tree_index = poseidon2_hash_with_separator(\n            [contract_address.to_field(), storage_slot],\n            GENERATOR_INDEX__PUBLIC_LEAF_INDEX,\n        );\n\n        // 2) Get the membership witness for the tree index.\n        /// Safety: The witness is only used as a \"magical value\" that makes the proof below pass. Hence it's safe.\n        let witness = unsafe {\n            get_public_data_witness(\n                self.global_variables.block_number as u32,\n                public_data_tree_index,\n            )\n        };\n\n        // 3) The witness is made up of two parts: the preimage of the leaf and the proof that it exists in the tree.\n        // We first prove that the witness is indeed valid for the public data tree, i.e. that the preimage is of a\n        // value present in the tree. Note that `hash` returns not just the hash of the value but also the metadata\n        // (slot, next index and next slot).\n        assert_eq(\n            self.state.partial.public_data_tree.root,\n            root_from_sibling_path(witness.leaf_preimage.hash(), witness.index, witness.path),\n            \"Proving public value inclusion failed\",\n        );\n\n        // 4) Now that we know the preimage is valid, we determine the value that's represented by this tree entry. Here\n        // we have two scenarios:\n        // 1. The tree entry is initialized, and the value is the same as the one in the witness\n        // 2. The entry was never initialized, and the value is default zero (the default)\n        // The code below is based on the same checks in `validate_public_data_reads` in `base_rollup_inputs`.\n        let preimage = witness.leaf_preimage;\n\n        let is_less_than_slot = full_field_less_than(preimage.slot, public_data_tree_index);\n        let is_next_greater_than = full_field_less_than(public_data_tree_index, preimage.next_slot);\n        let is_max = ((preimage.next_index == 0) & (preimage.next_slot == 0));\n        let is_in_range = is_less_than_slot & (is_next_greater_than | is_max);\n\n        let value = if is_in_range {\n            0\n        } else {\n            assert_eq(\n                preimage.slot,\n                public_data_tree_index,\n                \"Public data tree index doesn't match witness\",\n            );\n            preimage.value\n        };\n\n        value\n    }\n}\n"
    },
    "114": {
      "path": "/Users/hka/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/aztec-nr/aztec/src/keys/ecdh_shared_secret.nr",
      "source": "use dep::protocol_types::{\n    address::aztec_address::AztecAddress, point::Point, scalar::Scalar, traits::FromField,\n};\nuse std::embedded_curve_ops::multi_scalar_mul;\n\n/// Computes a standard ecdh shared secret: [secret] * public_key = shared_secret.\n/// The input secret is known only to one party. The output shared secret is derivable\n/// by both parties, through this function.\n/// E.g.:\n/// Epk = esk * G // ephemeral keypair\n/// Pk = sk * G // recipient keypair\n/// Shared secret S = esk * Pk = sk * Epk // see how this function can be called with two different sets of inputs, depending on which secret the caller knows (either esk or sk)?\n// See also: https://en.wikipedia.org/wiki/Elliptic-curve_Diffie%E2%80%93Hellman\npub fn derive_ecdh_shared_secret(secret: Scalar, public_key: Point) -> Point {\n    let shared_secret = multi_scalar_mul([public_key], [secret]);\n    shared_secret\n}\n\n/// Computes a standard ecdh shared secret using the address public key of the given address:\n/// [ephemeral_secret] * recipient_address_public_key = shared_secret.\n/// The intention is that the _creator_ of a shared secret would call this function,\n/// given the address of their intended recipient.\npub fn derive_ecdh_shared_secret_using_aztec_address(\n    ephemeral_secret: Scalar,\n    recipient_address: AztecAddress,\n) -> Point {\n    derive_ecdh_shared_secret(ephemeral_secret, recipient_address.to_address_point().inner)\n}\n\n#[test]\nunconstrained fn test_consistency_with_typescript() {\n    let secret = Scalar {\n        lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n        hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06,\n    };\n    let point = Point {\n        x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n        y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n        is_infinite: false,\n    };\n\n    let shared_secret = derive_ecdh_shared_secret(secret, point);\n\n    // This is just pasted from a test run.\n    // The original typescript code from which this could be generated seems to have been deleted by someone, and soon the typescript code for encryption and decryption won't be needed, so this will have to do.\n    let hard_coded_shared_secret = Point {\n        x: 0x15d55a5b3b2caa6a6207f313f05c5113deba5da9927d6421bcaa164822b911bc,\n        y: 0x0974c3d0825031ae933243d653ebb1a0b08b90ee7f228f94c5c74739ea3c871e,\n        is_infinite: false,\n    };\n    assert_eq(shared_secret, hard_coded_shared_secret);\n}\n\n#[test]\nunconstrained fn test_shared_secret_computation_in_both_directions() {\n    let secret_a = Scalar { lo: 0x1234, hi: 0x2345 };\n    let secret_b = Scalar { lo: 0x3456, hi: 0x4567 };\n\n    let pk_a = std::embedded_curve_ops::fixed_base_scalar_mul(secret_a);\n    let pk_b = std::embedded_curve_ops::fixed_base_scalar_mul(secret_b);\n\n    let shared_secret = derive_ecdh_shared_secret(secret_a, pk_b);\n    let shared_secret_alt = derive_ecdh_shared_secret(secret_b, pk_a);\n\n    assert_eq(shared_secret, shared_secret_alt);\n}\n\n#[test]\nunconstrained fn test_shared_secret_computation_from_address_in_both_directions() {\n    let secret_a = Scalar { lo: 0x1234, hi: 0x2345 };\n    let secret_b = Scalar { lo: 0x3456, hi: 0x4567 };\n\n    let mut pk_a = std::embedded_curve_ops::fixed_base_scalar_mul(secret_a);\n    let mut pk_b = std::embedded_curve_ops::fixed_base_scalar_mul(secret_b);\n\n    let address_b = AztecAddress::from_field(pk_b.x);\n\n    // We were lazy in deriving the secret keys, and didn't check the resulting y-coordinates\n    // of the pk_a or pk_b to be less than half the field modulus.\n    // If needed, we negate the pk's so that they yield valid address points.\n    // (We could also have negated the secrets, but there's no negate method for\n    // EmbeddedCurvesScalar).\n    pk_a = if (AztecAddress::from_field(pk_a.x).to_address_point().inner == pk_a) {\n        pk_a\n    } else {\n        pk_a.neg()\n    };\n    pk_b = if (address_b.to_address_point().inner == pk_b) {\n        pk_b\n    } else {\n        pk_b.neg()\n    };\n\n    let shared_secret = derive_ecdh_shared_secret_using_aztec_address(secret_a, address_b);\n    let shared_secret_alt = derive_ecdh_shared_secret(secret_b, pk_a);\n\n    assert_eq(shared_secret, shared_secret_alt);\n}\n"
    },
    "115": {
      "path": "/Users/hka/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/aztec-nr/aztec/src/keys/ephemeral.nr",
      "source": "use std::{\n    embedded_curve_ops::fixed_base_scalar_mul, field::bn254::decompose,\n    hash::from_field_unsafe as fr_to_fq_unsafe,\n};\n\nuse dep::protocol_types::{point::Point, scalar::Scalar};\n\nuse crate::oracle::random::random;\n\n/// Converts a base field element to scalar field element.\n/// This is fine because modulus of the base field is smaller than the modulus of the scalar field.\nfn fr_to_fq(r: Field) -> Scalar {\n    let (lo, hi) = decompose(r);\n\n    Scalar { lo, hi }\n}\n\npub fn generate_ephemeral_key_pair() -> (Scalar, Point) {\n    // @todo Need to draw randomness from the full domain of Fq not only Fr\n    // We use the randomness to preserve the privacy of both the sender and recipient via encryption, so a malicious\n    // sender could use non-random values to reveal the plaintext. But they already know it themselves anyway, and so\n    // the recipient already trusts them to not disclose this information. We can therefore assume that the sender will\n    // cooperate in the random value generation.\n    let randomness = unsafe { random() };\n\n    // We use the unsafe version of `fr_to_fq` because multi_scalar_mul (called by derive_public_key) will constrain\n    // the scalars.\n    let eph_sk = fr_to_fq_unsafe(randomness);\n    let eph_pk = fixed_base_scalar_mul(eph_sk);\n\n    (eph_sk, eph_pk)\n}\n"
    },
    "116": {
      "path": "/Users/hka/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/aztec-nr/aztec/src/keys/getters/mod.nr",
      "source": "use crate::{\n    keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX},\n    oracle::{\n        key_validation_request::get_key_validation_request,\n        keys::get_public_keys_and_partial_address,\n    },\n};\nuse dep::protocol_types::{address::AztecAddress, public_keys::PublicKeys};\n\nmod test;\n\npub unconstrained fn get_nsk_app(npk_m_hash: Field) -> Field {\n    get_key_validation_request(npk_m_hash, NULLIFIER_INDEX).sk_app\n}\n\n// A helper function that gets app-siloed outgoing viewing key for a given `ovpk_m_hash`. This function is used\n// in unconstrained contexts only - when computing unconstrained note logs. The safe alternative is `request_ovsk_app`\n// function defined on `PrivateContext`.\npub unconstrained fn get_ovsk_app(ovpk_m_hash: Field) -> Field {\n    get_key_validation_request(ovpk_m_hash, OUTGOING_INDEX).sk_app\n}\n\n// Returns all public keys for a given account, applying proper constraints to the context. We read all\n// keys at once since the constraints for reading them all are actually fewer than if we read them one at a time - any\n// read keys that are not required by the caller can simply be discarded.\npub fn get_public_keys(account: AztecAddress) -> PublicKeys {\n    /// Safety: Public keys are constrained by showing their inclusion in the address's preimage.\n    let (public_keys, partial_address) = unsafe { get_public_keys_and_partial_address(account) };\n    assert_eq(\n        account,\n        AztecAddress::compute(public_keys, partial_address),\n        \"Invalid public keys hint for address\",\n    );\n\n    public_keys\n}\n"
    },
    "122": {
      "path": "/Users/hka/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/aztec-nr/aztec/src/macros/functions/initialization_utils.nr",
      "source": "use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress,\n    constants::GENERATOR_INDEX__CONSTRUCTOR, hash::poseidon2_hash_with_separator,\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext},\n    oracle::get_contract_instance::{\n        get_contract_instance, get_contract_instance_deployer_avm,\n        get_contract_instance_initialization_hash_avm,\n    },\n};\n\npub fn mark_as_initialized_public(context: &mut PublicContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn mark_as_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn assert_is_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    context.push_nullifier_read_request(init_nullifier);\n}\n\nfn compute_unsiloed_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    address.to_field()\n}\n\npub fn assert_initialization_matches_address_preimage_public(context: PublicContext) {\n    let address = context.this_address();\n    let deployer = get_contract_instance_deployer_avm(address).unwrap();\n    let initialization_hash = get_contract_instance_initialization_hash_avm(address).unwrap();\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (deployer.is_zero()) | (deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\npub fn assert_initialization_matches_address_preimage_private(context: PrivateContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\n/// This function is not only used in macros but it's also used by external people to check that an instance has been\n/// initialized with the correct constructor arguments. Don't hide this unless you implement factory functionality.\npub fn compute_initialization_hash(\n    init_selector: FunctionSelector,\n    init_args_hash: Field,\n) -> Field {\n    poseidon2_hash_with_separator(\n        [init_selector.to_field(), init_args_hash],\n        GENERATOR_INDEX__CONSTRUCTOR,\n    )\n}\n"
    },
    "131": {
      "path": "/Users/hka/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/aztec-nr/aztec/src/note/discovery/mod.nr",
      "source": "use std::static_assert;\n\nuse crate::{\n    context::unconstrained_context::UnconstrainedContext, note::note_header::NoteHeader,\n    oracle::note_discovery::deliver_note, utils::array,\n};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::{MAX_NOTE_HASHES_PER_TX, PRIVATE_LOG_SIZE_IN_FIELDS},\n    hash::compute_note_hash_nonce,\n};\n\n// We reserve two fields in the note log that are not part of the note content: one for the storage slot, and one for\n// the note type id.\nglobal NOTE_LOG_RESERVED_FIELDS: u32 = 2;\npub global MAX_NOTE_SERIALIZED_LEN: u32 = PRIVATE_LOG_SIZE_IN_FIELDS - NOTE_LOG_RESERVED_FIELDS;\n\npub struct NoteHashesAndNullifier {\n    pub note_hash: Field,\n    pub unique_note_hash: Field,\n    pub inner_nullifier: Field,\n}\n\n/// Processes a log given its plaintext by trying to find notes encoded in it. This process involves the discovery of\n/// the nonce of any such notes, which requires knowledge of the transaction hash in which the notes would've been\n/// created, along with the list of unique note hashes in said transaction.\n///\n/// Additionally, this requires a `compute_note_hash_and_nullifier` lambda that is able to compute these values for any\n/// note in the contract given their contents. A typical implementation of such a function would look like this:\n///\n/// ```\n/// |packed_note_content, note_header, note_type_id| {\n///     let hashes = if note_type_id == MyNoteType::get_note_type_id() {\n///         assert(packed_note_content.len() == MY_NOTE_TYPE_SERIALIZATION_LENGTH);\n///         dep::aztec::note::utils::compute_note_hash_and_optionally_a_nullifier(\n///             MyNoteType::unpack_content,\n///             note_header,\n///             true,\n///             storage_slot,\n///             packed_note_content.storage(),\n///         )\n///     } else {\n///         panic(f\"Unknown note type id {note_type_id}\")\n///     };\n///\n///     Option::some(dep::aztec::oracle::management::NoteHashesAndNullifier {\n///         note_hash: hashes[0],\n///         unique_note_hash: hashes[1],\n///         inner_nullifier: hashes[3],\n///     })\n/// }\n/// ```\npub unconstrained fn do_process_log<Env>(\n    context: UnconstrainedContext,\n    log_plaintext: BoundedVec<Field, PRIVATE_LOG_SIZE_IN_FIELDS>,\n    tx_hash: Field,\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    recipient: AztecAddress,\n    compute_note_hash_and_nullifier: fn[Env](BoundedVec<Field, MAX_NOTE_SERIALIZED_LEN>, NoteHeader, Field, Field) -> Option<NoteHashesAndNullifier>,\n) {\n    let (storage_slot, note_type_id, packed_note_content) =\n        destructure_log_plaintext(log_plaintext);\n\n    // We need to find the note's nonce, which is the one that results in one of the unique note hashes from tx_hash\n    for_each_in_bounded_vec(\n        unique_note_hashes_in_tx,\n        |expected_unique_note_hash, i| {\n            let candidate_nonce = compute_note_hash_nonce(first_nullifier_in_tx, i);\n\n            let header = NoteHeader::new(context.this_address(), candidate_nonce);\n\n            // TODO(#11157): handle failed note_hash_and_nullifier computation\n            let hashes = compute_note_hash_and_nullifier(\n                packed_note_content,\n                header,\n                storage_slot,\n                note_type_id,\n            )\n                .unwrap();\n\n            if hashes.unique_note_hash == expected_unique_note_hash {\n                // TODO(#10726): push these into a vec to deliver all at once instead of having one oracle call per note\n\n                assert(\n                    deliver_note(\n                        context.this_address(), // TODO(#10727): allow other contracts to deliver notes\n                        storage_slot,\n                        candidate_nonce,\n                        packed_note_content,\n                        hashes.note_hash,\n                        hashes.inner_nullifier,\n                        tx_hash,\n                        recipient,\n                    ),\n                    \"Failed to deliver note\",\n                );\n\n                // We don't exit the loop - it is possible (though rare) for the exact same note content to be present\n                // multiple times in the same transaction with different nonces. This typically doesn't happen due to\n                // notes containing random values in order to hide their contents.\n            }\n        },\n    );\n}\n\nunconstrained fn destructure_log_plaintext(\n    log_plaintext: BoundedVec<Field, PRIVATE_LOG_SIZE_IN_FIELDS>,\n) -> (Field, Field, BoundedVec<Field, MAX_NOTE_SERIALIZED_LEN>) {\n    assert(log_plaintext.len() >= NOTE_LOG_RESERVED_FIELDS);\n\n    // If NOTE_LOG_RESERVED_FIELDS is changed, causing the assertion below to fail, then the declarations for\n    // `storage_slot` and `note_type_id` must be updated as well.\n    static_assert(\n        NOTE_LOG_RESERVED_FIELDS == 2,\n        \"unepxected value for NOTE_LOG_RESERVED_FIELDS\",\n    );\n    let storage_slot = log_plaintext.get(0);\n    let note_type_id = log_plaintext.get(1);\n\n    let packed_note_content = array::subbvec(log_plaintext, NOTE_LOG_RESERVED_FIELDS);\n\n    (storage_slot, note_type_id, packed_note_content)\n}\n\nfn for_each_in_bounded_vec<T, let MaxLen: u32, Env>(\n    vec: BoundedVec<T, MaxLen>,\n    f: fn[Env](T, u32) -> (),\n) {\n    for i in 0..MaxLen {\n        if i < vec.len() {\n            f(vec.get_unchecked(i), i);\n        }\n    }\n}\n"
    },
    "132": {
      "path": "/Users/hka/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/aztec-nr/aztec/src/note/lifecycle.nr",
      "source": "use crate::context::{PrivateContext, PublicContext};\nuse crate::note::{\n    note_emission::NoteEmission,\n    note_header::NoteHeader,\n    note_interface::{NoteInterface, NullifiableNote},\n    utils::{compute_note_hash_for_nullify_internal, compute_note_hash_for_read_request},\n};\nuse crate::oracle::notes::notify_created_note;\n\npub fn create_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: &mut Note,\n) -> NoteEmission<Note>\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let contract_address = (*context).this_address();\n    let note_hash_counter = context.side_effect_counter;\n\n    let header = NoteHeader { contract_address, nonce: 0, note_hash_counter };\n    note.set_header(header);\n    let note_hash = note.compute_note_hash(storage_slot);\n\n    let packed_note_content = Note::pack_content(*note);\n    notify_created_note(\n        storage_slot,\n        Note::get_note_type_id(),\n        packed_note_content,\n        note_hash,\n        note_hash_counter,\n    );\n\n    context.push_note_hash(note_hash);\n\n    NoteEmission::new(*note, storage_slot)\n}\n\npub fn create_note_hash_from_public<Note, let N: u32>(\n    context: &mut PublicContext,\n    storage_slot: Field,\n    note: &mut Note,\n)\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let contract_address = (*context).this_address();\n    // Public note hashes are transient, but have no side effect counters, so we just need note_hash_counter != 0\n    let header = NoteHeader { contract_address, nonce: 0, note_hash_counter: 1 };\n    note.set_header(header);\n    let note_hash = note.compute_note_hash(storage_slot);\n\n    context.push_note_hash(note_hash);\n}\n\n// Note: This function is currently totally unused.\npub fn destroy_note<Note, let N: u32>(context: &mut PrivateContext, note: Note, storage_slot: Field)\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note, storage_slot);\n\n    destroy_note_unsafe(context, note, note_hash_for_read_request)\n}\n\npub fn destroy_note_unsafe<Note, let N: u32>(\n    context: &mut PrivateContext,\n    note: Note,\n    note_hash_for_read_request: Field,\n)\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let note_hash_for_nullify =\n        compute_note_hash_for_nullify_internal(note, note_hash_for_read_request);\n    let nullifier = note.compute_nullifier(context, note_hash_for_nullify);\n\n    let note_hash_counter = note.get_header().note_hash_counter;\n    let notification_note_hash = if (note_hash_counter == 0) {\n        // Counter is zero, so we're nullifying a settled note and we don't populate the note_hash with real value.\n        0\n    } else {\n        // A non-zero note hash counter implies that we're nullifying a pending note (i.e. one that has not yet been\n        // persisted in the trees and is instead in the pending new note hashes array). In such a case we populate its\n        // hash with real value to inform the kernel which note we're nullifyng so that it can either squash both\n        // the note and the nullifier if it's an inner note hash, or check that the it matches a pending note if it's\n        // a siloed note hash.\n        note_hash_for_nullify\n    };\n\n    context.push_nullifier_for_note_hash(nullifier, notification_note_hash)\n}\n"
    },
    "134": {
      "path": "/Users/hka/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/aztec-nr/aztec/src/note/note_emission.nr",
      "source": "/**\n * A note emission struct containing the information required for emitting a note.\n * The exact `emit` logic is passed in by the application code\n */\npub struct NoteEmission<Note> {\n    pub note: Note,\n    pub storage_slot: Field,\n}\n\nimpl<Note> NoteEmission<Note> {\n    pub fn new(note: Note, storage_slot: Field) -> Self {\n        Self { note, storage_slot }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](Self) -> ()) {\n        _emit(self);\n    }\n\n    pub fn discard(_self: Self) {}\n}\n\n/**\n * A struct wrapping note emission in `Option<T>`.\n * This is the struct provided to application codes, which can be used to emit\n * only when a note was actually inserted.\n * It is fairly common to have cases where a function conditionally inserts,\n * and this allows us to keep the same API for emission in both cases (e.g. inserting\n * a change note in a token's transfer function only when there is \"change\" left).\n */\npub struct OuterNoteEmission<Note> {\n    emission: Option<NoteEmission<Note>>,\n}\n\nimpl<Note> OuterNoteEmission<Note> {\n    pub fn new(emission: Option<NoteEmission<Note>>) -> Self {\n        Self { emission }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](NoteEmission<Note>) -> ()) {\n        if self.emission.is_some() {\n            _emit(self.emission.unwrap());\n        }\n    }\n\n    pub fn discard(_self: Self) {}\n}\n"
    },
    "136": {
      "path": "/Users/hka/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/aztec-nr/aztec/src/note/note_getter/mod.nr",
      "source": "use crate::context::PrivateContext;\nuse crate::note::{\n    constants::{GET_NOTE_ORACLE_RETURN_LENGTH, VIEW_NOTE_ORACLE_RETURN_LENGTH},\n    note_getter_options::{NoteGetterOptions, NoteStatus, PropertySelector, Select, Sort, SortOrder},\n    note_interface::{NoteInterface, NullifiableNote},\n    note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_request,\n};\nuse crate::oracle;\nuse crate::utils::comparison::compare;\nuse dep::protocol_types::constants::{\n    GET_NOTES_ORACLE_RETURN_LENGTH, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL,\n};\n\npub use crate::note::constants::MAX_NOTES_PER_PAGE;\n\nmod test;\n\nfn extract_property_value_from_selector<let N: u32>(\n    packed_note_content: [Field; N],\n    selector: PropertySelector,\n) -> Field {\n    // Selectors use PropertySelectors in order to locate note properties inside the packed note.\n    // This allows easier packing and custom (un)packing schemas. A note property is located\n    // inside the packed note using the index inside the array, a byte offset and a length.\n    let value: [u8; 32] = packed_note_content[selector.index].to_be_bytes();\n    let offset = selector.offset;\n    let length = selector.length;\n    let mut value_field = 0 as Field;\n    let mut acc: Field = 1;\n    for i in 0..32 {\n        if i < length {\n            value_field += value[31 + offset - i] as Field * acc;\n            acc = acc * 256;\n        }\n    }\n    value_field\n}\n\nfn check_note_header<Note, let N: u32>(context: PrivateContext, note: Note)\nwhere\n    Note: NoteInterface<N>,\n{\n    let header = note.get_header();\n    let contract_address = context.this_address();\n    assert(header.contract_address.eq(contract_address), \"Mismatch note header contract address.\");\n}\n\nfn check_note_content<let N: u32>(\n    packed_note_content: [Field; N],\n    selects: BoundedVec<Option<Select>, N>,\n) {\n    for i in 0..selects.len() {\n        let select = selects.get_unchecked(i).unwrap_unchecked();\n        let value_field =\n            extract_property_value_from_selector(packed_note_content, select.property_selector);\n\n        assert(\n            compare(value_field, select.comparator, select.value.to_field()),\n            \"Mismatch return note field.\",\n        );\n    }\n}\n\nfn check_notes_order<let N: u32>(\n    fields_0: [Field; N],\n    fields_1: [Field; N],\n    sorts: BoundedVec<Option<Sort>, N>,\n) {\n    for i in 0..sorts.len() {\n        let sort = sorts.get_unchecked(i).unwrap_unchecked();\n        let field_0 = extract_property_value_from_selector(fields_0, sort.property_selector);\n        let field_1 = extract_property_value_from_selector(fields_1, sort.property_selector);\n        let eq = field_0 == field_1;\n        let lt = field_0.lt(field_1);\n        if sort.order == SortOrder.ASC {\n            assert(eq | lt, \"Return notes not sorted in ascending order.\");\n        } else if !eq {\n            assert(!lt, \"Return notes not sorted in descending order.\");\n        }\n    }\n}\n\npub fn get_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n) -> (Note, Field)\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    /// Safety: Constraining that we got a valid note from the oracle is fairly straightforward: all we need to do\n    /// is check that the metadata is correct, and that the note exists.\n    let note = unsafe { get_note_internal(storage_slot) };\n    check_note_header(*context, note);\n\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note, storage_slot);\n    context.push_note_hash_read_request(note_hash_for_read_request);\n\n    (note, note_hash_for_read_request)\n}\n\npub fn get_notes<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> (BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>)\nwhere\n    Note: NoteInterface<N> + NullifiableNote + Eq,\n{\n    /// Safety: The notes are constrained below.\n    let opt_notes = unsafe { get_notes_internal(storage_slot, options) };\n\n    // We apply the constraints in a separate function instead of inlining them here to make it easier to test that\n    // these checks correctly reject bad notes.\n    constrain_get_notes_internal(context, storage_slot, opt_notes, options)\n}\n\nunconstrained fn apply_preprocessor<Note, PREPROCESSOR_ARGS>(\n    notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor: fn([Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL], PREPROCESSOR_ARGS) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor_args: PREPROCESSOR_ARGS,\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] {\n    preprocessor(notes, preprocessor_args)\n}\n\nfn constrain_get_notes_internal<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    opt_notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> (BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>)\nwhere\n    Note: NoteInterface<N> + NullifiableNote + Eq,\n{\n    // The filter is applied first to avoid pushing note read requests for notes we're not interested in. Note that\n    // while the filter function can technically mutate the contents of the notes (as opposed to simply removing some),\n    // the private kernel will later validate that these note actually exist, so transformations would cause for that\n    // check to fail.\n    let filter_fn = options.filter;\n    let filter_args = options.filter_args;\n    let filtered_notes = filter_fn(opt_notes, filter_args);\n\n    let notes = crate::utils::array::collapse(filtered_notes);\n    let mut note_hashes: BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> =\n        BoundedVec::new();\n\n    // We have now collapsed the sparse array of Options into a BoundedVec. This is a more ergonomic type and also\n    // results in reduced gate counts when setting a limit value, since we guarantee that the limit is an upper bound\n    // for the runtime length, and can therefore have fewer loop iterations.\n    assert(notes.len() <= options.limit, \"Got more notes than limit.\");\n\n    let mut prev_fields = [0; N];\n    for i in 0..options.limit {\n        if i < notes.len() {\n            let note = notes.get_unchecked(i);\n            let fields = note.pack_content();\n            check_note_header(*context, note);\n            check_note_content(fields, options.selects);\n            if i != 0 {\n                check_notes_order(prev_fields, fields, options.sorts);\n            }\n            prev_fields = fields;\n\n            let note_hash_for_read_request = compute_note_hash_for_read_request(note, storage_slot);\n            context.push_note_hash_read_request(note_hash_for_read_request);\n            note_hashes.push(note_hash_for_read_request);\n        };\n    }\n\n    (notes, note_hashes)\n}\n\nunconstrained fn get_note_internal<Note, let N: u32>(storage_slot: Field) -> Note\nwhere\n    Note: NoteInterface<N>,\n{\n    let placeholder_note = [Option::none()];\n    let placeholder_fields = [0; GET_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n    oracle::notes::get_notes(\n        storage_slot,\n        0,\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        NoteStatus.ACTIVE,\n        placeholder_note,\n        placeholder_fields,\n        placeholder_note_length,\n    )[0]\n        .expect(f\"Failed to get a note\") // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL]\nwhere\n    Note: NoteInterface<N>,\n{\n    // This function simply performs some transformations from NoteGetterOptions into the types required by the oracle.\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) =\n        flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL];\n    let placeholder_fields = [0; GET_NOTES_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length,\n    );\n\n    apply_preprocessor(opt_notes, options.preprocessor, options.preprocessor_args)\n}\n\npub unconstrained fn view_notes<Note, let N: u32>(\n    storage_slot: Field,\n    options: NoteViewerOptions<Note, N>,\n) -> BoundedVec<Note, MAX_NOTES_PER_PAGE>\nwhere\n    Note: NoteInterface<N>,\n{\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) =\n        flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTES_PER_PAGE];\n    let placeholder_fields = [0; VIEW_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n\n    let notes_array = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length,\n    );\n\n    let mut notes = BoundedVec::new();\n    for i in 0..notes_array.len() {\n        if notes_array[i].is_some() {\n            notes.push(notes_array[i].unwrap_unchecked());\n        }\n    }\n\n    notes\n}\n\nunconstrained fn flatten_options<let N: u32>(\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>,\n) -> (u8, [u8; N], [u8; N], [u8; N], [Field; N], [u8; N], [u8; N], [u8; N], [u8; N], [u8; N]) {\n    let mut num_selects = 0;\n    let mut select_by_indexes = [0; N];\n    let mut select_by_offsets = [0; N];\n    let mut select_by_lengths = [0; N];\n    let mut select_values = [0; N];\n    let mut select_comparators = [0; N];\n\n    for i in 0..selects.len() {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by_indexes[num_selects] = select.unwrap_unchecked().property_selector.index;\n            select_by_offsets[num_selects] = select.unwrap_unchecked().property_selector.offset;\n            select_by_lengths[num_selects] = select.unwrap_unchecked().property_selector.length;\n            select_values[num_selects] = select.unwrap_unchecked().value;\n            select_comparators[num_selects] = select.unwrap_unchecked().comparator;\n            num_selects += 1;\n        };\n    }\n\n    let mut sort_by_indexes = [0; N];\n    let mut sort_by_offsets = [0; N];\n    let mut sort_by_lengths = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len() {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by_indexes[i] = sort.unwrap_unchecked().property_selector.index;\n            sort_by_offsets[i] = sort.unwrap_unchecked().property_selector.offset;\n            sort_by_lengths[i] = sort.unwrap_unchecked().property_selector.length;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    }\n\n    (\n        num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values,\n        select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order,\n    )\n}\n"
    },
    "141": {
      "path": "/Users/hka/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/aztec-nr/aztec/src/note/note_viewer_options.nr",
      "source": "use crate::note::constants::MAX_NOTES_PER_PAGE;\nuse crate::note::note_getter_options::{NoteStatus, PropertySelector, Select, Sort};\nuse crate::note::note_interface::NoteInterface;\nuse dep::protocol_types::traits::ToField;\nuse std::option::Option;\n\n// docs:start:NoteViewerOptions\npub struct NoteViewerOptions<Note, let N: u32> {\n    pub selects: BoundedVec<Option<Select>, N>,\n    pub sorts: BoundedVec<Option<Sort>, N>,\n    pub limit: u32,\n    pub offset: u32,\n    pub status: u8,\n}\n// docs:end:NoteViewerOptions\n\nimpl<Note, let N: u32> NoteViewerOptions<Note, N> {\n    pub fn new() -> NoteViewerOptions<Note, N>\n    where\n        Note: NoteInterface<N>,\n    {\n        NoteViewerOptions {\n            selects: BoundedVec::new(),\n            sorts: BoundedVec::new(),\n            limit: MAX_NOTES_PER_PAGE as u32,\n            offset: 0,\n            status: NoteStatus.ACTIVE,\n        }\n    }\n\n    // This method adds a `Select` criterion to the options.\n    // It takes a field_index indicating which field to select,\n    // a value representing the specific value to match in that field, and\n    // a comparator (For possible values of comparators, please see the Comparator enum from note_getter_options)\n    pub fn select<T>(\n        &mut self,\n        property_selector: PropertySelector,\n        comparator: u8,\n        value: T,\n    ) -> Self\n    where\n        T: ToField,\n    {\n        self.selects.push(Option::some(Select::new(property_selector, comparator, value.to_field())));\n        *self\n    }\n\n    pub fn sort(&mut self, property_selector: PropertySelector, order: u8) -> Self {\n        self.sorts.push(Option::some(Sort::new(property_selector, order)));\n        *self\n    }\n\n    pub fn set_limit(&mut self, limit: u32) -> Self {\n        assert(limit <= MAX_NOTES_PER_PAGE as u32);\n        // By requesting that the limit is a constant, we guarantee that it will be possible to loop over it, reducing\n        // gate counts when a limit has been set.\n        if !dep::std::runtime::is_unconstrained() {\n            assert_constant(limit);\n        }\n        self.limit = limit;\n        *self\n    }\n\n    pub fn set_offset(&mut self, offset: u32) -> Self {\n        self.offset = offset;\n        *self\n    }\n\n    // This method sets the status value, which determines whether to retrieve active or nullified notes.\n    pub fn set_status(&mut self, status: u8) -> Self {\n        self.status = status;\n        *self\n    }\n}\n"
    },
    "142": {
      "path": "/Users/hka/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/aztec-nr/aztec/src/note/utils.nr",
      "source": "use crate::{\n    context::PrivateContext,\n    note::{note_header::NoteHeader, note_interface::{NoteInterface, NullifiableNote}},\n    utils::array,\n};\n\nuse dep::protocol_types::hash::{\n    compute_siloed_note_hash, compute_siloed_nullifier as compute_siloed_nullifier_from_preimage,\n    compute_unique_note_hash,\n};\n\npub fn compute_siloed_nullifier<Note, let N: u32>(\n    note_with_header: Note,\n    storage_slot: Field,\n    context: &mut PrivateContext,\n) -> Field\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let header = note_with_header.get_header();\n    let note_hash_for_nullify = compute_note_hash_for_nullify(note_with_header, storage_slot);\n    let inner_nullifier = note_with_header.compute_nullifier(context, note_hash_for_nullify);\n\n    compute_siloed_nullifier_from_preimage(header.contract_address, inner_nullifier)\n}\n\n// TODO(#7775): make this not impossible to understand\npub fn compute_note_hash_for_read_request<Note, let N: u32>(\n    note: Note,\n    storage_slot: Field,\n) -> Field\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let note_hash = note.compute_note_hash(storage_slot);\n    let header = note.get_header();\n    let nonce = header.nonce;\n    let counter = header.note_hash_counter;\n\n    // If same tx note, read request always uses the normal note hash\n    if counter != 0 {\n        note_hash\n    } else {\n        // If the note comes from a different tx, we need to compute the note hash that reached the tree\n        compute_unique_note_hash(\n            nonce,\n            compute_siloed_note_hash(header.contract_address, note_hash),\n        )\n    }\n}\n\n// TODO(#7775): make this not impossible to understand\npub fn compute_note_hash_for_nullify_internal<Note, let N: u32>(\n    note: Note,\n    note_hash_for_read_request: Field,\n) -> Field\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let header = note.get_header();\n\n    if (header.note_hash_counter != 0) & (header.nonce != 0) {\n        // Non-revertible note, nullified by a revertible nullifier, we need to nullify the note hash that will reach the tree\n        let siloed_note_hash =\n            compute_siloed_note_hash(header.contract_address, note_hash_for_read_request);\n\n        compute_unique_note_hash(header.nonce, siloed_note_hash)\n    } else {\n        note_hash_for_read_request\n    }\n}\n\n// TODO(#7775): nuke this commented out code - kept it around as it contains comments which might be helpful when tackling #7775\n// pub fn compute_note_hash_for_nullify<Note, let N: u32, let M: u32>(note: Note) -> Field where Note: NoteInterface<N> {\n//     let header = note.get_header();\n//     // There are 3 cases for reading a note intended for consumption:\n//     // 1. The note was inserted in this transaction, is revertible, or is not nullified by a revertible nullifier in\n//     //    the same transaction: (note_hash_counter != 0) & (nonce == 0)\n//     // 2. The note was inserted in this transaction, is non-revertible, and is nullified by a revertible nullifier in\n//     //    the same transaction: (note_hash_counter != 0) & (nonce != 0)\n//     // 3. The note was inserted in a previous transaction: (note_hash_counter == 0) & (nonce != 0)\n\n//     let note_hash = note.compute_note_hiding_point().x;\n\n//     if header.nonce == 0 {\n//         // Case 1.\n//         // If a note is transient, we just read the note_hash (kernel will hash it with nonce and silo by contract address).\n//         note_hash\n//     } else {\n//         // Case 2: If a note is non-revertible, and is nullified by a revertible nullifier, we cannot squash them in the\n//         // private reset circuit. Because if the tx reverts, we will have to keep the note hash and throw away the\n//         // nullifier.\n//         // And if the tx does not revert, both will be emitted. In which case, the nullifier must be created in the app\n//         // from the siloed note hash.\n//         // The kernel circuit will check that a nullifier with non-zero note_nonce is linked to a note hash, whose\n//         // siloed note hash matches the note hash specified in the nullifier.\n\n//         // Case 3: If a note is not from the current transaction, that means we are reading a settled note (from\n//         // tree) created in a previous TX. So we need the siloed_note_hash which has already been hashed with\n//         // nonce and then contract address. This hash will match the existing leaf in the note hash\n//         // tree, so the kernel can just perform a membership check directly on this hash/leaf.\n//         let unique_note_hash = compute_unique_note_hash(header.nonce, note_hash);\n//         compute_siloed_note_hash(header.contract_address, unique_note_hash)\n//         // IMPORTANT NOTE ON REDUNDANT SILOING BY CONTRACT ADDRESS: The note hash computed above is\n//         // \"siloed\" by contract address. When a note hash is computed solely for the purpose of\n//         // nullification, it is not strictly necessary to silo the note hash before computing\n//         // its nullifier. In other words, it is NOT NECESSARY for protocol security that a nullifier\n//         // be computed from a siloed note hash. After all, persistable note hashes and nullifiers are\n//         // siloed by the kernel circuit. That being said, the siloed note hash computed above CAN be\n//         // used for nullifier computation, and this achieves the (arguably unnecessary) property that\n//         // nullifiers are computed from a note hash's fully-computed note hash tree leaf.\n//     }\n// }\n\npub fn compute_note_hash_for_nullify<Note, let N: u32>(note: Note, storage_slot: Field) -> Field\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note, storage_slot);\n    compute_note_hash_for_nullify_internal(note, note_hash_for_read_request)\n}\n\npub unconstrained fn compute_note_hash_and_optionally_a_nullifier<T, let N: u32, let S: u32>(\n    unpack_content: fn([Field; N]) -> T,\n    note_header: NoteHeader,\n    compute_nullifier: bool,\n    storage_slot: Field,\n    packed_note_content: [Field; S],\n) -> [Field; 4]\nwhere\n    T: NoteInterface<N> + NullifiableNote,\n{\n    let mut note = unpack_content(array::subarray(packed_note_content, 0));\n    note.set_header(note_header);\n\n    let note_hash = note.compute_note_hash(storage_slot);\n    let siloed_note_hash = compute_siloed_note_hash(note_header.contract_address, note_hash);\n    let unique_note_hash = compute_unique_note_hash(note_header.nonce, siloed_note_hash);\n\n    let inner_nullifier = if compute_nullifier {\n        note.compute_nullifier_without_context(storage_slot)\n    } else {\n        0\n    };\n    // docs:start:compute_note_hash_and_optionally_a_nullifier_returns\n    [note_hash, unique_note_hash, siloed_note_hash, inner_nullifier]\n    // docs:end:compute_note_hash_and_optionally_a_nullifier_returns\n}\n"
    },
    "145": {
      "path": "/Users/hka/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/aztec-nr/aztec/src/oracle/call_private_function.nr",
      "source": "use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress, utils::reader::Reader,\n};\n\n#[oracle(callPrivateFunction)]\nunconstrained fn call_private_function_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _start_side_effect_counter: u32,\n    _is_static_call: bool,\n) -> [Field; 2] {}\n\npub unconstrained fn call_private_function_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    start_side_effect_counter: u32,\n    is_static_call: bool,\n) -> (u32, Field) {\n    let fields = call_private_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        start_side_effect_counter,\n        is_static_call,\n    );\n\n    let mut reader = Reader::new(fields);\n    let end_side_effect_counter = reader.read_u32();\n    let returns_hash = reader.read();\n\n    (end_side_effect_counter, returns_hash)\n}\n"
    },
    "147": {
      "path": "/Users/hka/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr",
      "source": "use dep::protocol_types::{abis::function_selector::FunctionSelector, address::AztecAddress};\n\n#[oracle(enqueuePublicFunctionCall)]\nunconstrained fn enqueue_public_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n) -> Field {}\n\npub unconstrained fn enqueue_public_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) -> Field {\n    enqueue_public_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n    )\n}\n\n#[oracle(setPublicTeardownFunctionCall)]\nunconstrained fn set_public_teardown_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n) -> Field {}\n\npub unconstrained fn set_public_teardown_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) -> Field {\n    set_public_teardown_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n    )\n}\n\npub fn notify_set_min_revertible_side_effect_counter(counter: u32) {\n    /// Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    /// to call.\n    unsafe { notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter) };\n}\n\npub unconstrained fn notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter: u32) {\n    notify_set_min_revertible_side_effect_counter_oracle(counter);\n}\n\n#[oracle(notifySetMinRevertibleSideEffectCounter)]\nunconstrained fn notify_set_min_revertible_side_effect_counter_oracle(_counter: u32) {}\n"
    },
    "148": {
      "path": "/Users/hka/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/aztec-nr/aztec/src/oracle/execution.nr",
      "source": "use dep::protocol_types::address::AztecAddress;\n\n#[oracle(getContractAddress)]\nunconstrained fn get_contract_address_oracle() -> AztecAddress {}\n\n#[oracle(getBlockNumber)]\nunconstrained fn get_block_number_oracle() -> u32 {}\n\n#[oracle(getChainId)]\nunconstrained fn get_chain_id_oracle() -> Field {}\n\n#[oracle(getVersion)]\nunconstrained fn get_version_oracle() -> Field {}\n\npub unconstrained fn get_contract_address() -> AztecAddress {\n    get_contract_address_oracle()\n}\n\npub unconstrained fn get_block_number() -> u32 {\n    get_block_number_oracle()\n}\n\npub unconstrained fn get_chain_id() -> Field {\n    get_chain_id_oracle()\n}\n\npub unconstrained fn get_version() -> Field {\n    get_version_oracle()\n}\n"
    },
    "149": {
      "path": "/Users/hka/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/aztec-nr/aztec/src/oracle/execution_cache.nr",
      "source": "/// Stores values represented as slice in execution cache to be later obtained by its hash.\npub fn store(values: [Field]) {\n    /// Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    /// to call. When loading the values, however, the caller must check that the values are indeed the preimage.\n    unsafe { store_in_execution_cache_oracle_wrapper(values) };\n}\n\npub unconstrained fn store_in_execution_cache_oracle_wrapper(values: [Field]) {\n    let _ = store_in_execution_cache_oracle(values);\n}\n\npub unconstrained fn load<let N: u32>(hash: Field) -> [Field; N] {\n    load_from_execution_cache_oracle(hash)\n}\n\n#[oracle(storeInExecutionCache)]\nunconstrained fn store_in_execution_cache_oracle(_values: [Field]) -> Field {}\n\n#[oracle(loadFromExecutionCache)]\nunconstrained fn load_from_execution_cache_oracle<let N: u32>(_hash: Field) -> [Field; N] {}\n"
    },
    "150": {
      "path": "/Users/hka/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr",
      "source": "use dep::protocol_types::{\n    address::AztecAddress, constants::CONTRACT_INSTANCE_LENGTH, contract_class_id::ContractClassId,\n    contract_instance::ContractInstance,\n};\n\n// NOTE: this is for use in private only\n#[oracle(getContractInstance)]\nunconstrained fn get_contract_instance_oracle(\n    _address: AztecAddress,\n) -> [Field; CONTRACT_INSTANCE_LENGTH] {}\n\n// NOTE: this is for use in private only\nunconstrained fn get_contract_instance_internal(\n    address: AztecAddress,\n) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n    get_contract_instance_oracle(address)\n}\n\n// NOTE: this is for use in private only\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    /// Safety: The to_address function combines all values in the instance object to produce an address,\n    /// so by checking that we get the expected address we validate the entire struct.\n    let instance =\n        unsafe { ContractInstance::deserialize(get_contract_instance_internal(address)) };\n    assert_eq(instance.to_address(), address);\n\n    instance\n}\n\n// These oracles each return a ContractInstance member\n// plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstanceDeployer)]\nunconstrained fn get_contract_instance_deployer_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n#[oracle(avmOpcodeGetContractInstanceClassId)]\nunconstrained fn get_contract_instance_class_id_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n#[oracle(avmOpcodeGetContractInstanceInitializationHash)]\nunconstrained fn get_contract_instance_initialization_hash_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n\npub unconstrained fn get_contract_instance_deployer_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_deployer_oracle_avm(address)\n}\npub unconstrained fn get_contract_instance_class_id_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_class_id_oracle_avm(address)\n}\npub unconstrained fn get_contract_instance_initialization_hash_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_initialization_hash_oracle_avm(address)\n}\n\npub fn get_contract_instance_deployer_avm(address: AztecAddress) -> Option<AztecAddress> {\n    /// Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) = unsafe { get_contract_instance_deployer_internal_avm(address) };\n    if exists {\n        Option::some(AztecAddress::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_class_id_avm(address: AztecAddress) -> Option<ContractClassId> {\n    /// Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) = unsafe { get_contract_instance_class_id_internal_avm(address) };\n    if exists {\n        Option::some(ContractClassId::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_initialization_hash_avm(address: AztecAddress) -> Option<Field> {\n    /// Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) =\n        unsafe { get_contract_instance_initialization_hash_internal_avm(address) };\n    if exists {\n        Option::some(member)\n    } else {\n        Option::none()\n    }\n}\n"
    },
    "154": {
      "path": "/Users/hka/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/aztec-nr/aztec/src/oracle/get_public_data_witness.nr",
      "source": "use crate::utils::array;\nuse dep::protocol_types::{constants::PUBLIC_DATA_TREE_HEIGHT, data::PublicDataTreeLeafPreimage};\n\nglobal LEAF_PREIMAGE_LENGTH: u32 = 4;\nglobal PUBLIC_DATA_WITNESS: u32 = 45;\n\npub struct PublicDataWitness {\n    pub index: Field,\n    pub leaf_preimage: PublicDataTreeLeafPreimage,\n    pub path: [Field; PUBLIC_DATA_TREE_HEIGHT],\n}\n\n#[oracle(getPublicDataTreeWitness)]\nunconstrained fn get_public_data_witness_oracle(\n    _block_number: u32,\n    _public_data_tree_index: Field,\n) -> [Field; PUBLIC_DATA_WITNESS] {}\n\npub unconstrained fn get_public_data_witness(\n    block_number: u32,\n    public_data_tree_index: Field,\n) -> PublicDataWitness {\n    let fields = get_public_data_witness_oracle(block_number, public_data_tree_index);\n    PublicDataWitness {\n        index: fields[0],\n        leaf_preimage: PublicDataTreeLeafPreimage {\n            slot: fields[1],\n            value: fields[2],\n            next_index: fields[3] as u32,\n            next_slot: fields[4],\n        },\n        path: array::subarray(fields, 1 + LEAF_PREIMAGE_LENGTH),\n    }\n}\n"
    },
    "155": {
      "path": "/Users/hka/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/aztec-nr/aztec/src/oracle/key_validation_request.nr",
      "source": "use dep::protocol_types::abis::validation_requests::{\n    key_validation_request::KEY_VALIDATION_REQUEST_LENGTH, KeyValidationRequest,\n};\n\n#[oracle(getKeyValidationRequest)]\nunconstrained fn get_key_validation_request_oracle(\n    _pk_m_hash: Field,\n    _key_index: Field,\n) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {}\n\nunconstrained fn get_key_validation_request_internal(\n    npk_m_hash: Field,\n    key_index: Field,\n) -> KeyValidationRequest {\n    let result = get_key_validation_request_oracle(npk_m_hash, key_index);\n    KeyValidationRequest::deserialize(result)\n}\n\npub unconstrained fn get_key_validation_request(\n    pk_m_hash: Field,\n    key_index: Field,\n) -> KeyValidationRequest {\n    get_key_validation_request_internal(pk_m_hash, key_index)\n}\n"
    },
    "156": {
      "path": "/Users/hka/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/aztec-nr/aztec/src/oracle/keys.nr",
      "source": "use dep::protocol_types::{\n    address::{AztecAddress, PartialAddress},\n    point::Point,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, TpkM},\n};\n\n#[oracle(getPublicKeysAndPartialAddress)]\nunconstrained fn get_public_keys_and_partial_address_oracle(_address: AztecAddress) -> [Field; 13] {}\n\npub unconstrained fn get_public_keys_and_partial_address(\n    address: AztecAddress,\n) -> (PublicKeys, PartialAddress) {\n    let result = get_public_keys_and_partial_address_oracle(address);\n\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: result[0], y: result[1], is_infinite: result[2] as bool } },\n        ivpk_m: IvpkM {\n            inner: Point { x: result[3], y: result[4], is_infinite: result[5] as bool },\n        },\n        ovpk_m: OvpkM {\n            inner: Point { x: result[6], y: result[7], is_infinite: result[8] as bool },\n        },\n        tpk_m: TpkM {\n            inner: Point { x: result[9], y: result[10], is_infinite: result[11] as bool },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(result[12]);\n\n    (keys, partial_address)\n}\n"
    },
    "159": {
      "path": "/Users/hka/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/aztec-nr/aztec/src/oracle/note_discovery.nr",
      "source": "use crate::note::discovery::MAX_NOTE_SERIALIZED_LEN;\nuse dep::protocol_types::address::AztecAddress;\n\n/// Informs PXE of a note's existence so that it can later retrieved by the `getNotes` oracle. The note will be scoped\n/// to `contract_address`, meaning other contracts will not be able to access it unless authorized.\n///\n/// The note's `content` is what `getNotes` will later return. PXE indexes notes by `storage_slot`, so this value is\n/// typically used to filter notes that correspond to different state variables. `note_hash` and `nullifier` are the\n/// inner hashes, i.e. the raw hashes returned by `NoteInterface::compute_note_hash` and\n/// `NullifiableNote::compute_nullifier`. PXE will verify that the siloed unique note hash was inserted into the tree at\n/// `tx_hash`, and will store the nullifier to later check for nullification.\n///\n/// `recipient` is the account to which the note was sent to. Other accounts will not be able to access this note (e.g.\n/// other accounts will not be able to see one another's token balance notes, even in the same PXE) unless authorized.\n///\n/// Returns true if the note was sucessfully delivered and added to PXE's database.\npub unconstrained fn deliver_note(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    nonce: Field,\n    content: BoundedVec<Field, MAX_NOTE_SERIALIZED_LEN>,\n    note_hash: Field,\n    nullifier: Field,\n    tx_hash: Field,\n    recipient: AztecAddress,\n) -> bool {\n    deliver_note_oracle(\n        contract_address,\n        storage_slot,\n        nonce,\n        content,\n        note_hash,\n        nullifier,\n        tx_hash,\n        recipient,\n    )\n}\n\n#[oracle(deliverNote)]\nunconstrained fn deliver_note_oracle(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    nonce: Field,\n    content: BoundedVec<Field, MAX_NOTE_SERIALIZED_LEN>,\n    note_hash: Field,\n    nullifier: Field,\n    tx_hash: Field,\n    recipient: AztecAddress,\n) -> bool {}\n"
    },
    "160": {
      "path": "/Users/hka/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/aztec-nr/aztec/src/oracle/notes.nr",
      "source": "use crate::{note::{note_header::NoteHeader, note_interface::NoteInterface}, utils::array};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    indexed_tagging_secret::{INDEXED_TAGGING_SECRET_LENGTH, IndexedTaggingSecret},\n};\n\n/// Notifies the simulator that a note has been created, so that it can be returned in future read requests in the same\n/// transaction. This note should only be added to the non-volatile database if found in an actual block.\npub fn notify_created_note<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note_content: [Field; N],\n    note_hash: Field,\n    counter: u32,\n) {\n    /// Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    /// to call.\n    unsafe {\n        notify_created_note_oracle_wrapper(\n            storage_slot,\n            note_type_id,\n            packed_note_content,\n            note_hash,\n            counter,\n        )\n    };\n}\n\n/// Notifies the simulator that a note has been nullified, so that it is no longer returned in future read requests in\n/// the same transaction. This note should only be removed to the non-volatile database if its nullifier is found in an\n/// actual block.\npub fn notify_nullified_note(nullifier: Field, note_hash: Field, counter: u32) {\n    /// Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    /// to call.\n    unsafe { notify_nullified_note_oracle_wrapper(nullifier, note_hash, counter) };\n}\n\n/// Notifies the simulator that a non-note nullifier has been created, so that it can be used for note nonces.\npub fn notify_created_nullifier(nullifier: Field) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe { notify_created_nullifier_oracle_wrapper(nullifier) };\n}\n\nunconstrained fn notify_created_note_oracle_wrapper<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note_content: [Field; N],\n    note_hash: Field,\n    counter: u32,\n) {\n    let _ = notify_created_note_oracle(\n        storage_slot,\n        note_type_id,\n        packed_note_content,\n        note_hash,\n        counter,\n    );\n}\n\n#[oracle(notifyCreatedNote)]\nunconstrained fn notify_created_note_oracle<let N: u32>(\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _packed_note_content: [Field; N],\n    _note_hash: Field,\n    _counter: u32,\n) -> Field {}\n\nunconstrained fn notify_nullified_note_oracle_wrapper(\n    nullifier: Field,\n    note_hash: Field,\n    counter: u32,\n) {\n    let _ = notify_nullified_note_oracle(nullifier, note_hash, counter);\n}\n\n#[oracle(notifyNullifiedNote)]\nunconstrained fn notify_nullified_note_oracle(\n    _nullifier: Field,\n    _note_hash: Field,\n    _counter: u32,\n) -> Field {}\n\nunconstrained fn notify_created_nullifier_oracle_wrapper(nullifier: Field) {\n    let _ = notify_created_nullifier_oracle(nullifier);\n}\n\n#[oracle(notifyCreatedNullifier)]\nunconstrained fn notify_created_nullifier_oracle(_nullifier: Field) -> Field {}\n\n#[oracle(getNotes)]\nunconstrained fn get_notes_oracle<let N: u32, let S: u32>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by_indexes: [u8; N],\n    _select_by_offsets: [u8; N],\n    _select_by_lengths: [u8; N],\n    _select_values: [Field; N],\n    _select_comparators: [u8; N],\n    _sort_by_indexes: [u8; N],\n    _sort_by_offsets: [u8; N],\n    _sort_by_lengths: [u8; N],\n    _sort_order: [u8; N],\n    _limit: u32,\n    _offset: u32,\n    _status: u8,\n    _return_size: u32,\n    _placeholder_fields: [Field; S],\n) -> [Field; S] {}\n\nunconstrained fn get_notes_oracle_wrapper<let N: u32, let S: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; N],\n    select_by_offsets: [u8; N],\n    select_by_lengths: [u8; N],\n    select_values: [Field; N],\n    select_comparators: [u8; N],\n    sort_by_indexes: [u8; N],\n    sort_by_offsets: [u8; N],\n    sort_by_lengths: [u8; N],\n    sort_order: [u8; N],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_fields: [Field; S],\n) -> [Field; S] {\n    let return_size = placeholder_fields.len() as u32;\n    get_notes_oracle(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        return_size,\n        placeholder_fields,\n    )\n}\n\npub unconstrained fn get_notes<Note, let N: u32, let M: u32, let S: u32, let NS: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; M],\n    select_by_offsets: [u8; M],\n    select_by_lengths: [u8; M],\n    select_values: [Field; M],\n    select_comparators: [u8; M],\n    sort_by_indexes: [u8; M],\n    sort_by_offsets: [u8; M],\n    sort_by_lengths: [u8; M],\n    sort_order: [u8; M],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_opt_notes: [Option<Note>; S], // TODO: Remove it and use `limit` to initialize the note array.\n    placeholder_fields: [Field; NS], // TODO: Remove it and use `limit` to initialize the note array.\n    _placeholder_note_length: [Field; N], // Turbofish hack? Compiler breaks calculating read_offset unless we add this parameter\n) -> [Option<Note>; S]\nwhere\n    Note: NoteInterface<N>,\n{\n    sync_notes_oracle_wrapper();\n    let fields = get_notes_oracle_wrapper(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        placeholder_fields,\n    );\n    let num_notes = fields[0] as u32;\n    let contract_address = AztecAddress::from_field(fields[1]);\n    for i in 0..placeholder_opt_notes.len() {\n        if i < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: u32 = 2; // num_notes & contract_address.\n            let extra_preimage_length: u32 = 2; // nonce & note_hash_counter.\n            let read_offset: u32 = return_header_length + i * (N + extra_preimage_length);\n\n            let nonce = fields[read_offset];\n            let note_hash_counter = fields[read_offset + 1] as u32;\n            let note_content = array::subarray(fields, read_offset + 2);\n\n            let mut note = Note::unpack_content(note_content);\n            note.set_header(NoteHeader { contract_address, nonce, note_hash_counter });\n\n            placeholder_opt_notes[i] = Option::some(note);\n        };\n    }\n    placeholder_opt_notes\n}\n\n/// Returns true if the nullifier exists. Note that a `true` value can be constrained by proving existence of the\n/// nullifier, but a `false` value should not be relied upon since other transactions may emit this nullifier before the\n/// current transaction is included in a block. While this might seem of little use at first, certain design patterns\n/// benefit from this abstraction (see e.g. `PrivateMutable`).\npub unconstrained fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier) == 1\n}\n\n#[oracle(checkNullifierExists)]\nunconstrained fn check_nullifier_exists_oracle(_inner_nullifier: Field) -> Field {}\n\n/// Same as `get_indexed_tagging_secret_as_sender`, except it returns the derived tag, ready to be included in a log.\npub unconstrained fn get_app_tag_as_sender(sender: AztecAddress, recipient: AztecAddress) -> Field {\n    get_indexed_tagging_secret_as_sender(sender, recipient).compute_tag(recipient)\n}\n\n/// Returns the tagging secret for a given sender and recipient pair, siloed for the current contract address.\n/// Includes the last known index used to send a note tagged with this secret.\n/// For this to work, PXE must know the ivsk_m of the sender.\n/// For the recipient's side, only the address is needed.\npub unconstrained fn get_indexed_tagging_secret_as_sender(\n    sender: AztecAddress,\n    recipient: AztecAddress,\n) -> IndexedTaggingSecret {\n    let result = get_indexed_tagging_secret_as_sender_oracle(sender, recipient);\n    IndexedTaggingSecret::deserialize(result)\n}\n\n#[oracle(getIndexedTaggingSecretAsSender)]\nunconstrained fn get_indexed_tagging_secret_as_sender_oracle(\n    _sender: AztecAddress,\n    _recipient: AztecAddress,\n) -> [Field; INDEXED_TAGGING_SECRET_LENGTH] {}\n\n/// Notifies the simulator that a tag has been used in a note, and to therefore increment the associated index so that\n/// future notes get a different tag and can be discovered by the recipient.\n/// This change should only be persisted in a non-volatile database if the tagged log is found in an actual block -\n/// otherwise e.g. a reverting transaction can cause the sender to accidentally skip indices and later produce notes\n/// that are not found by the recipient.\npub fn increment_app_tagging_secret_index_as_sender(sender: AztecAddress, recipient: AztecAddress) {\n    /// Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    /// to call.\n    unsafe {\n        increment_app_tagging_secret_index_as_sender_wrapper(sender, recipient);\n    }\n}\n\nunconstrained fn increment_app_tagging_secret_index_as_sender_wrapper(\n    sender: AztecAddress,\n    recipient: AztecAddress,\n) {\n    increment_app_tagging_secret_index_as_sender_oracle(sender, recipient);\n}\n\n#[oracle(incrementAppTaggingSecretIndexAsSender)]\nunconstrained fn increment_app_tagging_secret_index_as_sender_oracle(\n    _sender: AztecAddress,\n    _recipient: AztecAddress,\n) {}\n\n/// Finds new notes that may have been sent to all registered accounts in PXE in the current contract and makes them available\n/// for later querying via the `get_notes` oracle.\npub fn sync_notes() {\n    /// Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    /// to call.\n    unsafe {\n        sync_notes_oracle_wrapper();\n    }\n}\n\nunconstrained fn sync_notes_oracle_wrapper() {\n    sync_notes_oracle();\n}\n\n#[oracle(syncNotes)]\nunconstrained fn sync_notes_oracle() {}\n"
    },
    "161": {
      "path": "/Users/hka/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/aztec-nr/aztec/src/oracle/random.nr",
      "source": "/// Returns an unconstrained random value. Note that it is not possible to constrain this value to prove that it is\n/// truly random: we assume that the oracle is cooperating and returning random values.\n/// In some applications this behavior might not be acceptable and other techniques might be more suitable, such as\n/// producing pseudo-random values by hashing values outside of user control (like block hashes) or secrets.\npub unconstrained fn random() -> Field {\n    rand_oracle()\n}\n\n#[oracle(getRandomField)]\nunconstrained fn rand_oracle() -> Field {}\n"
    },
    "162": {
      "path": "/Users/hka/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/aztec-nr/aztec/src/oracle/storage.nr",
      "source": "use dep::protocol_types::{address::AztecAddress, traits::Packable};\n\n#[oracle(storageRead)]\nunconstrained fn storage_read_oracle<let N: u32>(\n    address: Field,\n    storage_slot: Field,\n    block_number: Field,\n    length: Field,\n) -> [Field; N] {}\n\npub unconstrained fn raw_storage_read<let N: u32>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32,\n) -> [Field; N] {\n    storage_read_oracle(\n        address.to_field(),\n        storage_slot,\n        block_number as Field,\n        N as Field,\n    )\n}\n\npub unconstrained fn storage_read<T, let N: u32>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32,\n) -> T\nwhere\n    T: Packable<N>,\n{\n    T::unpack(raw_storage_read(address, storage_slot, block_number))\n}\n\nmod tests {\n    use crate::oracle::storage::{raw_storage_read, storage_read};\n    use dep::protocol_types::{address::AztecAddress, traits::{FromField, Packable}};\n\n    use crate::test::mocks::mock_struct::MockStruct;\n    use std::test::OracleMock;\n\n    global address: AztecAddress = AztecAddress::from_field(29);\n    global slot: Field = 7;\n    global block_number: u32 = 17;\n\n    #[test]\n    unconstrained fn test_raw_storage_read() {\n        let written = MockStruct { a: 13, b: 42 };\n\n        let _ = OracleMock::mock(\"storageRead\").returns(written.pack());\n\n        let read: [Field; 2] = raw_storage_read(address, slot, block_number);\n        assert_eq(read[0], 13);\n        assert_eq(read[1], 42);\n    }\n\n    #[test]\n    unconstrained fn test_storage_read() {\n        let written = MockStruct { a: 13, b: 42 };\n\n        let _ = OracleMock::mock(\"storageRead\").returns(written.pack());\n\n        let read: MockStruct = storage_read(address, slot, block_number);\n        assert_eq(read.a, 13);\n        assert_eq(read.b, 42);\n    }\n}\n"
    },
    "164": {
      "path": "/Users/hka/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/aztec-nr/aztec/src/state_vars/map.nr",
      "source": "use crate::state_vars::storage::Storage;\nuse dep::protocol_types::{storage::map::derive_storage_slot_in_map, traits::{Packable, ToField}};\n\n// docs:start:map\npub struct Map<K, V, Context> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T, Context, let N: u32> Storage<N> for Map<K, T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<K, V, Context> Map<K, V, Context> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V\n    where\n        K: ToField,\n    {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = derive_storage_slot_in_map(self.storage_slot, key);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n"
    },
    "169": {
      "path": "/Users/hka/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/aztec-nr/aztec/src/state_vars/private_set.nr",
      "source": "use crate::context::{PrivateContext, PublicContext, UnconstrainedContext};\nuse crate::note::{\n    constants::MAX_NOTES_PER_PAGE,\n    lifecycle::{create_note, create_note_hash_from_public, destroy_note_unsafe},\n    note_emission::NoteEmission,\n    note_getter::{get_notes, view_notes},\n    note_getter_options::NoteGetterOptions,\n    note_interface::{NoteInterface, NullifiableNote},\n    note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_request,\n};\nuse crate::state_vars::storage::Storage;\nuse dep::protocol_types::{\n    abis::read_request::ReadRequest, constants::MAX_NOTE_HASH_READ_REQUESTS_PER_CALL,\n    traits::Packable,\n};\n\n// docs:start:struct\npub struct PrivateSet<Note, Context> {\n    pub context: Context,\n    pub storage_slot: Field,\n}\n// docs:end:struct\n\nimpl<T, Context, let N: u32> Storage<N> for PrivateSet<T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<Note, Context> PrivateSet<Note, Context> {\n    // docs:start:new\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PrivateSet { context, storage_slot }\n    }\n    // docs:end:new\n}\n\nimpl<Note, let N: u32> PrivateSet<Note, &mut PublicContext>\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    // TODO: This function is still around because of a stale blacklist token. It should most likely be nuked. If you\n    // need this functionality use partial notes instead.\n    // docs:start:insert_from_public\n    pub fn insert_from_public(self, note: &mut Note) {\n        create_note_hash_from_public(self.context, self.storage_slot, note);\n    }\n    // docs:end:insert_from_public\n}\n\nimpl<Note, let N: u32> PrivateSet<Note, &mut PrivateContext>\nwhere\n    Note: NoteInterface<N> + NullifiableNote + Eq,\n{\n    // docs:start:insert\n    pub fn insert(self, note: &mut Note) -> NoteEmission<Note> {\n        create_note(self.context, self.storage_slot, note)\n    }\n    // docs:end:insert\n\n    pub fn pop_notes<PREPROCESSOR_ARGS, FILTER_ARGS>(\n        self,\n        options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> {\n        let (notes, note_hashes) = get_notes(self.context, self.storage_slot, options);\n        // We iterate in a range 0..options.limit instead of 0..notes.len() because options.limit is known at compile\n        // time and hence will result in less constraints when set to a lower value than\n        // MAX_NOTE_HASH_READ_REQUESTS_PER_CALL.\n        for i in 0..options.limit {\n            if i < notes.len() {\n                let note = notes.get_unchecked(i);\n                let note_hash = note_hashes.get_unchecked(i);\n                // We immediately destroy the note without doing any of the read request checks `remove` typically\n                // performs because we know that the `get_notes` call has already placed those constraints.\n                destroy_note_unsafe(self.context, note, note_hash);\n            }\n        }\n\n        notes\n    }\n\n    /// Note that if you obtained the note via `get_notes` it's much better to use `pop_notes` as `pop_notes` results\n    /// in significantly less constrains due to avoiding an extra hash and read request check.\n    pub fn remove(self, note: Note) {\n        let note_hash = compute_note_hash_for_read_request(note, self.storage_slot);\n        let has_been_read =\n            self.context.note_hash_read_requests.any(|r: ReadRequest| r.value == note_hash);\n        assert(has_been_read, \"Can only remove a note that has been read from the set.\");\n\n        destroy_note_unsafe(self.context, note, note_hash);\n    }\n\n    /// Note that if you later on remove the note it's much better to use `pop_notes` as `pop_notes` results\n    /// in significantly less constrains due to avoiding 1 read request check.\n    pub fn get_notes<PREPROCESSOR_ARGS, FILTER_ARGS>(\n        self,\n        options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> {\n        get_notes(self.context, self.storage_slot, options).0\n    }\n}\n\nimpl<Note, let N: u32> PrivateSet<Note, UnconstrainedContext>\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    // docs:start:view_notes\n    pub unconstrained fn view_notes(\n        self,\n        options: NoteViewerOptions<Note, N>,\n    ) -> BoundedVec<Note, MAX_NOTES_PER_PAGE> {\n        view_notes(self.storage_slot, options)\n    }\n    // docs:end:view_notes\n}\n"
    },
    "17": {
      "path": "std/embedded_curve_ops.nr",
      "source": "use crate::cmp::Eq;\nuse crate::ops::arith::{Add, Neg, Sub};\n\n/// A point on the embedded elliptic curve\n/// By definition, the base field of the embedded curve is the scalar field of the proof system curve, i.e the Noir Field.\n/// x and y denotes the Weierstrass coordinates of the point, if is_infinite is false.\npub struct EmbeddedCurvePoint {\n    pub x: Field,\n    pub y: Field,\n    pub is_infinite: bool,\n}\n\nimpl EmbeddedCurvePoint {\n    /// Elliptic curve point doubling operation\n    /// returns the doubled point of a point P, i.e P+P\n    pub fn double(self) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, self)\n    }\n\n    /// Returns the null element of the curve; 'the point at infinity'\n    pub fn point_at_infinity() -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    }\n}\n\nimpl Add for EmbeddedCurvePoint {\n    /// Adds two points P+Q, using the curve addition formula, and also handles point at infinity\n    fn add(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, other)\n    }\n}\n\nimpl Sub for EmbeddedCurvePoint {\n    /// Points subtraction operation, using addition and negation\n    fn sub(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        self + other.neg()\n    }\n}\n\nimpl Neg for EmbeddedCurvePoint {\n    /// Negates a point P, i.e returns -P, by negating the y coordinate.\n    /// If the point is at infinity, then the result is also at infinity.\n    fn neg(self) -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: self.x, y: -self.y, is_infinite: self.is_infinite }\n    }\n}\n\nimpl Eq for EmbeddedCurvePoint {\n    /// Checks whether two points are equal\n    fn eq(self: Self, b: EmbeddedCurvePoint) -> bool {\n        (self.is_infinite & b.is_infinite)\n            | ((self.is_infinite == b.is_infinite) & (self.x == b.x) & (self.y == b.y))\n    }\n}\n\n/// Scalar for the embedded curve represented as low and high limbs\n/// By definition, the scalar field of the embedded curve is base field of the proving system curve.\n/// It may not fit into a Field element, so it is represented with two Field elements; its low and high limbs.\npub struct EmbeddedCurveScalar {\n    pub lo: Field,\n    pub hi: Field,\n}\n\nimpl EmbeddedCurveScalar {\n    pub fn new(lo: Field, hi: Field) -> Self {\n        EmbeddedCurveScalar { lo, hi }\n    }\n\n    #[field(bn254)]\n    pub fn from_field(scalar: Field) -> EmbeddedCurveScalar {\n        let (a, b) = crate::field::bn254::decompose(scalar);\n        EmbeddedCurveScalar { lo: a, hi: b }\n    }\n\n    //Bytes to scalar: take the first (after the specified offset) 16 bytes of the input as the lo value, and the next 16 bytes as the hi value\n    #[field(bn254)]\n    pub(crate) fn from_bytes(bytes: [u8; 64], offset: u32) -> EmbeddedCurveScalar {\n        let mut v = 1;\n        let mut lo = 0 as Field;\n        let mut hi = 0 as Field;\n        for i in 0..16 {\n            lo = lo + (bytes[offset + 31 - i] as Field) * v;\n            hi = hi + (bytes[offset + 15 - i] as Field) * v;\n            v = v * 256;\n        }\n        let sig_s = crate::embedded_curve_ops::EmbeddedCurveScalar { lo, hi };\n        sig_s\n    }\n}\n\nimpl Eq for EmbeddedCurveScalar {\n    fn eq(self, other: Self) -> bool {\n        (other.hi == self.hi) & (other.lo == self.lo)\n    }\n}\n\n// Computes a multi scalar multiplication over the embedded curve.\n// For bn254, We have Grumpkin and Baby JubJub.\n// For bls12-381, we have JubJub and Bandersnatch.\n//\n// The embedded curve being used is decided by the\n// underlying proof system.\n// docs:start:multi_scalar_mul\npub fn multi_scalar_mul<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> EmbeddedCurvePoint\n// docs:end:multi_scalar_mul\n{\n    let point_array = multi_scalar_mul_array_return(points, scalars);\n    EmbeddedCurvePoint { x: point_array[0], y: point_array[1], is_infinite: point_array[2] as bool }\n}\n\n#[foreign(multi_scalar_mul)]\npub(crate) fn multi_scalar_mul_array_return<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> [Field; 3] {}\n\n// docs:start:fixed_base_scalar_mul\npub fn fixed_base_scalar_mul(scalar: EmbeddedCurveScalar) -> EmbeddedCurvePoint\n// docs:end:fixed_base_scalar_mul\n{\n    let g1 = EmbeddedCurvePoint {\n        x: 1,\n        y: 17631683881184975370165255887551781615748388533673675138860,\n        is_infinite: false,\n    };\n    multi_scalar_mul([g1], [scalar])\n}\n\n/// This function only assumes that the points are on the curve\n/// It handles corner cases around the infinity point causing some overhead compared to embedded_curve_add_not_nul and embedded_curve_add_unsafe\n// This is a hack because returning an `EmbeddedCurvePoint` from a foreign function in brillig returns a [BrilligVariable::SingleAddr; 2] rather than BrilligVariable::BrilligArray\n// as is defined in the brillig bytecode format. This is a workaround which allows us to fix this without modifying the serialization format.\n// docs:start:embedded_curve_add\npub fn embedded_curve_add(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    // docs:end:embedded_curve_add\n    let x_coordinates_match = point1.x == point2.x;\n    let y_coordinates_match = point1.y == point2.y;\n    let double_predicate = (x_coordinates_match & y_coordinates_match);\n    let infinity_predicate = (x_coordinates_match & !y_coordinates_match);\n    let point1_1 = EmbeddedCurvePoint {\n        x: point1.x + (x_coordinates_match as Field),\n        y: point1.y,\n        is_infinite: x_coordinates_match,\n    };\n    // point1_1 is guaranteed to have a different abscissa than point2\n    let mut result = embedded_curve_add_unsafe(point1_1, point2);\n    result.is_infinite = x_coordinates_match;\n\n    // dbl if x_match, y_match\n    let double = embedded_curve_add_unsafe(point1, point1);\n    result = if double_predicate { double } else { result };\n\n    // infinity if x_match, !y_match\n    if point1.is_infinite {\n        result = point2;\n    }\n    if point2.is_infinite {\n        result = point1;\n    }\n    let mut result_is_infinity = infinity_predicate & (!point1.is_infinite & !point2.is_infinite);\n    result.is_infinite = result_is_infinity | (point1.is_infinite & point2.is_infinite);\n    result\n}\n\n#[foreign(embedded_curve_add)]\nfn embedded_curve_add_array_return(\n    _point1: EmbeddedCurvePoint,\n    _point2: EmbeddedCurvePoint,\n) -> [Field; 3] {}\n\n/// This function assumes that:\n/// The points are on the curve, and\n/// The points don't share an x-coordinate, and\n/// Neither point is the infinity point.\n/// If it is used with correct input, the function ensures the correct non-zero result is returned.\n/// Except for points on the curve, the other assumptions are checked by the function. It will cause assertion failure if they are not respected.\npub fn embedded_curve_add_not_nul(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    assert(point1.x != point2.x);\n    assert(!point1.is_infinite);\n    assert(!point2.is_infinite);\n    embedded_curve_add_unsafe(point1, point2)\n}\n\n/// Unsafe ec addition\n/// If the inputs are the same, it will perform a doubling, but only if point1 and point2 are the same variable.\n/// If they have the same value but are different variables, the result will be incorrect because in this case\n/// it assumes (but does not check) that the points' x-coordinates are not equal.\n/// It also assumes neither point is the infinity point.\npub fn embedded_curve_add_unsafe(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    let point_array = embedded_curve_add_array_return(point1, point2);\n    let x = point_array[0];\n    let y = point_array[1];\n\n    EmbeddedCurvePoint { x, y, is_infinite: false }\n}\n"
    },
    "171": {
      "path": "/Users/hka/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/aztec-nr/aztec/src/state_vars/public_immutable.nr",
      "source": "use crate::{\n    context::{PrivateContext, PublicContext, UnconstrainedContext},\n    state_vars::storage::Storage,\n    utils::with_hash::WithHash,\n};\nuse dep::protocol_types::{constants::INITIALIZATION_SLOT_SEPARATOR, traits::Packable};\n\n/// Stores an immutable value in public state which can be read from public, private and unconstrained execution\n/// contexts.\n///\n/// Leverages `WithHash<T>` to enable efficient private reads of public storage. `WithHash` wrapper allows for\n/// efficient reads by verifying large values through a single hash check and then proving inclusion only of the hash\n/// in the public storage. This reduces the number of required tree inclusion proofs from O(M) to O(1).\n///\n/// This is valuable when T packs to multiple fields, as it maintains \"almost constant\" verification overhead\n/// regardless of the original data size.\n///\n/// # Optimizing private reads in your contract\n/// Given that reading T from public immutable in private has \"almost constant\" constraints cost for different sizes\n/// of T it is recommended to group multiple values into a single struct when they are being read together. This can\n/// typically be some kind of configuration set up during contract initialization. E.g.:\n///\n/// ```noir\n/// use dep::aztec::protocol_types::{address::AztecAddress, traits::Packable};\n/// use std::meta::derive;\n///\n/// #[derive(Eq, Packable)]\n/// pub struct Config \\{\n///     pub address_1: AztecAddress,\n///     pub value_1: U128,\n///     pub value_2: u64,\n///     ...\n/// }\n/// ```\n///\n// docs:start:public_immutable_struct\npub struct PublicImmutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_immutable_struct\n\n/// `WithHash<T>` stores both the packed value (using N fields) and its hash (1 field), requiring N = M + 1 total\n/// fields.\nimpl<T, Context, let M: u32, let N: u32> Storage<N> for PublicImmutable<T, Context>\nwhere\n    WithHash<T, M>: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<T, Context> PublicImmutable<T, Context> {\n    // docs:start:public_immutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicImmutable { context, storage_slot }\n    }\n    // docs:end:public_immutable_struct_new\n}\n\nimpl<T, let T_PACKED_LEN: u32> PublicImmutable<T, &mut PublicContext>\nwhere\n    T: Packable<T_PACKED_LEN> + Eq,\n{\n    // docs:start:public_immutable_struct_write\n    pub fn initialize(self, value: T) {\n        // We check that the struct is not yet initialized by checking if the initialization slot is 0\n        let initialization_slot = INITIALIZATION_SLOT_SEPARATOR + self.storage_slot;\n        let init_field: Field = self.context.storage_read(initialization_slot);\n        assert(init_field == 0, \"PublicImmutable already initialized\");\n\n        // We populate the initialization slot with a non-zero value to indicate that the struct is initialized\n        self.context.storage_write(initialization_slot, 0xdead);\n        self.context.storage_write(self.storage_slot, WithHash::new(value));\n    }\n    // docs:end:public_immutable_struct_write\n\n    // Note that we don't access the context, but we do call oracles that are only available in public\n    // docs:start:public_immutable_struct_read\n    pub fn read(self) -> T {\n        WithHash::public_storage_read(*self.context, self.storage_slot)\n    }\n    // docs:end:public_immutable_struct_read\n}\n\nimpl<T, let T_PACKED_LEN: u32> PublicImmutable<T, UnconstrainedContext>\nwhere\n    T: Packable<T_PACKED_LEN> + Eq,\n{\n    pub unconstrained fn read(self) -> T {\n        WithHash::unconstrained_public_storage_read(self.context, self.storage_slot)\n    }\n}\n\nimpl<T, let T_PACKED_LEN: u32> PublicImmutable<T, &mut PrivateContext>\nwhere\n    T: Packable<T_PACKED_LEN> + Eq,\n{\n    pub fn read(self) -> T {\n        WithHash::historical_public_storage_read(\n            self.context.get_block_header(),\n            self.context.this_address(),\n            self.storage_slot,\n        )\n    }\n}\n"
    },
    "172": {
      "path": "/Users/hka/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/aztec-nr/aztec/src/state_vars/public_mutable.nr",
      "source": "use crate::context::{PublicContext, UnconstrainedContext};\nuse crate::state_vars::storage::Storage;\nuse dep::protocol_types::traits::Packable;\n\n// docs:start:public_mutable_struct\npub struct PublicMutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_mutable_struct\n\nimpl<T, Context, let N: u32> Storage<N> for PublicMutable<T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<T, Context> PublicMutable<T, Context> {\n    // docs:start:public_mutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicMutable { context, storage_slot }\n    }\n    // docs:end:public_mutable_struct_new\n}\n\nimpl<T, let T_PACKED_LEN: u32> PublicMutable<T, &mut PublicContext>\nwhere\n    T: Packable<T_PACKED_LEN>,\n{\n    // docs:start:public_mutable_struct_read\n    pub fn read(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n    // docs:end:public_mutable_struct_read\n\n    // docs:start:public_mutable_struct_write\n    pub fn write(self, value: T) {\n        self.context.storage_write(self.storage_slot, value);\n    }\n    // docs:end:public_mutable_struct_write\n}\n\nimpl<T, let T_PACKED_LEN: u32> PublicMutable<T, UnconstrainedContext>\nwhere\n    T: Packable<T_PACKED_LEN>,\n{\n    pub unconstrained fn read(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n"
    },
    "18": {
      "path": "std/field/bn254.nr",
      "source": "use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\nglobal TWO_POW_64: Field = 0x10000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(mut x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 64 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low_lower_64 = (x as u64) as Field;\n    x = (x - low_lower_64) / TWO_POW_64;\n    let low_upper_64 = (x as u64) as Field;\n\n    let high = (x - low_upper_64) / TWO_POW_64;\n    let low = low_upper_64 * TWO_POW_64 + low_lower_64;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    /// Safety: borrow is enforced to be boolean due to its type.\n    /// if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n    /// if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        /// Safety: decomposition is properly checked below\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            /// Safety: already unconstrained\n            unsafe { field_less_than(b, a) },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        /// Safety: unsafe in unconstrained\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        /// Safety: Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n"
    },
    "19": {
      "path": "std/field/mod.nr",
      "source": "pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        /// Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n"
    },
    "191": {
      "path": "/Users/hka/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/aztec-nr/aztec/src/utils/array/collapse.nr",
      "source": "/// Collapses an array of `Option`s with sparse `Some` values into a `BoundedVec`, essentially unwrapping the `Option`s\n/// and removing the `None` values.\n///\n/// For example, given:\n///   `input: [some(3), none(), some(1)]`\n/// this returns\n///   `collapsed: [3, 1]`\npub fn collapse<T, let N: u32>(input: [Option<T>; N]) -> BoundedVec<T, N>\nwhere\n    T: Eq,\n{\n    // Computing the collapsed BoundedVec would result in a very large number of constraints, since we'd need to loop\n    // over the input array and conditionally write to a dynamic vec index, which is a very unfriendly pattern to the\n    // proving backend.\n    // Instead, we use an unconstrained function to produce the final collapsed array, along with some hints, and then\n    // verify that the input and collapsed arrays are equivalent.\n\n    /// Safety: The hints are verified by the `verify_collapse_hints` function.\n    let (collapsed, collapsed_to_input_index_mapping) = unsafe { get_collapse_hints(input) };\n    verify_collapse_hints(input, collapsed, collapsed_to_input_index_mapping);\n    collapsed\n}\n\nfn verify_collapse_hints<T, let N: u32>(\n    input: [Option<T>; N],\n    collapsed: BoundedVec<T, N>,\n    collapsed_to_input_index_mapping: BoundedVec<u32, N>,\n)\nwhere\n    T: Eq,\n{\n    // collapsed should be a BoundedVec with all the non-none elements in input, in the same order. We need to lay down\n    // multiple constraints to guarantee this.\n    // First we check that the number of elements is correct\n    let mut count = 0;\n    for i in 0..N {\n        if input[i].is_some() {\n            count += 1;\n        }\n    }\n    assert_eq(count, collapsed.len(), \"Wrong collapsed vec length\");\n\n    // Then we check that all elements exist in the original array, and are in the same order. To do this we use the\n    // auxiliary collapsed_to_input_index_mapping array, which at index n contains the index in the input array that\n    // corresponds to the collapsed entry at index n.\n    // Example:\n    //  - input: [some(3), none(), some(1)]\n    //  - collapsed: [3, 1]\n    //  - collapsed_to_input_index_mapping: [0, 2]\n    // These two arrays should therefore have the same length.\n    assert_eq(\n        collapsed.len(),\n        collapsed_to_input_index_mapping.len(),\n        \"Collapse hint vec length mismatch\",\n    );\n\n    // We now look at each collapsed entry and check that there is a valid equal entry in the input array.\n    let mut last_index = Option::none();\n    for i in 0..N {\n        if i < collapsed.len() {\n            let input_index = collapsed_to_input_index_mapping.get_unchecked(i);\n            assert(input_index < N, \"Out of bounds index hint\");\n\n            assert_eq(\n                collapsed.get_unchecked(i),\n                input[input_index].unwrap(),\n                \"Wrong collapsed vec content\",\n            );\n\n            // By requiring increasing input indices, we both guarantee that we're not looking at the same input\n            // element more than once, and that we're going over them in the original order.\n            if last_index.is_some() {\n                assert(input_index > last_index.unwrap_unchecked(), \"Wrong collapsed vec order\");\n            }\n            last_index = Option::some(input_index);\n        } else {\n            // BoundedVec assumes that the unused parts of the storage are zeroed out (e.g. in the Eq impl), so we make\n            // sure that this property holds.\n            assert_eq(\n                collapsed.get_unchecked(i),\n                std::mem::zeroed(),\n                \"Dirty collapsed vec storage\",\n            );\n        }\n    }\n    // We now know that:\n    //  - all values in the collapsed array exist in the input array\n    //  - the order of the collapsed values is the same as in the input array\n    //  - no input value is present more than once in the collapsed array\n    //  - the number of elements in the collapsed array is the same as in the input array.\n    // Therefore, the collapsed array is correct.\n}\n\nunconstrained fn get_collapse_hints<T, let N: u32>(\n    input: [Option<T>; N],\n) -> (BoundedVec<T, N>, BoundedVec<u32, N>) {\n    let mut collapsed: BoundedVec<T, N> = BoundedVec::new();\n    let mut collapsed_to_input_index_mapping: BoundedVec<u32, N> = BoundedVec::new();\n\n    for i in 0..N {\n        if input[i].is_some() {\n            collapsed.push(input[i].unwrap_unchecked());\n            collapsed_to_input_index_mapping.push(i);\n        }\n    }\n\n    (collapsed, collapsed_to_input_index_mapping)\n}\n\nmod test {\n    use super::{collapse, verify_collapse_hints};\n\n    #[test]\n    unconstrained fn collapse_empty_array() {\n        let original: [Option<Field>; 2] = [Option::none(), Option::none()];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn collapse_non_sparse_array() {\n        let original = [Option::some(7), Option::some(3), Option::none()];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 2);\n        assert_eq(collapsed.get(0), 7);\n        assert_eq(collapsed.get(1), 3);\n    }\n\n    #[test]\n    unconstrained fn collapse_sparse_array() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 2);\n        assert_eq(collapsed.get(0), 7);\n        assert_eq(collapsed.get(1), 3);\n    }\n\n    #[test]\n    unconstrained fn collapse_front_padding() {\n        let original =\n            [Option::none(), Option::none(), Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 2);\n        assert_eq(collapsed.get(0), 7);\n        assert_eq(collapsed.get(1), 3);\n    }\n\n    #[test]\n    unconstrained fn collapse_back_padding() {\n        let original =\n            [Option::some(7), Option::none(), Option::some(3), Option::none(), Option::none()];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 2);\n        assert_eq(collapsed.get(0), 7);\n        assert_eq(collapsed.get(1), 3);\n    }\n\n    #[test]\n    unconstrained fn verify_collapse_hints_good_hints() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 3]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 2]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Wrong collapsed vec length\")]\n    unconstrained fn verify_collapse_hints_wrong_length() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Collapse hint vec length mismatch\")]\n    unconstrained fn verify_collapse_hints_hint_length_mismatch() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 3]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Out of bounds index hint\")]\n    unconstrained fn verify_collapse_hints_out_of_bounds_index_hint() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 3]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 5]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn verify_collapse_hints_hint_to_none() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 0]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 1]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Wrong collapsed vec content\")]\n    unconstrained fn verify_collapse_hints_wrong_vec_content() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 42]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 2]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Wrong collapsed vec order\")]\n    unconstrained fn verify_collapse_hints_wrong_vec_order() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([3, 7]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([2, 0]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Dirty collapsed vec storage\")]\n    unconstrained fn verify_collapse_hints_dirty_storage() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n\n        let mut collapsed: BoundedVec<u32, 3> = BoundedVec::from_array([7, 3]);\n        // We have to use the unchecked setter as we're knowingly writing past the length, breaking its invariants.\n        collapsed.set_unchecked(2, 1);\n\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 2]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n}\n"
    },
    "193": {
      "path": "/Users/hka/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/aztec-nr/aztec/src/utils/array/subarray.nr",
      "source": "/// Returns `DST_LEN` elements from a source array, starting at `offset`. `DST_LEN` must not be larger than the number\n/// of elements past `offset`.\n///\n/// Examples:\n/// ```\n/// let foo: [Field; 2] = subarray([1, 2, 3, 4, 5], 2);\n/// assert_eq(foo, [3, 4]);\n///\n/// let bar: [Field; 5] = subarray([1, 2, 3, 4, 5], 2); // fails - we can't return 5 elements since only 3 remain\n/// ```\npub fn subarray<T, let SRC_LEN: u32, let DST_LEN: u32>(\n    src: [T; SRC_LEN],\n    offset: u32,\n) -> [T; DST_LEN] {\n    assert(offset + DST_LEN <= SRC_LEN, \"DST_LEN too large for offset\");\n\n    let mut dst: [T; DST_LEN] = std::mem::zeroed();\n    for i in 0..DST_LEN {\n        dst[i] = src[i + offset];\n    }\n\n    dst\n}\n\nmod test {\n    use super::subarray;\n\n    #[test]\n    unconstrained fn subarray_into_empty() {\n        // In all of these cases we're setting DST_LEN to be 0, so we always get back an emtpy array.\n        assert_eq(subarray::<Field, _, _>([], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 2), []);\n    }\n\n    #[test]\n    unconstrained fn subarray_complete() {\n        assert_eq(subarray::<Field, _, _>([], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 0), [1, 2, 3, 4, 5]);\n    }\n\n    #[test]\n    unconstrained fn subarray_different_end_sizes() {\n        // We implicitly select how many values to read in the size of the return array\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3, 4, 5]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3, 4]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2]);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subarray_offset_too_large() {\n        // With an offset of 1 we can only request up to 4 elements\n        let _: [_; 5] = subarray([1, 2, 3, 4, 5], 1);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subarray_bad_return_value() {\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [3, 3, 4, 5]);\n    }\n}\n"
    },
    "194": {
      "path": "/Users/hka/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/aztec-nr/aztec/src/utils/array/subbvec.nr",
      "source": "use crate::utils::array;\n\n/// Returns `DST_MAX_LEN` elements from a source BoundedVec, starting at `offset`. `offset` must not be larger than the\n/// original length, and `DST_LEN` must not be larger than the total number of elements past `offset` (including the\n/// zeroed elements past `len()`).\n///\n/// Only elements at the beginning of the vector can be removed: it is not possible to also remove elements at the end\n/// of the vector by passing a value for `DST_LEN` that is smaller than `len() - offset`.\n///\n/// Examples:\n/// ```\n/// let foo = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n/// assert_eq(subbvec(foo, 2), BoundedVec::<_, 8>::from_array([3, 4, 5]));\n///\n/// let bar: BoundedVec<_, 1> = subbvec(foo, 2); // fails - we can't return just 1 element since 3 remain\n/// let baz: BoundedVec<_, 10> = subbvec(foo, 3); // fails - we can't return 10 elements since only 7 remain\n/// ```\npub fn subbvec<T, let SRC_MAX_LEN: u32, let DST_MAX_LEN: u32>(\n    vec: BoundedVec<T, SRC_MAX_LEN>,\n    offset: u32,\n) -> BoundedVec<T, DST_MAX_LEN> {\n    // from_parts_unchecked does not verify that the elements past len are zeroed, but that is not an issue in our case\n    // because we're constructing the new storage array as a subarray of the original one (which should have zeroed\n    // storage past len), guaranteeing correctness. This is because `subarray` does not allow extending arrays past\n    // their original length.\n    BoundedVec::from_parts_unchecked(array::subarray(vec.storage(), offset), vec.len() - offset)\n}\n\nmod test {\n    use super::subbvec;\n\n    #[test]\n    unconstrained fn subbvec_empty() {\n        let bvec = BoundedVec::<Field, 0>::from_array([]);\n        assert_eq(subbvec(bvec, 0), bvec);\n    }\n\n    #[test]\n    unconstrained fn subbvec_complete() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 0), bvec);\n\n        let smaller_capacity = BoundedVec::<_, 5>::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 0), smaller_capacity);\n    }\n\n    #[test]\n    unconstrained fn subbvec_partial() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        assert_eq(subbvec(bvec, 2), BoundedVec::<_, 8>::from_array([3, 4, 5]));\n        assert_eq(subbvec(bvec, 2), BoundedVec::<_, 3>::from_array([3, 4, 5]));\n    }\n\n    #[test]\n    unconstrained fn subbvec_into_empty() {\n        let bvec: BoundedVec<_, 10> = BoundedVec::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 5), BoundedVec::<_, 5>::from_array([]));\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subbvec_offset_past_len() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n        let _: BoundedVec<_, 1> = subbvec(bvec, 6);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subbvec_insufficient_dst_len() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // We're not providing enough space to hold all of the items inside the original BoundedVec. subbvec can cause\n        // for the capacity to reduce, but not the length (other than by len - offset).\n        let _: BoundedVec<_, 1> = subbvec(bvec, 2);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subbvec_dst_len_causes_enlarge() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // subbvec does not supprt capacity increases\n        let _: BoundedVec<_, 11> = subbvec(bvec, 0);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subbvec_dst_len_too_large_for_offset() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // This effectively requests a capacity increase, since there'd be just one element plus the 5 empty slots,\n        // which is less than 7.\n        let _: BoundedVec<_, 7> = subbvec(bvec, 4);\n    }\n}\n"
    },
    "195": {
      "path": "/Users/hka/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/aztec-nr/aztec/src/utils/bytes.nr",
      "source": "use crate::oracle::random::random;\n\n/// Converts the input bytes into an array of fields. A Field is ~254 bits meaning that each field can store 31 whole bytes.\n///\n/// The input bytes are chunked into chunks of 31 bytes. Each 31-byte chunk is viewed as big-endian, and is converted into a Field. If the last chunk\n/// is less than 31 bytes long, then only the relevant bytes are considered.\n/// For example, [1, 10, 3] is encoded as [1 * 256^2 + 10 * 256 + 3]\n/// Note: ceil(N / 31) = (N + 30) / 31\npub fn be_bytes_31_to_fields<let N: u32>(bytes: [u8; N]) -> [Field; (N + 30) / 31] {\n    let mut fields = [0; (N + 30) / 31];\n\n    // There are N / 31 whole fields that can be populated.\n    for i in 0..N / 31 {\n        let mut field = 0;\n        for j in 0..31 {\n            // Shift the existing value left by 8 bits and add the new byte\n            field = field * 256 + bytes[i * 31 + j] as Field;\n        }\n        fields[i] = field;\n    }\n\n    // Note: if 31 divides N, then this loop does not execute.\n    // ceil(N/31) - floor(N/31) = 1, unless 31 divides N, in which case it's 0.\n    for _ in 0..((N + 30) / 31) - (N / 31) {\n        let mut final_field = 0;\n        let final_field_idx = fields.len() - 1;\n        let final_offset = final_field_idx * 31;\n        // N - ((N / 31) * 31) = N - floor(N/31) * 31 = the number of bytes to go in the final field.\n        for j in 0..N - ((N / 31) * 31) {\n            // Shift the existing value left by 8 bits and add the new byte\n            final_field = final_field * 256 + bytes[final_offset + j] as Field;\n        }\n\n        fields[final_field_idx] = final_field;\n    }\n\n    fields\n}\n\npub fn le_bytes_31_to_fields<let N: u32>(bytes: [u8; N]) -> [Field; (N + 30) / 31] {\n    let mut fields = [0; (N + 30) / 31];\n\n    // There are N / 31 whole fields that can be populated.\n    for i in 0..N / 31 {\n        let mut field = 0;\n        for j in 0..31 {\n            let k = 31 - j - 1; // iterate in reverse.\n            // Shift the existing value left by 8 bits and add the new byte\n            field = field * 256 + bytes[i * 31 + k] as Field;\n        }\n        fields[i] = field;\n    }\n\n    // Note: if 31 divides N, then this loop does not execute.\n    // ceil(N/31) - floor(N/31) = 1, unless 31 divides N, in which case it's 0.\n    for _ in 0..((N + 30) / 31) - (N / 31) {\n        let mut final_field = 0;\n        let final_field_idx = fields.len() - 1;\n        let final_offset = final_field_idx * 31;\n        // N - ((N / 31) * 31) = N - floor(N/31) * 31 = the number of bytes to go in the final field.\n        for j in 0..N - ((N / 31) * 31) {\n            let k = (N - ((N / 31) * 31)) - j - 1; // iterate in reverse.\n            // Shift the existing value left by 8 bits and add the new byte\n            final_field = final_field * 256 + bytes[final_offset + k] as Field;\n        }\n        fields[final_field_idx] = final_field;\n    }\n\n    fields\n}\n\n/// Converts an input array of fields into a single array of bytes.\n/// Each input field must contain only 31 bytes (this is constrained to be so).\n/// Each field is converted into 31 big-endian bytes, and the resulting 31-byte\n/// chunks are concatenated back together in the order of the original fields.\n///\n/// It appears that the original author of this function wants to give the caller some control\n/// over the number of bytes that are returned: the final field can be mapped to fewer than 31 bytes,\n/// based on the caller's choice of M.\n/// Given the input is N fields, and each field (except the last) is mapped to 31 bytes,\n/// we definitely need M > (N - 1) * 31 to cover those first (N - 1) fields. Hence the static assertion.\n/// TODO: this is the same as the \"le\" version of this function, save for the `field.to_be_bytes()` calls. I tried passing the conversion function in as a parameter, to reduce code duplication, but couldn't get it to work.\npub fn fields_to_be_bytes_31<let N: u32, let M: u32>(fields: [Field; N]) -> [u8; M] {\n    let mut bytes = [0; M];\n\n    std::static_assert(M > (N - 1) * 31, \"Not enough output bytes specified\");\n    // We make this assertion to keep the logic simpler:\n    std::static_assert(N * 31 >= M, \"Too many output bytes specified.\");\n\n    for i in 0..N - 1 {\n        let field = fields[i];\n\n        // We expect that the field contains at most 31 bytes of information.\n        field.assert_max_bit_size::<248>();\n\n        // Now we can safely convert the field to 31 bytes.\n        let field_as_bytes: [u8; 31] = field.to_be_bytes();\n\n        for j in 0..31 {\n            bytes[i * 31 + j] = field_as_bytes[j];\n        }\n    }\n\n    let final_field = fields[N - 1];\n    final_field.assert_max_bit_size::<8 * (M - ((N - 1) * 31))>();\n\n    let final_field_as_bytes: [u8; M - ((N - 1) * 31)] = final_field.to_be_bytes();\n\n    let start_index = (N - 1) * 31;\n    for j in 0..M - ((N - 1) * 31) {\n        bytes[start_index + j] = final_field_as_bytes[j];\n    }\n\n    bytes\n}\n\n/// Converts an input array of fields into a single array of bytes.\n/// Each input field must contain only 31 bytes (this is constrained to be so).\n/// Each field is converted into 31 little-endian bytes, and the resulting 31-byte\n/// chunks are concatenated back together in the order of the original fields. You'll\n/// end up with quite a strange ordering of bytes if you use this particular function.\npub fn fields_to_le_bytes_31<let N: u32, let M: u32>(fields: [Field; N]) -> [u8; M] {\n    let mut bytes = [0; M];\n\n    std::static_assert(M > (N - 1) * 31, \"Not enough output bytes specified\");\n    // We make this assertion to keep the logic simpler:\n    std::static_assert(N * 31 >= M, \"Too many output bytes specified.\");\n\n    for i in 0..N - 1 {\n        let field = fields[i];\n\n        // We expect that the field contains at most 31 bytes of information.\n        field.assert_max_bit_size::<248>();\n\n        // Now we can safely convert the field to 31 bytes.\n        let field_as_bytes: [u8; 31] = field.to_le_bytes();\n\n        for j in 0..31 {\n            bytes[i * 31 + j] = field_as_bytes[j];\n        }\n    }\n\n    let final_field = fields[N - 1];\n    final_field.assert_max_bit_size::<8 * (M - ((N - 1) * 31))>();\n\n    let final_field_as_bytes: [u8; M - ((N - 1) * 31)] = final_field.to_le_bytes();\n\n    let start_index = (N - 1) * 31;\n    for j in 0..M - ((N - 1) * 31) {\n        bytes[start_index + j] = final_field_as_bytes[j];\n    }\n\n    bytes\n}\n\n/// Converts an input array of fields into a single array of bytes.\n/// Each field is converted to a 32-byte big-endian array.\n/// Since a field is ~254 bits, you'll end up with a subtle 2-bit \"gap\" at the big end,\n/// every 32 bytes. Be careful that such a gap doesn't leak information!\npub fn fields_to_be_bytes_32<let N: u32>(fields: [Field; N]) -> [u8; 32 * N] {\n    let mut bytes = [0; 32 * N];\n\n    for i in 0..N {\n        let field = fields[i];\n        let field_as_bytes: [u8; 32] = field.to_be_bytes();\n\n        for j in 0..32 {\n            bytes[i * 32 + j] = field_as_bytes[j];\n        }\n    }\n\n    bytes\n}\n\nunconstrained fn byte_to_bits(byte: u8) -> [u1; 8] {\n    let mut mut_byte = byte;\n    let mut bits: [u1; 8] = [0; 8];\n    for i in 0..8 {\n        bits[i] = (mut_byte & 1) as u1;\n        mut_byte >>= 1;\n    }\n    bits\n}\n\n/// Returns as many random bytes as specified through N.\npub unconstrained fn get_random_bytes<let N: u32>() -> [u8; N] {\n    let mut bytes = [0; N];\n    let mut idx = 32;\n    let mut randomness = [0; 32];\n    for i in 0..N {\n        if idx == 32 {\n            randomness = random().to_be_bytes();\n            idx = 1; // Skip the first byte as it's always 0.\n        }\n        bytes[i] = randomness[idx];\n        idx += 1;\n    }\n    bytes\n}\n\n/// Returns as many random bits as specified through N.\nunconstrained fn get_random_bits<let N: u32>() -> [u1; N] {\n    // Note: (N + 7) / 8 = ceil(N / 8)\n    let bytes = get_random_bytes::<(N + 7) / 8>();\n    let mut bits: [u1; N] = [0; N];\n    for i in 0..bytes.len() - 1 {\n        let mut byte = bytes[i];\n        for j in 0..8 {\n            let bit_idx = i * 8 + j;\n            bits[bit_idx] = (byte & 1) as u1;\n            byte >>= 1;\n        }\n    }\n\n    // N - ((N / 8) * 8) = N - floor(N/8) * 8 = the number of bits remaining.\n    let byte_idx = bytes.len() - 1;\n    let mut byte = bytes[byte_idx];\n    for j in 0..N - ((N / 8) * 8) {\n        let bit_idx = (byte_idx) * 8 + j;\n        bits[bit_idx] = (byte & 1) as u1;\n        byte >>= 1;\n    }\n\n    bits\n}\n\n/// Returns random bits, in chunks, according to the provided numeric generics.\nunconstrained fn get_chunks_of_random_bits<let NUM_CHUNKS: u32, let NUM_BITS: u32>() -> [[u1; NUM_BITS]; NUM_CHUNKS] {\n    let random_bits = get_random_bits::<NUM_CHUNKS * NUM_BITS>();\n    let mut chunks: [[u1; NUM_BITS]; NUM_CHUNKS] = [[0; NUM_BITS]; NUM_CHUNKS];\n    for i in 0..NUM_CHUNKS {\n        let mut chunk: [u1; NUM_BITS] = [0; NUM_BITS];\n        for j in 0..NUM_BITS {\n            chunk[j] = random_bits[i * NUM_BITS + j];\n        }\n        chunks[i] = chunk;\n    }\n    chunks\n}\n\n/**\n * Helper fn for be/le_bytes_to_padded_fields() fns.\n */\nfn pad_31_byte_fields_with_random_bits<let N: u32>(input: [Field; N]) -> [Field; N] {\n    /// Safety: we can't constrain whether or not the returned bits are actually random;\n    /// we can only rely on it being in the caller's best interest.\n    let chunks_of_random_bits = unsafe { get_chunks_of_random_bits::<((N + 30) / 31), 6>() };\n    let mut fields = input;\n    // We push the random bits to the \"big end\" of each field\n    let TWO_POW_248 = 0x100000000000000000000000000000000000000000000000000000000000000;\n    for i in 0..fields.len() {\n        let mut shift = TWO_POW_248;\n        for j in 0..5 {\n            fields[i] += shift * chunks_of_random_bits[i][j] as Field;\n            shift *= 2;\n        }\n\n        // This might overflow the field modulus, so we need to be careful.\n        // By this point, shift = 2 ^ 253, so will populate the 254th bit (counting from 1)\n        let field_with_254th_bit = fields[i] + shift * chunks_of_random_bits[i][6 - 1] as Field;\n\n        // Expensive comparison (one for each field), but it's important -- if we want to hide that we were\n        // working with bytes -- that we include the 254th random bit when it fits.\n        fields[i] = if (fields[i].lt(field_with_254th_bit)) {\n            field_with_254th_bit\n        } else {\n            fields[i]\n        };\n    }\n    fields\n}\n\n/**\n * The above functions be_bytes_31_to_fields and le_bytes_31_to_fields have a privacy-leakage problem:\n * they result in fields which are all 248-bits instead of 254-bits.\n * That means if the above functions are used to convert a ciphertext from bytes to\n * fields, it leaks (with very high probability) to all observers of the log that the\n * ciphertext was created with a \"bit twiddly\" encryption scheme like AES.\n * This reduces privacy sets for all apps.\n *\n * This function seeks to \"pad\" those remaining 6 bits with randomness, so that all\n * encrypted logs look even more similar (full fields of 254-bits of random-looking\n * information). Of course, this adds some extra constraints, unfortunately.\n */\npub fn le_bytes_to_padded_fields<let N: u32>(input: [u8; N]) -> [Field; (N + 30) / 31] {\n    let mut fields = le_bytes_31_to_fields(input);\n    pad_31_byte_fields_with_random_bits(fields)\n}\n\npub fn be_bytes_to_padded_fields<let N: u32>(input: [u8; N]) -> [Field; (N + 30) / 31] {\n    let mut fields = be_bytes_31_to_fields(input);\n    pad_31_byte_fields_with_random_bits(fields)\n}\n\nmod test {\n    use crate::utils::bytes::{\n        be_bytes_31_to_fields, fields_to_be_bytes_31, fields_to_le_bytes_31, le_bytes_31_to_fields,\n    };\n\n    // BE BYTES\n\n    #[test]\n    fn test_be_bytes_31_to_1_field() {\n        let input = [\n            1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n            25, 26, 27, 28, 29, 30, 31,\n        ];\n        let output = be_bytes_31_to_fields(input);\n\n        assert_eq(output[0], 0x0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f);\n    }\n\n    #[test]\n    fn test_1_field_to_be_bytes_31() {\n        let input = [0x0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f];\n        let output: [u8; 31] = fields_to_be_bytes_31(input);\n\n        assert_eq(\n            output,\n            [\n                1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,\n                24, 25, 26, 27, 28, 29, 30, 31,\n            ],\n        );\n    }\n\n    #[test]\n    fn test_3_small_fields_to_be_bytes_31() {\n        let input = [1, 2, 3];\n        let output: [u8; 93] = fields_to_be_bytes_31(input);\n\n        // Each field should occupy 31 bytes with the non-zero value being placed in the last one.\n        assert_eq(\n            output,\n            [\n                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n                0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n                0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n                0, 0, 0, 0, 0, 0, 0, 0, 3,\n            ],\n        );\n    }\n\n    #[test]\n    fn test_3_small_fields_to_fewer_be_bytes() {\n        let input = [1, 2, 3];\n        let output: [u8; 63] = fields_to_be_bytes_31(input);\n        println(f\"output: {output}\");\n\n        // First 2 fields should occupy 31 bytes with the non-zero value being placed in the last one while the last\n        // field should occupy 1 byte. There is not information destruction here because the last field fits into\n        // 1 byte.\n        assert_eq(\n            output,\n            [\n                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n                0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n                0, 0, 0, 0, 0, 2, 3,\n            ],\n        );\n    }\n\n    #[test]\n    fn test_be_bytes_31_to_2_fields() {\n        let input = [\n            1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n            25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46,\n            47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\n        ];\n        let output = be_bytes_31_to_fields(input);\n\n        assert_eq(output[0], 0x0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f);\n        assert_eq(output[1], 0x202122232425262728292a2b2c2d2e2f303132333435363738393a3b);\n    }\n\n    #[test]\n    fn test_2_fields_to_be_bytes_31() {\n        let input = [\n            0x0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f,\n            0x202122232425262728292a2b2c2d2e2f303132333435363738393a3b,\n        ];\n        let output: [u8; 62] = fields_to_be_bytes_31(input);\n\n        assert_eq(\n            output,\n            [\n                1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,\n                24, 25, 26, 27, 28, 29, 30, 31, 0, 0, 0, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42,\n                43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\n            ],\n        );\n    }\n\n    #[test]\n    fn test_large_random_be_bytes_31_input_to_fields_and_back(input: [u8; 128]) {\n        let output = be_bytes_31_to_fields(input);\n        let input_back: [u8; 128] = fields_to_be_bytes_31(output);\n\n        assert_eq(input, input_back);\n    }\n\n    // I need to get an array of random values lower than 2^248 on input and since there is no u248 type and modulo\n    // operation is not supported on a Field (to do field % 2^248), I will take multiple smaller values and combine\n    // them to get a value lower than 2^248.\n    #[test]\n    fn test_large_random_input_to_be_bytes_31_and_back(\n        input1: [u64; 5],\n        input2: [u64; 5],\n        input3: [u64; 5],\n        input4: [u32; 5],\n        input5: [u16; 5],\n        input6: [u8; 5],\n    ) {\n        let mut input = [0; 5];\n        for i in 0..5 {\n            input[i] = (input1[i] as Field * 2.pow_32(184))\n                + (input2[i] as Field * 2.pow_32(120))\n                + (input3[i] as Field * 2.pow_32(56))\n                + (input4[i] as Field * 2.pow_32(24))\n                + (input5[i] as Field * 2.pow_32(8))\n                + input6[i] as Field;\n        }\n\n        let output: [u8; 155] = fields_to_be_bytes_31(input);\n        let input_back = be_bytes_31_to_fields(output);\n\n        assert_eq(input, input_back);\n    }\n\n    #[test(should_fail_with = \"call to assert_max_bit_size\")]\n    fn test_too_few_destination_be_bytes() {\n        // We should get an error here because first field gets converted to 31 bytes and the second field needs\n        // at least 2 bytes but we provide it with 1.\n        let input = [1, 256];\n        let _ignored_result: [u8; 32] = fields_to_be_bytes_31(input);\n    }\n\n    #[test(should_fail_with = \"call to assert_max_bit_size\")]\n    fn test_fields_to_be_bytes_31_value_too_large() {\n        let input = [2.pow_32(248)]; // this number is 1 bit larger than 31 bytes.\n        let _ignored_result: [u8; 31] = fields_to_be_bytes_31(input);\n    }\n\n    #[test]\n    fn test_fields_to_be_bytes_31_max_value() {\n        let input = [2.pow_32(248) - 1];\n        let result: [u8; 31] = fields_to_be_bytes_31(input);\n\n        // We check that all the bytes were set to max value (255)\n        for i in 0..31 {\n            assert_eq(result[i], 255);\n        }\n    }\n\n    // LE BYTES\n\n    #[test]\n    fn test_le_bytes_31_to_1_field() {\n        let input = [\n            31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10,\n            9, 8, 7, 6, 5, 4, 3, 2, 1,\n        ];\n        let output = le_bytes_31_to_fields(input);\n\n        assert_eq(output[0], 0x0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f);\n    }\n\n    #[test]\n    fn test_1_field_to_le_bytes_31() {\n        let input = [0x0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f];\n        let output: [u8; 31] = fields_to_le_bytes_31(input);\n\n        assert_eq(\n            output,\n            [\n                31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11,\n                10, 9, 8, 7, 6, 5, 4, 3, 2, 1,\n            ],\n        );\n    }\n\n    #[test]\n    fn test_3_small_fields_to_le_bytes_31() {\n        let input = [1, 2, 3];\n        let output: [u8; 93] = fields_to_le_bytes_31(input);\n\n        // Each field should occupy 31 bytes with the non-zero value being placed in the last one.\n        assert_eq(\n            output,\n            [\n                1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n                0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n                0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n                0, 0, 0, 0, 0, 0, 0, 0, 0,\n            ],\n        );\n    }\n\n    #[test]\n    fn test_3_small_fields_to_fewer_le_bytes() {\n        let input = [1, 2, 3];\n        let output: [u8; 63] = fields_to_le_bytes_31(input);\n\n        // First 2 fields should occupy 31 bytes with the non-zero value being placed in the last one while the last\n        // field should occupy 1 byte. There is not information destruction here because the last field fits into\n        // 1 byte.\n        assert_eq(\n            output,\n            [\n                1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n                0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n                0, 0, 0, 0, 0, 0, 3,\n            ],\n        );\n    }\n\n    #[test]\n    fn test_le_bytes_31_to_2_fields() {\n        let input = [\n            59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38,\n            37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16,\n            15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1,\n        ];\n        let output = le_bytes_31_to_fields(input);\n\n        assert_eq(output[0], 0x1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b);\n        assert_eq(output[1], 0x0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c);\n    }\n\n    #[test]\n    fn test_2_fields_to_le_bytes_31() {\n        let input = [\n            0x0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f,\n            0x202122232425262728292a2b2c2d2e2f303132333435363738393a3b,\n        ];\n        let output: [u8; 62] = fields_to_le_bytes_31(input);\n\n        assert_eq(\n            output,\n            [\n                31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11,\n                10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47,\n                46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 0, 0, 0,\n            ],\n        );\n    }\n\n    #[test]\n    fn test_large_random_le_bytes_input_to_fields_and_back(input: [u8; 128]) {\n        let output = le_bytes_31_to_fields(input);\n        let input_back: [u8; 128] = fields_to_le_bytes_31(output);\n\n        assert_eq(input, input_back);\n    }\n\n    // I need to get an array of random values lower than 2^248 on input and since there is no u248 type and modulo\n    // operation is not supported on a Field (to do field % 2^248), I will take multiple smaller values and combine\n    // them to get a value lower than 2^248.\n    #[test]\n    fn test_large_random_input_to_le_bytes_and_back(\n        input1: [u64; 5],\n        input2: [u64; 5],\n        input3: [u64; 5],\n        input4: [u32; 5],\n        input5: [u16; 5],\n        input6: [u8; 5],\n    ) {\n        let mut input = [0; 5];\n        for i in 0..5 {\n            input[i] = (input1[i] as Field * 2.pow_32(184))\n                + (input2[i] as Field * 2.pow_32(120))\n                + (input3[i] as Field * 2.pow_32(56))\n                + (input4[i] as Field * 2.pow_32(24))\n                + (input5[i] as Field * 2.pow_32(8))\n                + input6[i] as Field;\n        }\n\n        let output: [u8; 155] = fields_to_le_bytes_31(input);\n        let input_back = le_bytes_31_to_fields(output);\n\n        assert_eq(input, input_back);\n    }\n\n    #[test(should_fail_with = \"call to assert_max_bit_size\")]\n    fn test_too_few_destination_le_bytes() {\n        // We should get an error here because first field gets converted to 31 bytes and the second field needs\n        // at least 2 bytes but we provide it with 1.\n        let input = [1, 256];\n        let _ignored_result: [u8; 32] = fields_to_le_bytes_31(input);\n    }\n\n    #[test(should_fail_with = \"call to assert_max_bit_size\")]\n    fn test_fields_to_le_bytes_31_value_too_large() {\n        let input = [2.pow_32(248)];\n        let _ignored_result: [u8; 31] = fields_to_le_bytes_31(input);\n    }\n\n    #[test]\n    fn test_fields_to_le_bytes_31_max_value() {\n        let input = [2.pow_32(248) - 1];\n        let result: [u8; 31] = fields_to_le_bytes_31(input);\n\n        // We check that all the bytes were set to max value (255)\n        for i in 0..31 {\n            assert_eq(result[i], 255);\n        }\n    }\n}\n"
    },
    "196": {
      "path": "/Users/hka/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/aztec-nr/aztec/src/utils/comparison.nr",
      "source": "struct ComparatorEnum {\n    pub EQ: u8,\n    pub NEQ: u8,\n    pub LT: u8,\n    pub LTE: u8,\n    pub GT: u8,\n    pub GTE: u8,\n}\n\npub global Comparator: ComparatorEnum =\n    ComparatorEnum { EQ: 1, NEQ: 2, LT: 3, LTE: 4, GT: 5, GTE: 6 };\n\npub fn compare(lhs: Field, operation: u8, rhs: Field) -> bool {\n    // Values are computed ahead of time because circuits evaluate all branches\n    let is_equal = lhs == rhs;\n    let is_lt = lhs.lt(rhs);\n\n    if (operation == Comparator.EQ) {\n        is_equal\n    } else if (operation == Comparator.NEQ) {\n        !is_equal\n    } else if (operation == Comparator.LT) {\n        is_lt\n    } else if (operation == Comparator.LTE) {\n        is_lt | is_equal\n    } else if (operation == Comparator.GT) {\n        !is_lt & !is_equal\n    } else if (operation == Comparator.GTE) {\n        !is_lt\n    } else {\n        panic(f\"Invalid operation\")\n    }\n}\n\nmod test {\n    use super::Comparator;\n    use super::compare;\n\n    #[test]\n    unconstrained fn test_compare() {\n        let lhs = 10;\n        let rhs = 10;\n        assert(compare(lhs, Comparator.EQ, rhs), \"Expected lhs to be equal to rhs\");\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(compare(lhs, Comparator.NEQ, rhs), \"Expected lhs to be not equal to rhs\");\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(compare(lhs, Comparator.LT, rhs), \"Expected lhs to be less than rhs\");\n\n        let lhs = 10;\n        let rhs = 10;\n        assert(compare(lhs, Comparator.LTE, rhs), \"Expected lhs to be less than or equal to rhs\");\n\n        let lhs = 11;\n        let rhs = 10;\n        assert(compare(lhs, Comparator.GT, rhs), \"Expected lhs to be greater than rhs\");\n\n        let lhs = 10;\n        let rhs = 10;\n        assert(\n            compare(lhs, Comparator.GTE, rhs),\n            \"Expected lhs to be greater than or equal to rhs\",\n        );\n\n        let lhs = 11;\n        let rhs = 10;\n        assert(\n            compare(lhs, Comparator.GTE, rhs),\n            \"Expected lhs to be greater than or equal to rhs\",\n        );\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(!compare(lhs, Comparator.EQ, rhs), \"Expected lhs to be not equal to rhs\");\n\n        let lhs = 10;\n        let rhs = 10;\n        assert(!compare(lhs, Comparator.NEQ, rhs), \"Expected lhs to not be not equal to rhs\");\n\n        let lhs = 11;\n        let rhs = 10;\n        assert(!compare(lhs, Comparator.LT, rhs), \"Expected lhs to not be less than rhs\");\n\n        let lhs = 11;\n        let rhs = 10;\n        assert(\n            !compare(lhs, Comparator.LTE, rhs),\n            \"Expected lhs to not be less than or equal to rhs\",\n        );\n\n        let lhs = 10;\n        let rhs = 10;\n        assert(!compare(lhs, Comparator.GT, rhs), \"Expected lhs to not be greater than rhs\");\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(\n            !compare(lhs, Comparator.GTE, rhs),\n            \"Expected lhs to not be greater than or equal to rhs\",\n        );\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(\n            !compare(lhs, Comparator.GTE, rhs),\n            \"Expected lhs to not be greater than or equal to rhs\",\n        );\n    }\n}\n"
    },
    "199": {
      "path": "/Users/hka/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/aztec-nr/aztec/src/utils/point.nr",
      "source": "use crate::utils::field::sqrt;\nuse dep::protocol_types::point::Point;\n\n// I am storing the modulus minus 1 divided by 2 here because full modulus would throw \"String literal too large\" error\n// Full modulus is 21888242871839275222246405745257275088548364400416034343698204186575808495617\nglobal BN254_FR_MODULUS_DIV_2: Field =\n    10944121435919637611123202872628637544274182200208017171849102093287904247808;\n\n/// Converts a point to a byte array.\n///\n/// We don't serialize the point at infinity flag because this function is used in situations where we do not want\n/// to waste the extra byte (encrypted log).\npub fn point_to_bytes(p: Point) -> [u8; 32] {\n    // Note that there is 1 more free bit in the 32 bytes (254 bits currently occupied by the x coordinate, 1 bit for\n    // the \"sign\") so it's possible to use that last bit as an \"is_infinite\" flag if desired in the future.\n    assert(!p.is_infinite, \"Cannot serialize point at infinity as bytes.\");\n\n    let mut result: [u8; 32] = p.x.to_be_bytes();\n\n    if get_sign_of_point(p) {\n        // y is <= (modulus - 1) / 2 so we set the sign bit to 1\n        // Here we leverage that field fits into 254 bits (log2(Fr.MODULUS) < 254) and given that we serialize Fr to 32\n        // bytes and we use big-endian the 2 most significant bits are never populated. Hence we can use one of\n        // the bits as a sign bit.\n        result[0] += 128;\n    }\n\n    result\n}\n\n/**\n * Returns: true if p.y <= MOD_DIV_2, else false.\n */\npub fn get_sign_of_point(p: Point) -> bool {\n    // We store only a \"sign\" of the y coordinate because the rest can be derived from the x coordinate. To get\n    // the sign we check if the y coordinate is less or equal than the curve's order minus 1 divided by 2.\n    // Ideally we'd do `y <= MOD_DIV_2`, but there's no `lte` function, so instead we do `!(y > MOD_DIV_2)`, which is\n    // equivalent, and then rewrite that as `!(MOD_DIV_2 < y)`, since we also have no `gt` function.\n    !BN254_FR_MODULUS_DIV_2.lt(p.y)\n}\n\npub fn point_from_x_coord(x: Field) -> Point {\n    // y ^ 2 = x ^ 3 - 17\n    let rhs = x * x * x - 17;\n    let y = sqrt(rhs).unwrap();\n    Point { x, y, is_infinite: false }\n}\n\nmod test {\n    use crate::utils::point::point_to_bytes;\n    use dep::protocol_types::point::Point;\n\n    #[test]\n    unconstrained fn test_point_to_bytes_positive_sign() {\n        let p = Point {\n            x: 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73,\n            y: 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_positive_sign = [\n            154, 244, 31, 93, 233, 100, 70, 220, 55, 118, 161, 235, 45, 152, 187, 149, 107, 122,\n            205, 153, 121, 166, 120, 84, 190, 198, 250, 124, 41, 115, 189, 115,\n        ];\n        assert_eq(expected_compressed_point_positive_sign, compressed_point);\n    }\n\n    #[test]\n    unconstrained fn test_point_to_bytes_negative_sign() {\n        let p = Point {\n            x: 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5,\n            y: 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_negative_sign = [\n            36, 115, 113, 101, 46, 85, 221, 116, 201, 175, 141, 190, 159, 180, 73, 49, 186, 41, 169,\n            34, 153, 148, 56, 75, 215, 7, 119, 150, 193, 78, 226, 181,\n        ];\n\n        assert_eq(expected_compressed_point_negative_sign, compressed_point);\n    }\n}\n"
    },
    "202": {
      "path": "/Users/hka/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/aztec-nr/aztec/src/utils/with_hash.nr",
      "source": "use crate::{\n    context::{PublicContext, UnconstrainedContext},\n    history::public_storage::PublicStorageHistoricalRead,\n    oracle,\n};\nuse dep::protocol_types::{\n    address::AztecAddress, block_header::BlockHeader, hash::poseidon2_hash, traits::Packable,\n};\n\n/// A struct that allows for efficient reading of value `T` from public storage in private.\n///\n/// The efficient reads are achieved by verifying large values through a single hash check\n/// and then proving inclusion only of the hash in public storage. This reduces the number\n/// of required tree inclusion proofs from `N` to 1.\n///\n/// # Type Parameters\n/// - `T`: The underlying type being wrapped, must implement `Packable<N>`\n/// - `N`: The number of field elements required to pack values of type `T`\npub struct WithHash<T, let N: u32> {\n    value: T,\n    packed: [Field; N],\n    hash: Field,\n}\n\nimpl<T, let N: u32> WithHash<T, N>\nwhere\n    T: Packable<N> + Eq,\n{\n    pub fn new(value: T) -> Self {\n        let packed = value.pack();\n        Self { value, packed, hash: poseidon2_hash(packed) }\n    }\n\n    pub fn get_value(self) -> T {\n        self.value\n    }\n\n    pub fn get_hash(self) -> Field {\n        self.hash\n    }\n\n    pub fn public_storage_read(context: PublicContext, storage_slot: Field) -> T {\n        context.storage_read(storage_slot)\n    }\n\n    pub unconstrained fn unconstrained_public_storage_read(\n        context: UnconstrainedContext,\n        storage_slot: Field,\n    ) -> T {\n        context.storage_read(storage_slot)\n    }\n\n    pub fn historical_public_storage_read(\n        header: BlockHeader,\n        address: AztecAddress,\n        storage_slot: Field,\n    ) -> T {\n        let historical_block_number = header.global_variables.block_number as u32;\n\n        // We could simply produce historical inclusion proofs for each field in `packed`, but that would require one\n        // full sibling path per storage slot (since due to kernel siloing the storage is not contiguous). Instead, we\n        // get an oracle to provide us the values, and instead we prove inclusion of their hash, which is both a much\n        // smaller proof (a single slot), and also independent of the size of T (except in that we need to pack and hash T).\n        let hint = WithHash::new(\n            /// Safety: We verify that a hash of the hint/packed data matches the stored hash.\n            unsafe {\n                oracle::storage::storage_read(address, storage_slot, historical_block_number)\n            },\n        );\n\n        let hash = header.public_storage_historical_read(storage_slot + N as Field, address);\n\n        if hash != 0 {\n            assert_eq(hash, hint.get_hash(), \"Hint values do not match hash\");\n        } else {\n            // The hash slot can only hold a zero if it is uninitialized. Therefore, the hints must then be zero\n            // (i.e. the default value for public storage) as well.\n            assert_eq(\n                hint.get_value(),\n                T::unpack(std::mem::zeroed()),\n                \"Non-zero hint for zero hash\",\n            );\n        };\n\n        hint.get_value()\n    }\n}\n\nimpl<T, let N: u32> Packable<N + 1> for WithHash<T, N>\nwhere\n    T: Packable<N>,\n{\n    fn pack(self) -> [Field; N + 1] {\n        let mut result: [Field; N + 1] = std::mem::zeroed();\n        for i in 0..N {\n            result[i] = self.packed[i];\n        }\n        result[N] = self.hash;\n\n        result\n    }\n\n    fn unpack(packed: [Field; N + 1]) -> Self {\n        let mut value_packed: [Field; N] = std::mem::zeroed();\n        for i in 0..N {\n            value_packed[i] = packed[i];\n        }\n        let hash = packed[N];\n\n        Self { value: T::unpack(value_packed), packed: value_packed, hash }\n    }\n}\n\nmod test {\n    use crate::{\n        oracle::random::random,\n        test::{\n            helpers::{cheatcodes, test_environment::TestEnvironment},\n            mocks::mock_struct::MockStruct,\n        },\n        utils::with_hash::WithHash,\n    };\n    use dep::protocol_types::hash::poseidon2_hash;\n    use dep::std::{mem, test::OracleMock};\n\n    global storage_slot: Field = 47;\n\n    #[test]\n    unconstrained fn create_and_recover() {\n        let value = MockStruct { a: 5, b: 3 };\n        let value_with_hash = WithHash::new(value);\n        let recovered = WithHash::unpack(value_with_hash.pack());\n\n        assert_eq(recovered.value, value);\n        assert_eq(recovered.packed, value.pack());\n        assert_eq(recovered.hash, poseidon2_hash(value.pack()));\n    }\n\n    #[test]\n    unconstrained fn read_uninitialized_value() {\n        let mut env = TestEnvironment::new();\n\n        let block_header = env.private().historical_header;\n        let address = env.contract_address();\n\n        let result = WithHash::<MockStruct, _>::historical_public_storage_read(\n            block_header,\n            address,\n            storage_slot,\n        );\n\n        // We should get zeroed value\n        let expected: MockStruct = mem::zeroed();\n        assert_eq(result, expected);\n    }\n\n    #[test]\n    unconstrained fn read_initialized_value() {\n        let mut env = TestEnvironment::new();\n\n        let value = MockStruct { a: 5, b: 3 };\n        let value_with_hash = WithHash::new(value);\n\n        // We write the value with hash to storage\n        cheatcodes::direct_storage_write(\n            env.contract_address(),\n            storage_slot,\n            value_with_hash.pack(),\n        );\n\n        // We advance block by 1 because env.private() currently returns context at latest_block - 1\n        env.advance_block_by(1);\n\n        let result = WithHash::<MockStruct, _>::historical_public_storage_read(\n            env.private().historical_header,\n            env.contract_address(),\n            storage_slot,\n        );\n\n        assert_eq(result, value);\n    }\n\n    #[test(should_fail_with = \"Non-zero hint for zero hash\")]\n    unconstrained fn test_bad_hint_uninitialized_value() {\n        let mut env = TestEnvironment::new();\n\n        env.advance_block_to(6);\n\n        let value_packed = MockStruct { a: 1, b: 1 }.pack();\n\n        let block_header = env.private().historical_header;\n        let address = env.contract_address();\n\n        // Mock the oracle to return a non-zero hint/packed value\n        let _ = OracleMock::mock(\"storageRead\")\n            .with_params((\n                address.to_field(), storage_slot, block_header.global_variables.block_number as u32,\n                value_packed.len(),\n            ))\n            .returns(value_packed)\n            .times(1);\n\n        // This should revert because the hint value is non-zero and the hash is zero (default value of storage)\n        let _ = WithHash::<MockStruct, _>::historical_public_storage_read(\n            block_header,\n            address,\n            storage_slot,\n        );\n    }\n\n    #[test(should_fail_with = \"Hint values do not match hash\")]\n    unconstrained fn test_bad_hint_initialized_value() {\n        let mut env = TestEnvironment::new();\n\n        let value_packed = MockStruct { a: 5, b: 3 }.pack();\n\n        // We write the value to storage\n        cheatcodes::direct_storage_write(env.contract_address(), storage_slot, value_packed);\n\n        // Now we write incorrect hash to the hash storage slot\n        let incorrect_hash = random();\n        let hash_storage_slot = storage_slot + (value_packed.len() as Field);\n        cheatcodes::direct_storage_write(\n            env.contract_address(),\n            hash_storage_slot,\n            [incorrect_hash],\n        );\n\n        // We advance block by 1 because env.private() currently returns context at latest_block - 1\n        env.advance_block_by(1);\n\n        let _ = WithHash::<MockStruct, _>::historical_public_storage_read(\n            env.private().historical_header,\n            env.contract_address(),\n            storage_slot,\n        );\n    }\n}\n"
    },
    "21": {
      "path": "std/hash/mod.nr",
      "source": "pub mod poseidon;\npub mod poseidon2;\npub mod keccak;\npub mod sha256;\npub mod sha512;\n\nuse crate::default::Default;\nuse crate::embedded_curve_ops::{\n    EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_array_return,\n};\nuse crate::meta::derive_via;\nuse crate::uint128::U128;\n\n// Kept for backwards compatibility\npub use sha256::{digest, sha256, sha256_compression, sha256_var};\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[inline_always]\npub fn pedersen_commitment_with_separator<let N: u32>(\n    input: [Field; N],\n    separator: u32,\n) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[no_predicates]\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: [EmbeddedCurveScalar; N + 1] = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N + 1];\n    let mut generators: [EmbeddedCurvePoint; N + 1] =\n        [EmbeddedCurvePoint::point_at_infinity(); N + 1];\n    let domain_generators: [EmbeddedCurvePoint; N] =\n        derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n\n    for i in 0..N {\n        scalars[i] = from_field_unsafe(input[i]);\n        generators[i] = domain_generators[i];\n    }\n    scalars[N] = EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field };\n\n    let length_generator: [EmbeddedCurvePoint; 1] =\n        derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    generators[N] = length_generator[0];\n    multi_scalar_mul_array_return(generators, scalars)[0]\n}\n\n#[field(bn254)]\n#[inline_always]\npub fn derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n// Same as from_field but:\n// does not assert the limbs are 128 bits\n// does not assert the decomposition does not overflow the EmbeddedCurveScalar\nfn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    /// Safety: xlo and xhi decomposition is checked below\n    let (xlo, xhi) = unsafe { crate::field::bn254::decompose_hint(scalar) };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n// docs:start:keccak256\npub fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{\n    crate::hash::keccak::keccak256(input, message_size)\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: StructDefinition) -> Quoted {\n    let name = quote { Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: std::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(\n        s,\n        name,\n        signature,\n        for_each_field,\n        quote {},\n        |fields| fields,\n    )\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher<H>\nwhere\n    H: Hasher,\n{\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H)\n    where\n        H: Hasher,\n    {}\n}\n\nimpl Hash for U128 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self.lo as Field);\n        H::write(state, self.hi as Field);\n    }\n}\n\nimpl<T, let N: u32> Hash for [T; N]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B)\nwhere\n    A: Hash,\n    B: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n    E: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1),\n        0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1),\n        EmbeddedCurvePoint {\n            x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n            y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n            is_infinite: false,\n        },\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2),\n        0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2),\n        EmbeddedCurvePoint {\n            x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n            y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3),\n        0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3),\n        EmbeddedCurvePoint {\n            x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n            y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4),\n        0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4),\n        EmbeddedCurvePoint {\n            x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n            y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5),\n        0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5),\n        EmbeddedCurvePoint {\n            x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n            y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6),\n        0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6),\n        EmbeddedCurvePoint {\n            x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n            y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        EmbeddedCurvePoint {\n            x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n            y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        EmbeddedCurvePoint {\n            x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n            y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        EmbeddedCurvePoint {\n            x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n            y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        EmbeddedCurvePoint {\n            x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n            y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n            is_infinite: false,\n        },\n    );\n}\n"
    },
    "219": {
      "path": "/Users/hka/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr",
      "source": "use crate::traits::{Deserialize, Empty, FromField, Serialize, ToField};\n\npub struct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    pub inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for FunctionSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for FunctionSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl FunctionSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = crate::hash::poseidon2_hash_bytes(bytes);\n\n        // `hash` is automatically truncated to fit within 32 bits.\n        FunctionSelector::from_field(hash)\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n\n#[test]\nfn test_is_valid_selector() {\n    let selector = FunctionSelector::from_signature(\"IS_VALID()\");\n    assert_eq(selector.to_field(), 0x73cdda47);\n}\n\n#[test]\nfn test_long_selector() {\n    let selector =\n        FunctionSelector::from_signature(\"foo_and_bar_and_baz_and_foo_bar_baz_and_bar_foo\");\n    assert_eq(selector.to_field(), 0x7590a997);\n}\n"
    },
    "255": {
      "path": "/Users/hka/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/noir-protocol-circuits/crates/types/src/abis/validation_requests/key_validation_request.nr",
      "source": "use crate::{point::Point, traits::{Deserialize, Empty, Serialize}};\npub use crate::constants::KEY_VALIDATION_REQUEST_LENGTH;\n\npub struct KeyValidationRequest {\n    pub pk_m: Point,\n    pub sk_app: Field, // not a grumpkin scalar because it's output of poseidon2\n}\n\nimpl Eq for KeyValidationRequest {\n    fn eq(self, request: KeyValidationRequest) -> bool {\n        (request.pk_m.eq(self.pk_m)) & (request.sk_app.eq(self.sk_app))\n    }\n}\n\nimpl Empty for KeyValidationRequest {\n    fn empty() -> Self {\n        KeyValidationRequest { pk_m: Point::empty(), sk_app: 0 }\n    }\n}\n\nimpl Serialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn serialize(self) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {\n        [self.pk_m.x, self.pk_m.y, self.pk_m.is_infinite as Field, self.sk_app]\n    }\n}\n\nimpl Deserialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn deserialize(fields: [Field; KEY_VALIDATION_REQUEST_LENGTH]) -> Self {\n        Self {\n            pk_m: Point { x: fields[0], y: fields[1], is_infinite: fields[2] as bool },\n            sk_app: fields[3],\n        }\n    }\n}\n"
    },
    "26": {
      "path": "std/hash/poseidon2.nr",
      "source": "use crate::default::Default;\nuse crate::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n"
    },
    "262": {
      "path": "/Users/hka/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr",
      "source": "use crate::{\n    abis::function_selector::FunctionSelector,\n    address::{\n        partial_address::PartialAddress, salted_initialization_hash::SaltedInitializationHash,\n    },\n    constants::{\n        AZTEC_ADDRESS_LENGTH, FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__CONTRACT_ADDRESS_V1,\n        MAX_FIELD_VALUE,\n    },\n    contract_class_id::ContractClassId,\n    hash::{poseidon2_hash_with_separator, private_functions_root_from_siblings},\n    merkle_tree::membership::MembershipWitness,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, ToPoint, TpkM},\n    traits::{Deserialize, Empty, FromField, Packable, Serialize, ToField},\n};\n\n// We do below because `use crate::point::Point;` does not work\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\n\nuse crate::public_keys::AddressPoint;\nuse ec::{pow, sqrt};\nuse std::{\n    embedded_curve_ops::{EmbeddedCurveScalar, fixed_base_scalar_mul as derive_public_key},\n    ops::Add,\n};\n\n// Aztec address\npub struct AztecAddress {\n    pub inner: Field,\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\n/// We implement the Packable trait for AztecAddress because it can be stored in contract's storage (and there\n/// the implementation of Packable is required).\nimpl Packable<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn pack(self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        self.serialize()\n    }\n\n    fn unpack(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        Self::deserialize(fields)\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn to_address_point(self) -> AddressPoint {\n        // We compute the address point by taking our address, setting it to x, and then solving for y in the\n        // equation which defines our bn curve:\n        // y^2 = x^3 - 17; x = address\n        let x = self.inner;\n        let y_squared = pow(x, 3) - 17;\n\n        // TODO (#8970): Handle cases where we cannot recover a point from an address\n        let mut y = sqrt(y_squared);\n\n        // If we get a negative y coordinate (any y where y > MAX_FIELD_VALUE / 2), we pin it to the\n        // positive one (any value where y <= MAX_FIELD_VALUE / 2) by subtracting it from the Field modulus\n        // note: The field modulus is MAX_FIELD_VALUE + 1\n        if (!(y.lt(MAX_FIELD_VALUE / 2) | y.eq(MAX_FIELD_VALUE / 2))) {\n            y = (MAX_FIELD_VALUE + 1) - y;\n        }\n\n        AddressPoint { inner: Point { x: self.inner, y, is_infinite: false } }\n    }\n\n    pub fn compute(public_keys: PublicKeys, partial_address: PartialAddress) -> AztecAddress {\n        let public_keys_hash = public_keys.hash();\n\n        let pre_address = poseidon2_hash_with_separator(\n            [public_keys_hash.to_field(), partial_address.to_field()],\n            GENERATOR_INDEX__CONTRACT_ADDRESS_V1,\n        );\n\n        let address_point = derive_public_key(EmbeddedCurveScalar::from_field(pre_address)).add(\n            public_keys.ivpk_m.to_point(),\n        );\n\n        // Note that our address is only the x-coordinate of the full address_point. This is okay because when people want to encrypt something and send it to us\n        // they can recover our full point using the x-coordinate (our address itself). To do this, they recompute the y-coordinate according to the equation y^2 = x^3 - 17.\n        // When they do this, they may get a positive y-coordinate (a value that is less than or equal to MAX_FIELD_VALUE / 2) or\n        // a negative y-coordinate (a value that is more than MAX_FIELD_VALUE), and we cannot dictate which one they get and hence the recovered point may sometimes be different than the one\n        // our secrect can decrypt. Regardless though, they should and will always encrypt using point with the positive y-coordinate by convention.\n        // This ensures that everyone encrypts to the same point given an arbitrary x-coordinate (address). This is allowed because even though our original point may not have a positive y-coordinate,\n        // with our original secret, we will be able to derive the secret to the point with the flipped (and now positive) y-coordinate that everyone encrypts to.\n        AztecAddress::from_field(address_point.x)\n    }\n\n    pub fn compute_from_private_function(\n        function_selector: FunctionSelector,\n        function_vk_hash: Field,\n        function_leaf_membership_witness: MembershipWitness<FUNCTION_TREE_HEIGHT>,\n        contract_class_artifact_hash: Field,\n        contract_class_public_bytecode_commitment: Field,\n        salted_initialization_hash: SaltedInitializationHash,\n        public_keys: PublicKeys,\n    ) -> Self {\n        let private_functions_root = private_functions_root_from_siblings(\n            function_selector,\n            function_vk_hash,\n            function_leaf_membership_witness.leaf_index,\n            function_leaf_membership_witness.sibling_path,\n        );\n\n        let contract_class_id = ContractClassId::compute(\n            contract_class_artifact_hash,\n            private_functions_root,\n            contract_class_public_bytecode_commitment,\n        );\n\n        // Compute contract address using the preimage which includes the class_id.\n        let partial_address = PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            salted_initialization_hash,\n        );\n\n        AztecAddress::compute(public_keys, partial_address)\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys() {\n    let public_keys = PublicKeys {\n        npk_m: NpkM {\n            inner: Point {\n                x: 0x22f7fcddfa3ce3e8f0cc8e82d7b94cdd740afa3e77f8e4a63ea78a239432dcab,\n                y: 0x0471657de2b6216ade6c506d28fbc22ba8b8ed95c871ad9f3e3984e90d9723a7,\n                is_infinite: false,\n            },\n        },\n        ivpk_m: IvpkM {\n            inner: Point {\n                x: 0x111223493147f6785514b1c195bb37a2589f22a6596d30bb2bb145fdc9ca8f1e,\n                y: 0x273bbffd678edce8fe30e0deafc4f66d58357c06fd4a820285294b9746c3be95,\n                is_infinite: false,\n            },\n        },\n        ovpk_m: OvpkM {\n            inner: Point {\n                x: 0x09115c96e962322ffed6522f57194627136b8d03ac7469109707f5e44190c484,\n                y: 0x0c49773308a13d740a7f0d4f0e6163b02c5a408b6f965856b6a491002d073d5b,\n                is_infinite: false,\n            },\n        },\n        tpk_m: TpkM {\n            inner: Point {\n                x: 0x00d3d81beb009873eb7116327cf47c612d5758ef083d4fda78e9b63980b2a762,\n                y: 0x2f567d22d2b02fe1f4ad42db9d58a36afd1983e7e2909d1cab61cafedad6193a,\n                is_infinite: false,\n            },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(\n        0x0a7c585381b10f4666044266a02405bf6e01fa564c8517d4ad5823493abd31de,\n    );\n\n    let address = AztecAddress::compute(public_keys, partial_address);\n\n    // The following value was generated by `derivation.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let expected_computed_address_from_partial_and_pubkeys =\n        0x24e4646f58b9fbe7d38e317db8d5636c423fbbdfbe119fc190fe9c64747e0c62;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkeys);\n}\n\n#[test]\nfn compute_preaddress_from_partial_and_pub_keys() {\n    let pre_address = poseidon2_hash_with_separator([1, 2], GENERATOR_INDEX__CONTRACT_ADDRESS_V1);\n    let expected_computed_preaddress_from_partial_and_pubkey =\n        0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;\n    assert(pre_address == expected_computed_preaddress_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n"
    },
    "27": {
      "path": "std/hash/sha256.nr",
      "source": "use crate::runtime::is_unconstrained;\n\n// Implementation of SHA-256 mapping a byte array of variable length to\n// 32 bytes.\n\n// A message block is up to 64 bytes taken from the input.\nglobal BLOCK_SIZE: u32 = 64;\n\n// The first index in the block where the 8 byte message size will be written.\nglobal MSG_SIZE_PTR: u32 = 56;\n\n// Size of the message block when packed as 4-byte integer array.\nglobal INT_BLOCK_SIZE: u32 = 16;\n\n// A `u32` integer consists of 4 bytes.\nglobal INT_SIZE: u32 = 4;\n\n// Index of the integer in the `INT_BLOCK` where the length is written.\nglobal INT_SIZE_PTR: u32 = MSG_SIZE_PTR / INT_SIZE;\n\n// Magic numbers for bit shifting.\n// Works with actual bit shifting as well as the compiler turns them into * and /\n// but circuit execution appears to be 10% faster this way.\nglobal TWO_POW_8: u32 = 256;\nglobal TWO_POW_16: u32 = TWO_POW_8 * 256;\nglobal TWO_POW_24: u32 = TWO_POW_16 * 256;\nglobal TWO_POW_32: u64 = TWO_POW_24 as u64 * 256;\n\n// Index of a byte in a 64 byte block; ie. 0..=63\ntype BLOCK_BYTE_PTR = u32;\n\n// The foreign function to compress blocks works on 16 pieces of 4-byte integers, instead of 64 bytes.\ntype INT_BLOCK = [u32; INT_BLOCK_SIZE];\n\n// A message block is a slice of the original message of a fixed size,\n// potentially padded with zeros, with neighbouring 4 bytes packed into integers.\ntype MSG_BLOCK = INT_BLOCK;\n\n// The hash is 32 bytes.\ntype HASH = [u8; 32];\n\n// The state accumulates the blocks.\n// Its overall size is the same as the `HASH`.\ntype STATE = [u32; 8];\n\n// docs:start:sha256\n#[deprecated(\"sha256 is being deprecated from the stdlib, use https://github.com/noir-lang/sha256 instead\")]\npub fn sha256<let N: u32>(input: [u8; N]) -> HASH\n// docs:end:sha256\n{\n    digest(input)\n}\n\n#[foreign(sha256_compression)]\npub fn sha256_compression(_input: INT_BLOCK, _state: STATE) -> STATE {}\n\n// SHA-256 hash function\n#[no_predicates]\n#[deprecated(\"sha256 is being deprecated from the stdlib, use https://github.com/noir-lang/sha256 instead\")]\npub fn digest<let N: u32>(msg: [u8; N]) -> HASH {\n    sha256_var(msg, N as u64)\n}\n\n// Variable size SHA-256 hash\n#[deprecated(\"sha256 is being deprecated from the stdlib, use https://github.com/noir-lang/sha256 instead\")]\npub fn sha256_var<let N: u32>(msg: [u8; N], message_size: u64) -> HASH {\n    let message_size = message_size as u32;\n    let num_blocks = N / BLOCK_SIZE;\n    let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n    // Intermediate hash, starting with the canonical initial value\n    let mut h: STATE = [\n        1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635,\n        1541459225,\n    ];\n    // Pointer into msg_block on a 64 byte scale\n    let mut msg_byte_ptr = 0;\n    for i in 0..num_blocks {\n        let msg_start = BLOCK_SIZE * i;\n        /// Safety: the msg_block is checked below in verify_msg_block\n        let (new_msg_block, new_msg_byte_ptr) =\n            unsafe { build_msg_block(msg, message_size, msg_start) };\n\n        if msg_start < message_size {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            // Verify the block we are compressing was appropriately constructed\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n        } else if msg_start < message_size {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n\n        // If the block is filled, compress it.\n        // An un-filled block is handled after this loop.\n        if (msg_start < message_size) & (msg_byte_ptr == BLOCK_SIZE) {\n            h = sha256_compression(msg_block, h);\n        }\n    }\n\n    let modulo = N % BLOCK_SIZE;\n    // Handle setup of the final msg block.\n    // This case is only hit if the msg is less than the block size,\n    // or our message cannot be evenly split into blocks.\n    if modulo != 0 {\n        let msg_start = BLOCK_SIZE * num_blocks;\n        /// Safety: the msg_block is checked below in verify_msg_block\n        let (new_msg_block, new_msg_byte_ptr) =\n            unsafe { build_msg_block(msg, message_size, msg_start) };\n\n        if msg_start < message_size {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n                verify_msg_block_padding(msg_block, msg_byte_ptr);\n            }\n        } else if msg_start < message_size {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n    }\n\n    // If we had modulo == 0 then it means the last block was full,\n    // and we can reset the pointer to zero to overwrite it.\n    if msg_byte_ptr == BLOCK_SIZE {\n        msg_byte_ptr = 0;\n    }\n\n    // Pad the rest such that we have a [u32; 2] block at the end representing the length\n    // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n    // Here we rely on the fact that everything beyond the available input is set to 0.\n    msg_block = update_block_item(\n        msg_block,\n        msg_byte_ptr,\n        |msg_item| set_item_byte_then_zeros(msg_item, msg_byte_ptr, 1 << 7),\n    );\n    msg_byte_ptr = msg_byte_ptr + 1;\n    let last_block = msg_block;\n\n    // If we don't have room to write the size, compress the block and reset it.\n    if msg_byte_ptr > MSG_SIZE_PTR {\n        h = sha256_compression(msg_block, h);\n        // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n        msg_byte_ptr = 0;\n    }\n\n    /// Safety: the msg_len is checked below in verify_msg_len\n    msg_block = unsafe { attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size) };\n\n    if !is_unconstrained() {\n        verify_msg_len(msg_block, last_block, msg_byte_ptr, message_size);\n    }\n\n    hash_final_block(msg_block, h)\n}\n\n// Take `BLOCK_SIZE` number of bytes from `msg` starting at `msg_start`.\n// Returns the block and the length that has been copied rather than padded with zeros.\nunconstrained fn build_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_start: u32,\n) -> (MSG_BLOCK, BLOCK_BYTE_PTR) {\n    let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n\n    // We insert `BLOCK_SIZE` bytes (or up to the end of the message)\n    let block_input = if msg_start + BLOCK_SIZE > message_size {\n        if message_size < msg_start {\n            // This function is sometimes called with `msg_start` past the end of the message.\n            // In this case we return an empty block and zero pointer to signal that the result should be ignored.\n            0\n        } else {\n            message_size - msg_start\n        }\n    } else {\n        BLOCK_SIZE\n    };\n\n    // Figure out the number of items in the int array that we have to pack.\n    // e.g. if the input is [0,1,2,3,4,5] then we need to pack it as 2 items: [0123, 4500]\n    let mut int_input = block_input / INT_SIZE;\n    if block_input % INT_SIZE != 0 {\n        int_input = int_input + 1;\n    };\n\n    for i in 0..int_input {\n        let mut msg_item: u32 = 0;\n        // Always construct the integer as 4 bytes, even if it means going beyond the input.\n        for j in 0..INT_SIZE {\n            let k = i * INT_SIZE + j;\n            let msg_byte = if k < block_input {\n                msg[msg_start + k]\n            } else {\n                0\n            };\n            msg_item = lshift8(msg_item, 1) + msg_byte as u32;\n        }\n        msg_block[i] = msg_item;\n    }\n\n    // Returning the index as if it was a 64 byte array.\n    // We have to project it down to 16 items and bit shifting to get a byte back if we need it.\n    (msg_block, block_input)\n}\n\n// Verify the block we are compressing was appropriately constructed by `build_msg_block`\n// and matches the input data. Returns the index of the first unset item.\n// If `message_size` is less than `msg_start` then this is called with the old non-empty block;\n// in that case we can skip verification, ie. no need to check that everything is zero.\nfn verify_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_block: MSG_BLOCK,\n    msg_start: u32,\n) -> BLOCK_BYTE_PTR {\n    let mut msg_byte_ptr = 0;\n    let mut msg_end = msg_start + BLOCK_SIZE;\n    if msg_end > N {\n        msg_end = N;\n    }\n    // We might have to go beyond the input to pad the fields.\n    if msg_end % INT_SIZE != 0 {\n        msg_end = msg_end + INT_SIZE - msg_end % INT_SIZE;\n    }\n\n    // Reconstructed packed item.\n    let mut msg_item: u32 = 0;\n\n    // Inclusive at the end so that we can compare the last item.\n    let mut i: u32 = 0;\n    for k in msg_start..=msg_end {\n        if k % INT_SIZE == 0 {\n            // If we consumed some input we can compare against the block.\n            if (msg_start < message_size) & (k > msg_start) {\n                assert_eq(msg_block[i], msg_item as u32);\n                i = i + 1;\n                msg_item = 0;\n            }\n        }\n        // Shift the accumulator\n        msg_item = lshift8(msg_item, 1);\n        // If we have input to consume, add it at the rightmost position.\n        if k < message_size & k < msg_end {\n            msg_item = msg_item + msg[k] as u32;\n            msg_byte_ptr = msg_byte_ptr + 1;\n        }\n    }\n\n    msg_byte_ptr\n}\n\n// Verify the block we are compressing was appropriately padded with zeros by `build_msg_block`.\n// This is only relevant for the last, potentially partially filled block.\nfn verify_msg_block_padding(msg_block: MSG_BLOCK, msg_byte_ptr: BLOCK_BYTE_PTR) {\n    // Check all the way to the end of the block.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_BLOCK_SIZE);\n}\n\n// Verify that a region of ints in the message block are (partially) zeroed,\n// up to an (exclusive) maximum which can either be the end of the block\n// or just where the size is to be written.\nfn verify_msg_block_zeros(\n    msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    max_int_byte_ptr: u32,\n) {\n    // This variable is used to get around the compiler under-constrained check giving a warning.\n    // We want to check against a constant zero, but if it does not come from the circuit inputs\n    // or return values the compiler check will issue a warning.\n    let zero = msg_block[0] - msg_block[0];\n\n    // First integer which is supposed to be (partially) zero.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        let zeros = INT_SIZE - modulo;\n        let mask = if zeros == 3 {\n            TWO_POW_24\n        } else if zeros == 2 {\n            TWO_POW_16\n        } else {\n            TWO_POW_8\n        };\n        assert_eq(msg_block[int_byte_ptr] % mask, zero);\n        int_byte_ptr = int_byte_ptr + 1;\n    }\n\n    // Check the rest of the items.\n    for i in 0..max_int_byte_ptr {\n        if i >= int_byte_ptr {\n            assert_eq(msg_block[i], zero);\n        }\n    }\n}\n\n// Verify that up to the byte pointer the two blocks are equal.\n// At the byte pointer the new block can be partially zeroed.\nfn verify_msg_block_equals_last(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n) {\n    // msg_byte_ptr is the position at which they are no longer have to be the same.\n    // First integer which is supposed to be (partially) zero contains that pointer.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Reconstruct the partially zero item from the last block.\n        let last_field = last_block[int_byte_ptr];\n        let mut msg_item: u32 = 0;\n        // Reset to where they are still equal.\n        msg_byte_ptr = msg_byte_ptr - modulo;\n        for i in 0..INT_SIZE {\n            msg_item = lshift8(msg_item, 1);\n            if i < modulo {\n                msg_item = msg_item + get_item_byte(last_field, msg_byte_ptr) as u32;\n                msg_byte_ptr = msg_byte_ptr + 1;\n            }\n        }\n        assert_eq(msg_block[int_byte_ptr], msg_item);\n    }\n\n    for i in 0..INT_SIZE_PTR {\n        if i < int_byte_ptr {\n            assert_eq(msg_block[i], last_block[i]);\n        }\n    }\n}\n\n// Apply a function on the block item which the pointer indicates.\nfn update_block_item<Env>(\n    mut msg_block: MSG_BLOCK,\n    msg_byte_ptr: BLOCK_BYTE_PTR,\n    f: fn[Env](u32) -> u32,\n) -> MSG_BLOCK {\n    let i = msg_byte_ptr / INT_SIZE;\n    msg_block[i] = f(msg_block[i]);\n    msg_block\n}\n\n// Set the rightmost `zeros` number of bytes to 0.\nfn set_item_zeros(item: u32, zeros: u8) -> u32 {\n    lshift8(rshift8(item, zeros), zeros)\n}\n\n// Replace one byte in the item with a value, and set everything after it to zero.\nfn set_item_byte_then_zeros(msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR, msg_byte: u8) -> u32 {\n    let zeros = INT_SIZE - msg_byte_ptr % INT_SIZE;\n    let zeroed_item = set_item_zeros(msg_item, zeros as u8);\n    let new_item = byte_into_item(msg_byte, msg_byte_ptr);\n    zeroed_item + new_item\n}\n\n// Get a byte of a message item according to its overall position in the `BLOCK_SIZE` space.\nfn get_item_byte(mut msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR) -> u8 {\n    // How many times do we have to shift to the right to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    msg_item = rshift8(msg_item, shifts as u8);\n    // At this point the byte we want is in the rightmost position.\n    msg_item as u8\n}\n\n// Project a byte into a position in a field based on the overall block pointer.\n// For example putting 1 into pointer 5 would be 100, because overall we would\n// have [____, 0100] with indexes [0123,4567].\nfn byte_into_item(msg_byte: u8, msg_byte_ptr: BLOCK_BYTE_PTR) -> u32 {\n    let mut msg_item = msg_byte as u32;\n    // How many times do we have to shift to the left to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    lshift8(msg_item, shifts as u8)\n}\n\n// Construct a field out of 4 bytes.\nfn make_item(b0: u8, b1: u8, b2: u8, b3: u8) -> u32 {\n    let mut item = b0 as u32;\n    item = lshift8(item, 1) + b1 as u32;\n    item = lshift8(item, 1) + b2 as u32;\n    item = lshift8(item, 1) + b3 as u32;\n    item\n}\n\n// Shift by 8 bits to the left between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise multiplies by 256.\nfn lshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        if item == 0 {\n            0\n        } else {\n            // Brillig wouldn't shift 0<<4 without overflow.\n            item << (8 * shifts)\n        }\n    } else {\n        // We can do a for loop up to INT_SIZE or an if-else.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item * TWO_POW_8\n        } else if shifts == 2 {\n            item * TWO_POW_16\n        } else if shifts == 3 {\n            item * TWO_POW_24\n        } else {\n            // Doesn't make sense, but it's most likely called on 0 anyway.\n            0\n        }\n    }\n}\n\n// Shift by 8 bits to the right between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise divides by 256.\nfn rshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        item >> (8 * shifts)\n    } else {\n        // Division wouldn't work on `Field`.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item / TWO_POW_8\n        } else if shifts == 2 {\n            item / TWO_POW_16\n        } else if shifts == 3 {\n            item / TWO_POW_24\n        } else {\n            0\n        }\n    }\n}\n\n// Zero out all bytes between the end of the message and where the length is appended,\n// then write the length into the last 8 bytes of the block.\nunconstrained fn attach_len_to_msg_block(\n    mut msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) -> MSG_BLOCK {\n    // We assume that `msg_byte_ptr` is less than 57 because if not then it is reset to zero before calling this function.\n    // In any case, fill blocks up with zeros until the last 64 bits (i.e. until msg_byte_ptr = 56).\n    // There can be one item which has to be partially zeroed.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Index of the block in which we find the item we need to partially zero.\n        let i = msg_byte_ptr / INT_SIZE;\n        let zeros = INT_SIZE - modulo;\n        msg_block[i] = set_item_zeros(msg_block[i], zeros as u8);\n        msg_byte_ptr = msg_byte_ptr + zeros;\n    }\n\n    // The rest can be zeroed without bit shifting anything.\n    for i in (msg_byte_ptr / INT_SIZE)..INT_SIZE_PTR {\n        msg_block[i] = 0;\n    }\n\n    // Set the last two 4 byte ints as the first/second half of the 8 bytes of the length.\n    let len = 8 * message_size;\n    let len_bytes: [u8; 8] = (len as Field).to_be_bytes();\n    for i in 0..=1 {\n        let shift = i * 4;\n        msg_block[INT_SIZE_PTR + i] = make_item(\n            len_bytes[shift],\n            len_bytes[shift + 1],\n            len_bytes[shift + 2],\n            len_bytes[shift + 3],\n        );\n    }\n    msg_block\n}\n\n// Verify that the message length was correctly written by `attach_len_to_msg_block`,\n// and that everything between the byte pointer and the size pointer was zeroed,\n// and that everything before the byte pointer was untouched.\nfn verify_msg_len(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) {\n    // Check zeros up to the size pointer.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_SIZE_PTR);\n\n    // Check that up to the pointer we match the last block.\n    verify_msg_block_equals_last(msg_block, last_block, msg_byte_ptr);\n\n    // We verify the message length was inserted correctly by reversing the byte decomposition.\n    let mut reconstructed_len: u64 = 0;\n    for i in INT_SIZE_PTR..INT_BLOCK_SIZE {\n        reconstructed_len = reconstructed_len * TWO_POW_32;\n        reconstructed_len = reconstructed_len + msg_block[i] as u64;\n    }\n    let len = 8 * message_size as u64;\n    assert_eq(reconstructed_len, len);\n}\n\n// Perform the final compression, then transform the `STATE` into `HASH`.\nfn hash_final_block(msg_block: MSG_BLOCK, mut state: STATE) -> HASH {\n    let mut out_h: HASH = [0; 32]; // Digest as sequence of bytes\n    // Hash final padded block\n    state = sha256_compression(msg_block, state);\n\n    // Return final hash as byte array\n    for j in 0..8 {\n        let h_bytes: [u8; 4] = (state[j] as Field).to_be_bytes();\n        for k in 0..4 {\n            out_h[4 * j + k] = h_bytes[k];\n        }\n    }\n\n    out_h\n}\n\nmod tests {\n    use super::{\n        attach_len_to_msg_block, build_msg_block, byte_into_item, get_item_byte, make_item,\n        set_item_byte_then_zeros, set_item_zeros,\n    };\n    use super::INT_BLOCK;\n    use super::sha256_var;\n\n    #[test]\n    fn smoke_test() {\n        let input = [0xbd];\n        let result = [\n            0x68, 0x32, 0x57, 0x20, 0xaa, 0xbd, 0x7c, 0x82, 0xf3, 0x0f, 0x55, 0x4b, 0x31, 0x3d,\n            0x05, 0x70, 0xc9, 0x5a, 0xcc, 0xbb, 0x7d, 0xc4, 0xb5, 0xaa, 0xe1, 0x12, 0x04, 0xc0,\n            0x8f, 0xfe, 0x73, 0x2b,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_just_over_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116,\n        ];\n        let result = [\n            91, 122, 146, 93, 52, 109, 133, 148, 171, 61, 156, 70, 189, 238, 153, 7, 222, 184, 94,\n            24, 65, 114, 192, 244, 207, 199, 87, 232, 192, 224, 171, 207,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_multiple_over_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116, 61, 117, 115, 45, 97, 115,\n            99, 105, 105, 13, 10, 109, 105, 109, 101, 45, 118, 101, 114, 115, 105, 111, 110, 58, 49,\n            46, 48, 32, 40, 77, 97, 99, 32, 79, 83, 32, 88, 32, 77, 97, 105, 108, 32, 49, 54, 46,\n            48, 32, 92, 40, 51, 55, 51, 49, 46, 53, 48, 48, 46, 50, 51, 49, 92, 41, 41, 13, 10, 115,\n            117, 98, 106, 101, 99, 116, 58, 72, 101, 108, 108, 111, 13, 10, 109, 101, 115, 115, 97,\n            103, 101, 45, 105, 100, 58, 60, 56, 70, 56, 49, 57, 68, 51, 50, 45, 66, 54, 65, 67, 45,\n            52, 56, 57, 68, 45, 57, 55, 55, 70, 45, 52, 51, 56, 66, 66, 67, 52, 67, 65, 66, 50, 55,\n            64, 109, 101, 46, 99, 111, 109, 62, 13, 10, 100, 97, 116, 101, 58, 83, 97, 116, 44, 32,\n            50, 54, 32, 65, 117, 103, 32, 50, 48, 50, 51, 32, 49, 50, 58, 50, 53, 58, 50, 50, 32,\n            43, 48, 52, 48, 48, 13, 10, 116, 111, 58, 122, 107, 101, 119, 116, 101, 115, 116, 64,\n            103, 109, 97, 105, 108, 46, 99, 111, 109, 13, 10, 100, 107, 105, 109, 45, 115, 105, 103,\n            110, 97, 116, 117, 114, 101, 58, 118, 61, 49, 59, 32, 97, 61, 114, 115, 97, 45, 115,\n            104, 97, 50, 53, 54, 59, 32, 99, 61, 114, 101, 108, 97, 120, 101, 100, 47, 114, 101,\n            108, 97, 120, 101, 100, 59, 32, 100, 61, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109,\n            59, 32, 115, 61, 49, 97, 49, 104, 97, 105, 59, 32, 116, 61, 49, 54, 57, 51, 48, 51, 56,\n            51, 51, 55, 59, 32, 98, 104, 61, 55, 120, 81, 77, 68, 117, 111, 86, 86, 85, 52, 109, 48,\n            87, 48, 87, 82, 86, 83, 114, 86, 88, 77, 101, 71, 83, 73, 65, 83, 115, 110, 117, 99, 75,\n            57, 100, 74, 115, 114, 99, 43, 118, 85, 61, 59, 32, 104, 61, 102, 114, 111, 109, 58, 67,\n            111, 110, 116, 101, 110, 116, 45, 84, 121, 112, 101, 58, 77, 105, 109, 101, 45, 86, 101,\n            114, 115, 105, 111, 110, 58, 83, 117, 98, 106, 101, 99,\n        ];\n        let result = [\n            116, 90, 151, 31, 78, 22, 138, 180, 211, 189, 69, 76, 227, 200, 155, 29, 59, 123, 154,\n            60, 47, 153, 203, 129, 157, 251, 48, 2, 79, 11, 65, 47,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_just_under_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59,\n        ];\n        let result = [\n            143, 140, 76, 173, 222, 123, 102, 68, 70, 149, 207, 43, 39, 61, 34, 79, 216, 252, 213,\n            165, 74, 16, 110, 74, 29, 64, 138, 167, 30, 1, 9, 119,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_big_not_block_multiple() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116, 61, 117, 115, 45, 97, 115,\n            99, 105, 105, 13, 10, 109, 105, 109, 101, 45, 118, 101, 114, 115, 105, 111, 110, 58, 49,\n            46, 48, 32, 40, 77, 97, 99, 32, 79, 83, 32, 88, 32, 77, 97, 105, 108, 32, 49, 54, 46,\n            48, 32, 92, 40, 51, 55, 51, 49, 46, 53, 48, 48, 46, 50, 51, 49, 92, 41, 41, 13, 10, 115,\n            117, 98, 106, 101, 99, 116, 58, 72, 101, 108, 108, 111, 13, 10, 109, 101, 115, 115, 97,\n            103, 101, 45, 105, 100, 58, 60, 56, 70, 56, 49, 57, 68, 51, 50, 45, 66, 54, 65, 67, 45,\n            52, 56, 57, 68, 45, 57, 55, 55, 70, 45, 52, 51, 56, 66, 66, 67, 52, 67, 65, 66, 50, 55,\n            64, 109, 101, 46, 99, 111, 109, 62, 13, 10, 100, 97, 116, 101, 58, 83, 97, 116, 44, 32,\n            50, 54, 32, 65, 117, 103, 32, 50, 48, 50, 51, 32, 49, 50, 58, 50, 53, 58, 50, 50, 32,\n            43, 48, 52, 48, 48, 13, 10, 116, 111, 58, 122, 107, 101, 119, 116, 101, 115, 116, 64,\n            103, 109, 97, 105, 108, 46, 99, 111, 109, 13, 10, 100, 107, 105, 109, 45, 115, 105, 103,\n            110, 97, 116, 117, 114, 101, 58, 118, 61, 49, 59, 32, 97, 61, 114, 115, 97, 45, 115,\n            104, 97, 50, 53, 54, 59, 32, 99, 61, 114, 101, 108, 97, 120, 101, 100, 47, 114, 101,\n            108, 97, 120, 101, 100, 59, 32, 100, 61, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109,\n            59, 32, 115, 61, 49, 97, 49, 104, 97, 105, 59, 32, 116, 61, 49, 54, 57, 51, 48, 51, 56,\n            51, 51, 55, 59, 32, 98, 104, 61, 55, 120, 81, 77, 68, 117, 111, 86, 86, 85, 52, 109, 48,\n            87, 48, 87, 82, 86, 83, 114, 86, 88, 77, 101, 71, 83, 73, 65, 83, 115, 110, 117, 99, 75,\n            57, 100, 74, 115, 114, 99, 43, 118, 85, 61, 59, 32, 104, 61, 102, 114, 111, 109, 58, 67,\n            111, 110, 116, 101, 110, 116, 45, 84, 121, 112, 101, 58, 77, 105, 109, 101, 45, 86, 101,\n            114, 115, 105, 111, 110, 58, 83, 117, 98, 106, 101, 99, 116, 58, 77, 101, 115, 115, 97,\n            103, 101, 45, 73, 100, 58, 68, 97, 116, 101, 58, 116, 111, 59, 32, 98, 61,\n        ];\n        let result = [\n            112, 144, 73, 182, 208, 98, 9, 238, 54, 229, 61, 145, 222, 17, 72, 62, 148, 222, 186,\n            55, 192, 82, 220, 35, 66, 47, 193, 200, 22, 38, 26, 186,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_big_with_padding() {\n        let input = [\n            48, 130, 1, 37, 2, 1, 0, 48, 11, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 1, 48, 130, 1, 17,\n            48, 37, 2, 1, 1, 4, 32, 176, 223, 31, 133, 108, 84, 158, 102, 70, 11, 165, 175, 196, 12,\n            201, 130, 25, 131, 46, 125, 156, 194, 28, 23, 55, 133, 157, 164, 135, 136, 220, 78, 48,\n            37, 2, 1, 2, 4, 32, 190, 82, 180, 235, 222, 33, 79, 50, 152, 136, 142, 35, 116, 224, 6,\n            242, 156, 141, 128, 248, 10, 61, 98, 86, 248, 45, 207, 210, 90, 232, 175, 38, 48, 37, 2,\n            1, 3, 4, 32, 0, 194, 104, 108, 237, 246, 97, 230, 116, 198, 69, 110, 26, 87, 17, 89,\n            110, 199, 108, 250, 36, 21, 39, 87, 110, 102, 250, 213, 174, 131, 171, 174, 48, 37, 2,\n            1, 11, 4, 32, 136, 155, 87, 144, 111, 15, 152, 127, 85, 25, 154, 81, 20, 58, 51, 75,\n            193, 116, 234, 0, 60, 30, 29, 30, 183, 141, 72, 247, 255, 203, 100, 124, 48, 37, 2, 1,\n            12, 4, 32, 41, 234, 106, 78, 31, 11, 114, 137, 237, 17, 92, 71, 134, 47, 62, 78, 189,\n            233, 201, 214, 53, 4, 47, 189, 201, 133, 6, 121, 34, 131, 64, 142, 48, 37, 2, 1, 13, 4,\n            32, 91, 222, 210, 193, 62, 222, 104, 82, 36, 41, 138, 253, 70, 15, 148, 208, 156, 45,\n            105, 171, 241, 195, 185, 43, 217, 162, 146, 201, 222, 89, 238, 38, 48, 37, 2, 1, 14, 4,\n            32, 76, 123, 216, 13, 51, 227, 72, 245, 59, 193, 238, 166, 103, 49, 23, 164, 171, 188,\n            194, 197, 156, 187, 249, 28, 198, 95, 69, 15, 182, 56, 54, 38, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        ];\n        let result = [\n            32, 85, 108, 174, 127, 112, 178, 182, 8, 43, 134, 123, 192, 211, 131, 66, 184, 240, 212,\n            181, 240, 180, 106, 195, 24, 117, 54, 129, 19, 10, 250, 53,\n        ];\n        let message_size = 297;\n        assert_eq(sha256_var(input, message_size), result);\n    }\n\n    #[test]\n    fn msg_big_no_padding() {\n        let input = [\n            48, 130, 1, 37, 2, 1, 0, 48, 11, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 1, 48, 130, 1, 17,\n            48, 37, 2, 1, 1, 4, 32, 176, 223, 31, 133, 108, 84, 158, 102, 70, 11, 165, 175, 196, 12,\n            201, 130, 25, 131, 46, 125, 156, 194, 28, 23, 55, 133, 157, 164, 135, 136, 220, 78, 48,\n            37, 2, 1, 2, 4, 32, 190, 82, 180, 235, 222, 33, 79, 50, 152, 136, 142, 35, 116, 224, 6,\n            242, 156, 141, 128, 248, 10, 61, 98, 86, 248, 45, 207, 210, 90, 232, 175, 38, 48, 37, 2,\n            1, 3, 4, 32, 0, 194, 104, 108, 237, 246, 97, 230, 116, 198, 69, 110, 26, 87, 17, 89,\n            110, 199, 108, 250, 36, 21, 39, 87, 110, 102, 250, 213, 174, 131, 171, 174, 48, 37, 2,\n            1, 11, 4, 32, 136, 155, 87, 144, 111, 15, 152, 127, 85, 25, 154, 81, 20, 58, 51, 75,\n            193, 116, 234, 0, 60, 30, 29, 30, 183, 141, 72, 247, 255, 203, 100, 124, 48, 37, 2, 1,\n            12, 4, 32, 41, 234, 106, 78, 31, 11, 114, 137, 237, 17, 92, 71, 134, 47, 62, 78, 189,\n            233, 201, 214, 53, 4, 47, 189, 201, 133, 6, 121, 34, 131, 64, 142, 48, 37, 2, 1, 13, 4,\n            32, 91, 222, 210, 193, 62, 222, 104, 82, 36, 41, 138, 253, 70, 15, 148, 208, 156, 45,\n            105, 171, 241, 195, 185, 43, 217, 162, 146, 201, 222, 89, 238, 38, 48, 37, 2, 1, 14, 4,\n            32, 76, 123, 216, 13, 51, 227, 72, 245, 59, 193, 238, 166, 103, 49, 23, 164, 171, 188,\n            194, 197, 156, 187, 249, 28, 198, 95, 69, 15, 182, 56, 54, 38,\n        ];\n        let result = [\n            32, 85, 108, 174, 127, 112, 178, 182, 8, 43, 134, 123, 192, 211, 131, 66, 184, 240, 212,\n            181, 240, 180, 106, 195, 24, 117, 54, 129, 19, 10, 250, 53,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn same_msg_len_variable_padding() {\n        let input = [\n            29, 81, 165, 84, 243, 114, 101, 37, 242, 146, 127, 99, 69, 145, 39, 72, 213, 39, 253,\n            179, 218, 37, 217, 201, 172, 93, 198, 50, 249, 70, 15, 30, 162, 112, 187, 40, 140, 9,\n            236, 53, 32, 44, 38, 163, 113, 254, 192, 197, 44, 89, 71, 130, 169, 242, 17, 211, 214,\n            72, 19, 178, 186, 168, 147, 127, 99, 101, 252, 227, 8, 147, 150, 85, 97, 158, 17, 107,\n            218, 244, 82, 113, 247, 91, 208, 214, 60, 244, 87, 137, 173, 201, 130, 18, 66, 56, 198,\n            149, 207, 189, 175, 120, 123, 224, 177, 167, 251, 159, 143, 110, 68, 183, 189, 70, 126,\n            32, 35, 164, 44, 30, 44, 12, 65, 18, 62, 239, 242, 2, 248, 104, 2, 178, 64, 28, 126, 36,\n            137, 24, 14, 116, 91, 98, 90, 159, 218, 102, 45, 11, 110, 223, 245, 184, 52, 99, 59,\n            245, 136, 175, 3, 72, 164, 146, 145, 116, 22, 66, 24, 49, 193, 121, 3, 60, 37, 41, 97,\n            3, 190, 66, 195, 225, 63, 46, 3, 118, 4, 208, 15, 1, 40, 254, 235, 151, 123, 70, 180,\n            170, 44, 172, 90, 4, 254, 53, 239, 116, 246, 67, 56, 129, 61, 22, 169, 213, 65, 27, 216,\n            116, 162, 239, 214, 207, 126, 177, 20, 100, 25, 48, 143, 84, 215, 70, 197, 53, 65, 70,\n            86, 172, 61, 62, 9, 212, 167, 169, 133, 41, 126, 213, 196, 33, 192, 238, 0, 63, 246,\n            215, 58, 128, 110, 101, 92, 3, 170, 214, 130, 149, 52, 81, 125, 118, 233, 3, 118, 193,\n            104, 207, 120, 115, 77, 253, 191, 122, 0, 107, 164, 207, 113, 81, 169, 36, 201, 228, 74,\n            134, 131, 218, 178, 35, 30, 216, 101, 2, 103, 174, 87, 95, 50, 50, 215, 157, 5, 210,\n            188, 54, 211, 78, 45, 199, 96, 121, 241, 241, 176, 226, 194, 134, 130, 89, 217, 210,\n            186, 32, 140, 39, 91, 103, 212, 26, 87, 32, 72, 144, 228, 230, 117, 99, 188, 50, 15, 69,\n            79, 179, 50, 12, 106, 86, 218, 101, 73, 142, 243, 29, 250, 122, 228, 233, 29, 255, 22,\n            121, 114, 125, 103, 41, 250, 241, 179, 126, 158, 198, 116, 209, 65, 94, 98, 228, 175,\n            169, 96, 3, 9, 233, 133, 214, 55, 161, 164, 103, 80, 85, 24, 186, 64, 167, 92, 131, 53,\n            101, 202, 47, 25, 104, 118, 155, 14, 12, 12, 25, 116, 45, 221, 249, 28, 246, 212, 200,\n            157, 167, 169, 56, 197, 181, 4, 245, 146, 1, 140, 234, 191, 212, 228, 125, 87, 81, 86,\n            119, 30, 63, 129, 143, 32, 96,\n        ];\n\n        // Prepare inputs of different lengths\n        let mut input_511 = [0; 511];\n        let mut input_512 = [0; 512]; // Next block\n        let mut input_575 = [0; 575];\n        let mut input_576 = [0; 576]; // Next block\n        for i in 0..input.len() {\n            input_511[i] = input[i];\n            input_512[i] = input[i];\n            input_575[i] = input[i];\n            input_576[i] = input[i];\n        }\n\n        // Compute hashes of all inputs (with same message length)\n        let fixed_length_hash = super::sha256(input);\n        let var_full_length_hash = sha256_var(input, input.len() as u64);\n        let var_length_hash_511 = sha256_var(input_511, input.len() as u64);\n        let var_length_hash_512 = sha256_var(input_512, input.len() as u64);\n        let var_length_hash_575 = sha256_var(input_575, input.len() as u64);\n        let var_length_hash_576 = sha256_var(input_576, input.len() as u64);\n\n        // All of the above should have produced the same hash\n        assert_eq(var_full_length_hash, fixed_length_hash);\n        assert_eq(var_length_hash_511, fixed_length_hash);\n        assert_eq(var_length_hash_512, fixed_length_hash);\n        assert_eq(var_length_hash_575, fixed_length_hash);\n        assert_eq(var_length_hash_576, fixed_length_hash);\n    }\n\n    #[test]\n    fn test_get_item_byte() {\n        let fld = make_item(10, 20, 30, 40);\n        assert_eq(fld, 0x0a141e28);\n        assert_eq(get_item_byte(fld, 0), 10);\n        assert_eq(get_item_byte(fld, 4), 10);\n        assert_eq(get_item_byte(fld, 6), 30);\n    }\n\n    #[test]\n    fn test_byte_into_item() {\n        let fld = make_item(0, 20, 0, 0);\n        assert_eq(byte_into_item(20, 1), fld);\n        assert_eq(byte_into_item(20, 5), fld);\n    }\n\n    #[test]\n    fn test_set_item_zeros() {\n        let fld0 = make_item(10, 20, 30, 40);\n        let fld1 = make_item(10, 0, 0, 0);\n        assert_eq(set_item_zeros(fld0, 3), fld1);\n        assert_eq(set_item_zeros(fld0, 4), 0);\n        assert_eq(set_item_zeros(0, 4), 0);\n    }\n\n    #[test]\n    fn test_set_item_byte_then_zeros() {\n        let fld0 = make_item(10, 20, 30, 40);\n        let fld1 = make_item(10, 50, 0, 0);\n        assert_eq(set_item_byte_then_zeros(fld0, 1, 50), fld1);\n    }\n\n    #[test]\n    fn test_build_msg_block_start_0() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48,\n        ];\n        assert_eq(input.len(), 22);\n\n        /// Safety: testing context\n        let (msg_block, msg_byte_ptr) = unsafe { build_msg_block(input, input.len(), 0) };\n        assert_eq(msg_byte_ptr, input.len());\n        assert_eq(msg_block[0], make_item(input[0], input[1], input[2], input[3]));\n        assert_eq(msg_block[1], make_item(input[4], input[5], input[6], input[7]));\n        assert_eq(msg_block[5], make_item(input[20], input[21], 0, 0));\n        assert_eq(msg_block[6], 0);\n    }\n\n    #[test]\n    fn test_build_msg_block_start_1() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116,\n        ];\n        assert_eq(input.len(), 68);\n        /// Safety: test context\n        let (msg_block, msg_byte_ptr) = unsafe { build_msg_block(input, input.len(), 64) };\n        assert_eq(msg_byte_ptr, 4);\n        assert_eq(msg_block[0], make_item(input[64], input[65], input[66], input[67]));\n        assert_eq(msg_block[1], 0);\n    }\n\n    #[test]\n    fn test_attach_len_to_msg_block() {\n        let input: INT_BLOCK = [\n            2152555847, 1397309779, 1936618851, 1262052426, 1936876331, 1985297723, 543702374,\n            1919905082, 1131376244, 1701737517, 1417244773, 978151789, 1697470053, 1920166255,\n            1849316213, 1651139939,\n        ];\n        /// Safety: testing context\n        let msg_block = unsafe { attach_len_to_msg_block(input, 1, 448) };\n        assert_eq(msg_block[0], ((1 << 7) as u32) * 256 * 256 * 256);\n        assert_eq(msg_block[1], 0);\n        assert_eq(msg_block[15], 3584);\n    }\n}\n"
    },
    "277": {
      "path": "/Users/hka/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/noir-protocol-circuits/crates/types/src/data/public_data_tree_leaf_preimage.nr",
      "source": "use crate::{\n    data::public_data_tree_leaf::PublicDataTreeLeaf,\n    merkle_tree::leaf_preimage::{IndexedTreeLeafPreimage, LeafPreimage},\n    traits::{Empty, Hash},\n};\n\npub struct PublicDataTreeLeafPreimage {\n    pub slot: Field,\n    pub value: Field,\n    pub next_slot: Field,\n    pub next_index: u32,\n}\n\nimpl Empty for PublicDataTreeLeafPreimage {\n    fn empty() -> Self {\n        Self { slot: 0, value: 0, next_slot: 0, next_index: 0 }\n    }\n}\n\nimpl Eq for PublicDataTreeLeafPreimage {\n    fn eq(self, other: Self) -> bool {\n        (self.slot == other.slot)\n            & (self.value == other.value)\n            & (self.next_slot == other.next_slot)\n            & (self.next_index == other.next_index)\n    }\n}\n\nimpl Hash for PublicDataTreeLeafPreimage {\n    fn hash(self) -> Field {\n        if self.is_empty() {\n            0\n        } else {\n            crate::hash::poseidon2_hash([\n                self.slot,\n                self.value,\n                (self.next_index as Field),\n                self.next_slot,\n            ])\n        }\n    }\n}\n\nimpl LeafPreimage for PublicDataTreeLeafPreimage {\n    fn get_key(self) -> Field {\n        self.slot\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl IndexedTreeLeafPreimage<PublicDataTreeLeaf> for PublicDataTreeLeafPreimage {\n    fn get_next_key(self) -> Field {\n        self.next_slot\n    }\n\n    fn points_to_infinity(self) -> bool {\n        (self.next_slot == 0) & (self.next_index == 0)\n    }\n\n    fn update_pointers(self, next_slot: Field, next_index: u32) -> Self {\n        Self { slot: self.slot, value: self.value, next_slot, next_index }\n    }\n\n    fn update_value(self, write: PublicDataTreeLeaf) -> Self {\n        Self {\n            slot: self.slot,\n            value: write.value,\n            next_slot: self.next_slot,\n            next_index: self.next_index,\n        }\n    }\n\n    fn build_insertion_leaf(write: PublicDataTreeLeaf, low_leaf: Self) -> Self {\n        Self {\n            slot: write.slot,\n            value: write.value,\n            next_slot: low_leaf.next_slot,\n            next_index: low_leaf.next_index,\n        }\n    }\n}\n\nimpl PublicDataTreeLeafPreimage {\n    pub fn is_empty(self) -> bool {\n        (self.slot == 0) & (self.value == 0) & (self.next_slot == 0) & (self.next_index == 0)\n    }\n}\n"
    },
    "278": {
      "path": "/Users/hka/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/noir-protocol-circuits/crates/types/src/debug_log.nr",
      "source": "/// Utility function to console.log data in the acir simulator.\n/// Example:\n///   debug_log(\"blah blah this is a debug string\");\npub fn debug_log<let N: u32>(msg: str<N>) {\n    debug_log_format(msg, []);\n}\n\n/// Utility function to console.log data in the acir simulator. This variant receives a format string in which the\n/// `${k}` tokens will be replaced with the k-eth value in the `args` array.\n/// Examples:\n///   debug_log_format(\"get_2(slot:{0}) =>\\n\\t0:{1}\\n\\t1:{2}\", [storage_slot, note0_hash, note1_hash]);\n///   debug_log_format(\"whole array: {}\", [e1, e2, e3, e4]);\npub fn debug_log_format<let M: u32, let N: u32>(msg: str<M>, args: [Field; N]) {\n    /// Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    /// to call.\n    unsafe { debug_log_oracle_wrapper(msg, args) };\n}\n\npub unconstrained fn debug_log_oracle_wrapper<let M: u32, let N: u32>(\n    msg: str<M>,\n    args: [Field; N],\n) {\n    debug_log_oracle(msg, args.as_slice());\n}\n\n// WARNING: sometimes when using debug logs the ACVM errors with: `thrown: \"solver opcode resolution error: cannot solve opcode: expression has too many unknowns x155\"`\n#[oracle(debugLog)]\nunconstrained fn debug_log_oracle<let M: u32>(_msg: str<M>, args: [Field]) {}\n"
    },
    "279": {
      "path": "/Users/hka/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr",
      "source": "use crate::{\n    abis::{\n        contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n        function_selector::FunctionSelector,\n        log_hash::{LogHash, ScopedLogHash},\n        note_hash::ScopedNoteHash,\n        nullifier::ScopedNullifier,\n        private_log::{PrivateLog, PrivateLogData},\n        side_effect::{OrderedValue, scoped::Scoped},\n    },\n    address::{AztecAddress, EthAddress},\n    constants::{\n        FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__OUTER_NULLIFIER,\n        GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__UNIQUE_NOTE_HASH,\n    },\n    merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::{L2ToL1Message, ScopedL2ToL1Message},\n    poseidon2::Poseidon2Sponge,\n    traits::{FromField, Hash, is_empty, ToField},\n    utils::field::field_from_bytes_32_trunc,\n};\nuse super::{constants::TWO_POW_64, utils::{arrays::array_concat, field::field_from_bytes}};\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256::digest(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT],\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(\n        function_leaf,\n        function_leaf_index,\n        function_leaf_sibling_path,\n    )\n}\n\npub fn compute_note_hash_nonce(first_nullifier_in_tx: Field, note_index_in_tx: u32) -> Field {\n    // Hashing the first nullifier with note index in tx is guaranteed to be unique (because all nullifiers are also\n    // unique).\n    poseidon2_hash_with_separator(\n        [first_nullifier_in_tx, note_index_in_tx as Field],\n        GENERATOR_INDEX__NOTE_HASH_NONCE,\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), note_hash],\n        GENERATOR_INDEX__SILOED_NOTE_HASH,\n    )\n}\n\n/// Computes unique note hashes from siloed note hashes\npub fn compute_unique_siloed_note_hash(\n    siloed_note_hash: Field,\n    first_nullifier: Field,\n    note_index_in_tx: u32,\n) -> Field {\n    if siloed_note_hash == 0 {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(first_nullifier, note_index_in_tx);\n        compute_unique_note_hash(nonce, siloed_note_hash)\n    }\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_note_hash(note_hash.contract_address, note_hash.value())\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), nullifier],\n        GENERATOR_INDEX__OUTER_NULLIFIER,\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn compute_siloed_private_log_field(contract_address: AztecAddress, field: Field) -> Field {\n    poseidon2_hash([contract_address.to_field(), field])\n}\n\npub fn silo_private_log(private_log: Scoped<PrivateLogData>) -> PrivateLog {\n    if private_log.contract_address.is_zero() {\n        private_log.inner.log\n    } else {\n        let mut fields = private_log.inner.log.fields;\n        fields[0] = compute_siloed_private_log_field(private_log.contract_address, fields[0]);\n        PrivateLog { fields }\n    }\n}\n\nfn compute_siloed_contract_class_log_hash(address: AztecAddress, log_hash: Field) -> Field {\n    accumulate_sha256([address.to_field(), log_hash])\n}\n\npub fn silo_contract_class_log_hash(log_hash: ScopedLogHash) -> Field {\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_contract_class_log_hash(log_hash.contract_address, log_hash.value())\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    let mut bytes: [u8; 160] = std::mem::zeroed();\n\n    let inputs =\n        [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..5 {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes: [u8; 32] = inputs[i].to_be_bytes();\n        for j in 0..32 {\n            bytes[32 * i + j] = item_bytes[j];\n        }\n    }\n\n    sha256_to_field(bytes)\n}\n\npub fn silo_l2_to_l1_message(\n    msg: ScopedL2ToL1Message,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id,\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a U128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\n// Computes the final logs hash for a tx.\npub fn compute_tx_logs_hash<let N: u32>(logs: [LogHash; N]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; N * 32];\n    for offset in 0..N {\n        // TODO: This is not checking that the decomposition is smaller than P\n        let input_as_bytes: [u8; 32] = logs[offset].value.to_be_radix(256);\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn verification_key_hash<let N: u32>(key: [Field; N]) -> Field {\n    crate::hash::poseidon2_hash(key)\n}\n\n#[inline_always]\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(inputs: [Field; N], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let inputs_with_separator = array_concat([separator.to_field()], inputs);\n    poseidon2_hash(inputs_with_separator)\n}\n\n// Performs a fixed length hash with a subarray of the given input.\n// Useful for SpongeBlob in which we aborb M things and want to check it vs a hash of M elts of an N-len array.\n// Using stdlib poseidon, this will always absorb an extra 1 as a 'variable' hash, and not match spongeblob.squeeze()\n// or any ts implementation. Also checks that any remaining elts not hashed are empty.\n#[no_predicates]\npub fn poseidon2_hash_subarray<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, false);\n    sponge.squeeze()\n}\n\n// NB the below is the same as std::hash::poseidon2::Poseidon2::hash(), but replacing a range check with a bit check,\n// and absorbing in chunks of 3 below.\n#[no_predicates]\npub fn poseidon2_cheaper_variable_hash<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, true);\n    // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n    // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n    // fixed-length and variable-length hashes do not collide)\n    if in_len != N {\n        sponge.absorb(1);\n    }\n    sponge.squeeze()\n}\n\n// The below fn reduces gates of a conditional poseidon2 hash by approx 3x (thank you ~* Giant Brain Dev @IlyasRidhuan *~ for the idea)\n// Why? Because when we call stdlib poseidon, we call absorb for each item. When absorbing is conditional, it seems the compiler does not know\n// what cache_size will be when calling absorb, so it assigns the permutation gates for /each i/ rather than /every 3rd i/, which is actually required.\n// The below code forces the compiler to:\n//  - absorb normally up to 2 times to set cache_size to 1\n//  - absorb in chunks of 3 to ensure perm. only happens every 3rd absorb\n//  - absorb normally up to 2 times to add any remaining values to the hash\n// In fixed len hashes, the compiler is able to tell that it will only need to perform the permutation every 3 absorbs.\n// NB: it also replaces unnecessary range checks (i < thing) with a bit check (&= i != thing), which alone reduces the gates of a var. hash by half.\n\n#[no_predicates]\nfn poseidon2_absorb_chunks<let N: u32>(\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n) -> Poseidon2Sponge {\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    // Even though shift is always 1 here, if we input in_len = 0 we get an underflow\n    // since we cannot isolate computation branches. The below is just to avoid that.\n    let shift = if in_len == 0 { 0 } else { 1 };\n    if in_len != 0 {\n        // cache_size = 0, init absorb\n        sponge.cache[0] = input[0];\n        sponge.cache_size = 1;\n        // shift = num elts already added to make cache_size 1 = 1 for a fresh sponge\n        // M = max_chunks = (N - 1 - (N - 1) % 3) / 3: (must be written as a fn of N to compile)\n        // max_remainder = (N - 1) % 3;\n        // max_chunks = (N - 1 - max_remainder) / 3;\n        sponge = poseidon2_absorb_chunks_loop::<N, (N - 1 - (N - 1) % 3) / 3>(\n            sponge,\n            input,\n            in_len,\n            variable,\n            shift,\n        );\n    }\n    sponge\n}\n\n// NB: If it's not required to check that the non-absorbed elts of 'input' are 0s, set skip_0_check=true\n#[no_predicates]\npub fn poseidon2_absorb_chunks_existing_sponge<let N: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    skip_0_check: bool,\n) -> Poseidon2Sponge {\n    let mut sponge = in_sponge;\n    // 'shift' is to account for already added inputs\n    let mut shift = 0;\n    // 'stop' is to avoid an underflow when inputting in_len = 0\n    let mut stop = false;\n    for i in 0..3 {\n        if shift == in_len {\n            stop = true;\n        }\n        if (sponge.cache_size != 1) & (!stop) {\n            sponge.absorb(input[i]);\n            shift += 1;\n        }\n    }\n    sponge = if stop {\n        sponge\n    } else {\n        // max_chunks = (N - (N % 3)) / 3;\n        poseidon2_absorb_chunks_loop::<N, (N - (N % 3)) / 3>(\n            sponge,\n            input,\n            in_len,\n            skip_0_check,\n            shift,\n        )\n    };\n    sponge\n}\n\n// The below is the loop to absorb elts into a poseidon sponge in chunks of 3\n// shift - the num of elts already absorbed to ensure the sponge's cache_size = 1\n// M - the max number of chunks required to absorb N things (must be comptime to compile)\n// NB: The 0 checks ('Found non-zero field...') are messy, but having a separate loop over N to check\n// for 0s costs 3N gates. Current approach is approx 2N gates.\n#[no_predicates]\nfn poseidon2_absorb_chunks_loop<let N: u32, let M: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n    shift: u32,\n) -> Poseidon2Sponge {\n    assert(in_len <= N, \"Given in_len to absorb is larger than the input array len\");\n    // When we have an existing sponge, we may have a shift of 0, and the final 'k+2' below = N\n    // The below avoids an overflow\n    let skip_last = 3 * M == N;\n    // Writing in_sponge: &mut does not compile\n    let mut sponge = in_sponge;\n    let mut should_add = true;\n    // The num of things left over after absorbing in 3s\n    let remainder = (in_len - shift) % 3;\n    // The num of chunks of 3 to absorb (maximum M)\n    let chunks = (in_len - shift - remainder) / 3;\n    for i in 0..M {\n        // Now we loop through cache size = 1 -> 3\n        should_add &= i != chunks;\n        // This is the index at the start of the chunk (for readability)\n        let k = 3 * i + shift;\n        if should_add {\n            // cache_size = 1, 2 => just assign\n            sponge.cache[1] = input[k];\n            sponge.cache[2] = input[k + 1];\n            // cache_size = 3 => duplex + perm\n            for j in 0..3 {\n                sponge.state[j] += sponge.cache[j];\n            }\n            sponge.state = std::hash::poseidon2_permutation(sponge.state, 4);\n            sponge.cache[0] = input[k + 2];\n            // cache_size is now 1 again, repeat loop\n        } else if (!variable) & (i != chunks) {\n            // if we are hashing a fixed len array which is a subarray, we check the remaining elts are 0\n            // NB: we don't check at i == chunks, because that chunk contains elts to be absorbed or checked below\n            let last_0 = if (i == M - 1) & (skip_last) {\n                0\n            } else {\n                input[k + 2]\n            };\n            let all_0 = (input[k] == 0) & (input[k + 1] == 0) & (last_0 == 0);\n            assert(all_0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    // we have 'remainder' num of items left to absorb\n    should_add = true;\n    // below is to avoid overflows (i.e. if inlen is close to N)\n    let mut should_check = !variable;\n    for i in 0..3 {\n        should_add &= i != remainder;\n        should_check &= in_len - remainder + i != N;\n        if should_add {\n            // we want to absorb the final 'remainder' items\n            sponge.absorb(input[in_len - remainder + i]);\n        } else if should_check {\n            assert(input[in_len - remainder + i] == 0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    sponge\n}\n\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let in_len = inputs.len() + 1;\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\n#[no_predicates]\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\n    let mut fields = [0; (N + 30) / 31];\n    let mut field_index = 0;\n    let mut current_field = [0; 31];\n    for i in 0..inputs.len() {\n        let index = i % 31;\n        current_field[index] = inputs[i];\n        if index == 30 {\n            fields[field_index] = field_from_bytes(current_field, false);\n            current_field = [0; 31];\n            field_index += 1;\n        }\n    }\n    if field_index != fields.len() {\n        fields[field_index] = field_from_bytes(current_field, false);\n    }\n    poseidon2_hash(fields)\n}\n\n#[test]\nfn poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let sub_chunk_hash = poseidon2_hash_subarray(input, in_len);\n    let fixed_len_hash = std::hash::poseidon2::Poseidon2::hash(fixed_input, fixed_input.len());\n    assert(sub_chunk_hash == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_matches_variable() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let variable_chunk_hash = poseidon2_cheaper_variable_hash(input, in_len);\n    let variable_len_hash = std::hash::poseidon2::Poseidon2::hash(input, in_len);\n    assert(variable_chunk_hash == variable_len_hash);\n}\n\n#[test]\nfn existing_sponge_poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    // absorb 250 of the 501 things\n    let empty_sponge = Poseidon2Sponge::new((in_len as Field) * TWO_POW_64);\n    let first_sponge = poseidon2_absorb_chunks_existing_sponge(empty_sponge, input, 250, true);\n    // now absorb the final 251 (since they are all 3s, im being lazy and not making a new array)\n    let mut final_sponge = poseidon2_absorb_chunks_existing_sponge(first_sponge, input, 251, true);\n    let fixed_len_hash = Poseidon2Sponge::hash(fixed_input, fixed_input.len());\n    assert(final_sponge.squeeze() == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_empty_inputs() {\n    let in_len = 0;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut constructed_empty_sponge = poseidon2_absorb_chunks(input, in_len, true);\n    let mut first_sponge =\n        poseidon2_absorb_chunks_existing_sponge(constructed_empty_sponge, input, in_len, true);\n    assert(first_sponge.squeeze() == constructed_empty_sponge.squeeze());\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n        25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\n        48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,\n        71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93,\n        94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,\n        113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130,\n        131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148,\n        149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = sha256::digest(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result =\n        compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(\n        AztecAddress::from_field(1),\n        EthAddress::from_field(3),\n        5,\n        2,\n        4,\n    );\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        ScopedL2ToL1Message {\n            message: L2ToL1Message { recipient: EthAddress::from_field(1), content: 2, counter: 0 },\n            contract_address: AztecAddress::from_field(3),\n        },\n        version,\n        chainId,\n    );\n\n    // The following value was generated by `l2_to_l1_message.test.ts`\n    let hash_from_typescript = 0x00c6155d69febb9d5039b374dd4f77bf57b7c881709aa524a18acaa0bd57476a;\n\n    assert_eq(hash, hash_from_typescript);\n}\n"
    },
    "280": {
      "path": "/Users/hka/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/noir-protocol-circuits/crates/types/src/indexed_tagging_secret.nr",
      "source": "use crate::traits::{Deserialize, Serialize, ToField};\nuse super::{address::aztec_address::AztecAddress, hash::poseidon2_hash};\nuse std::meta::derive;\n\npub global INDEXED_TAGGING_SECRET_LENGTH: u32 = 2;\n\n#[derive(Serialize, Deserialize)]\npub struct IndexedTaggingSecret {\n    app_tagging_secret: Field,\n    index: u32,\n}\n\nimpl IndexedTaggingSecret {\n    pub fn compute_tag(self, recipient: AztecAddress) -> Field {\n        poseidon2_hash(\n            [self.app_tagging_secret, recipient.to_field(), self.index as Field],\n        )\n    }\n}\n"
    },
    "289": {
      "path": "/Users/hka/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/noir-protocol-circuits/crates/types/src/merkle_tree/root.nr",
      "source": "use crate::{hash::merkle_hash, merkle_tree::merkle_tree::MerkleTree};\n\n// Calculate the Merkle tree root from the sibling path and leaf.\n//\n// The leaf is hashed with its sibling, and then the result is hashed\n// with the next sibling etc in the path. The last hash is the root.\n//\n// TODO(David/Someone): The cpp code is using a uint256, whereas its\n// TODO a bit simpler in Noir to just have a bit array.\n// TODO: I'd generally like to avoid u256 for algorithms like\n// this because it means we never even need to consider cases where\n// the index is greater than p.\npub fn root_from_sibling_path<let N: u32>(\n    leaf: Field,\n    leaf_index: Field,\n    sibling_path: [Field; N],\n) -> Field {\n    let mut node = leaf;\n    let indices: [u1; N] = leaf_index.to_le_bits();\n\n    for i in 0..N {\n        let (hash_left, hash_right) = if indices[i] == 1 {\n            (sibling_path[i], node)\n        } else {\n            (node, sibling_path[i])\n        };\n        node = merkle_hash(hash_left, hash_right);\n    }\n    node\n}\n\npub fn calculate_subtree_root<let N: u32>(leaves: [Field; N]) -> Field {\n    MerkleTree::new(leaves).get_root()\n}\n\n// These values are precomputed and we run tests to ensure that they\n// are correct. The values themselves were computed from the cpp code.\n//\n// Would be good if we could use width since the compute_subtree\n// algorithm uses depth.\npub fn calculate_empty_tree_root(depth: u32) -> Field {\n    if depth == 0 {\n        0\n    } else if depth == 1 {\n        0x0b63a53787021a4a962a452c2921b3663aff1ffd8d5510540f8e659e782956f1\n    } else if depth == 2 {\n        0x0e34ac2c09f45a503d2908bcb12f1cbae5fa4065759c88d501c097506a8b2290\n    } else if depth == 3 {\n        0x21f9172d72fdcdafc312eee05cf5092980dda821da5b760a9fb8dbdf607c8a20\n    } else if depth == 4 {\n        0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e\n    } else if depth == 5 {\n        0x120157cfaaa49ce3da30f8b47879114977c24b266d58b0ac18b325d878aafddf\n    } else if depth == 6 {\n        0x01c28fe1059ae0237b72334700697bdf465e03df03986fe05200cadeda66bd76\n    } else if depth == 7 {\n        0x2d78ed82f93b61ba718b17c2dfe5b52375b4d37cbbed6f1fc98b47614b0cf21b\n    } else if depth == 8 {\n        0x067243231eddf4222f3911defbba7705aff06ed45960b27f6f91319196ef97e1\n    } else if depth == 9 {\n        0x1849b85f3c693693e732dfc4577217acc18295193bede09ce8b97ad910310972\n    } else if depth == 10 {\n        0x2a775ea761d20435b31fa2c33ff07663e24542ffb9e7b293dfce3042eb104686\n    } else {\n        panic(f\"depth should be between 0 and 10\")\n    }\n}\n\n#[test]\nfn test_merkle_root_interop_test() {\n    // This is a test to ensure that we match the cpp implementation.\n    // You can grep for `TEST_F(root_rollup_tests, noir_interop_test)`\n    // to find the test that matches this.\n    let root = calculate_subtree_root([1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]);\n    assert(0x1a09d935ae110b4c861fcec8f9099ec30b4485022aeb3d3cf9d7168e38fdc231 == root);\n\n    let empty_root = calculate_subtree_root([0; 16]);\n    assert(0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e == empty_root);\n}\n\n#[test]\nfn test_empty_subroot() {\n    assert(calculate_empty_tree_root(0) == 0);\n\n    let expected_empty_root_2 = calculate_subtree_root([0; 2]);\n    assert(calculate_empty_tree_root(1) == expected_empty_root_2);\n\n    let expected_empty_root_4 = calculate_subtree_root([0; 4]);\n    assert(calculate_empty_tree_root(2) == expected_empty_root_4);\n\n    let expected_empty_root_8 = calculate_subtree_root([0; 8]);\n    assert(calculate_empty_tree_root(3) == expected_empty_root_8);\n\n    let expected_empty_root_16 = calculate_subtree_root([0; 16]);\n    assert(calculate_empty_tree_root(4) == expected_empty_root_16);\n\n    let expected_empty_root_32 = calculate_subtree_root([0; 32]);\n    assert(calculate_empty_tree_root(5) == expected_empty_root_32);\n\n    let expected_empty_root_64 = calculate_subtree_root([0; 64]);\n    assert(calculate_empty_tree_root(6) == expected_empty_root_64);\n\n    let expected_empty_root_128 = calculate_subtree_root([0; 128]);\n    assert(calculate_empty_tree_root(7) == expected_empty_root_128);\n\n    let expected_empty_root_256 = calculate_subtree_root([0; 256]);\n    assert(calculate_empty_tree_root(8) == expected_empty_root_256);\n\n    let expected_empty_root_512 = calculate_subtree_root([0; 512]);\n    assert(calculate_empty_tree_root(9) == expected_empty_root_512);\n\n    let expected_empty_root_1024 = calculate_subtree_root([0; 1024]);\n    assert(calculate_empty_tree_root(10) == expected_empty_root_1024);\n}\n"
    },
    "295": {
      "path": "/Users/hka/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/noir-protocol-circuits/crates/types/src/point.nr",
      "source": "pub use dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse crate::{hash::poseidon2_hash, traits::{Deserialize, Empty, Hash, Packable, Serialize}};\n\npub global POINT_LENGTH: u32 = 3;\n\nimpl Serialize<POINT_LENGTH> for Point {\n    fn serialize(self: Self) -> [Field; POINT_LENGTH] {\n        [self.x, self.y, self.is_infinite as Field]\n    }\n}\n\nimpl Hash for Point {\n    fn hash(self) -> Field {\n        poseidon2_hash(self.serialize())\n    }\n}\n\nimpl Empty for Point {\n    /// Note: Does not return a valid point on curve - instead represents an empty/\"unpopulated\" point struct (e.g.\n    /// empty/unpopulated value in an array of points).\n    fn empty() -> Self {\n        Point { x: 0, y: 0, is_infinite: false }\n    }\n}\n\nimpl Deserialize<POINT_LENGTH> for Point {\n    fn deserialize(serialized: [Field; POINT_LENGTH]) -> Point {\n        Point { x: serialized[0], y: serialized[1], is_infinite: serialized[2] as bool }\n    }\n}\n// TODO(#11356): use compact representation here.\nimpl Packable<POINT_LENGTH> for Point {\n    fn pack(self) -> [Field; POINT_LENGTH] {\n        self.serialize()\n    }\n\n    fn unpack(packed: [Field; POINT_LENGTH]) -> Self {\n        Self::deserialize(packed)\n    }\n}\n"
    },
    "296": {
      "path": "/Users/hka/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/noir-protocol-circuits/crates/types/src/poseidon2.nr",
      "source": "use crate::constants::TWO_POW_64;\n\n// NB: This is a clone of noir/noir-repo/noir_stdlib/src/hash/poseidon2.nr\n// It exists as we sometimes need to perform custom absorption, but the stdlib version\n// has a private absorb() method (it's also designed to just be a hasher)\n// Can be removed when standalone noir poseidon lib exists: See noir#6679\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2Sponge {\n    pub cache: [Field; 3],\n    pub state: [Field; 4],\n    pub cache_size: u32,\n    pub squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2Sponge {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2Sponge::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2Sponge {\n        let mut result =\n            Poseidon2Sponge { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = std::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    pub fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    pub fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let iv: Field = (in_len as Field) * TWO_POW_64;\n        let mut sponge = Poseidon2Sponge::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n"
    },
    "3": {
      "path": "std/array/mod.nr",
      "source": "use crate::cmp::{Eq, Ord};\nuse crate::convert::From;\nuse crate::runtime::is_unconstrained;\n\nmod check_shuffle;\nmod quicksort;\n\nimpl<T, let N: u32> [T; N] {\n    /// Returns the length of this array.\n    ///\n    /// ```noir\n    /// fn len(self) -> Field\n    /// ```\n    ///\n    /// example\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let array = [42, 42];\n    ///     assert(array.len() == 2);\n    /// }\n    /// ```\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Returns this array as a slice.\n    ///\n    /// ```noir\n    /// let array = [1, 2];\n    /// let slice = array.as_slice();\n    /// assert_eq(slice, &[1, 2]);\n    /// ```\n    #[builtin(as_slice)]\n    pub fn as_slice(self) -> [T] {}\n\n    /// Applies a function to each element of this array, returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.map(|a| a * 2);\n    /// assert_eq(b, [2, 4, 6]);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of the array, returning the final accumulated value. The first\n    /// parameter is the initial value.\n    ///\n    /// This is a left fold, so the given function will be applied to the accumulator and first element of\n    /// the array, then the second, and so on. For a given call the expected result would be equivalent to:\n    ///\n    /// ```rust\n    /// let a1 = [1];\n    /// let a2 = [1, 2];\n    /// let a3 = [1, 2, 3];\n    ///\n    /// let f = |a, b| a - b;\n    /// a1.fold(10, f); //=> f(10, 1)\n    /// a2.fold(10, f); //=> f(f(10, 1), 2)\n    /// a3.fold(10, f); //=> f(f(f(10, 1), 2), 3)\n    ///\n    /// assert_eq(a3.fold(10, f), 10 - 1 - 2 - 3);\n    /// ```\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    /// Same as fold, but uses the first element as the starting element.\n    ///\n    /// Requires the input array to be non-empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [1, 2, 3, 4];\n    ///     let reduced = arr.reduce(|a, b| a + b);\n    ///     assert(reduced == 10);\n    /// }\n    /// ```\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    /// Returns true if all the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 2];\n    ///     let all = arr.all(|a| a == 2);\n    ///     assert(all);\n    /// }\n    /// ```\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    /// Returns true if any of the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 5];\n    ///     let any = arr.any(|a| a == 5);\n    ///     assert(any);\n    /// }\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Ord + Eq,\n{\n    /// Returns a new sorted array. The original array remains untouched. Notice that this function will\n    /// only work for arrays of fields or integers, not for any arbitrary type. This is because the sorting\n    /// logic it uses internally is optimized specifically for these values. If you need a sort function to\n    /// sort any type, you should use the `sort_via` function.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32];\n    ///     let sorted = arr.sort();\n    ///     assert(sorted == [32, 42]);\n    /// }\n    /// ```\n    pub fn sort(self) -> Self {\n        self.sort_via(|a, b| a <= b)\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Eq,\n{\n    /// Returns a new sorted array by sorting it with a custom comparison function.\n    /// The original array remains untouched.\n    /// The ordering function must return true if the first argument should be sorted to be before the second argument or is equal to the second argument.\n    ///\n    /// Using this method with an operator like `<` that does not return `true` for equal values will result in an assertion failure for arrays with equal elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32]\n    ///     let sorted_ascending = arr.sort_via(|a, b| a <= b);\n    ///     assert(sorted_ascending == [32, 42]); // verifies\n    ///\n    ///     let sorted_descending = arr.sort_via(|a, b| a >= b);\n    ///     assert(sorted_descending == [32, 42]); // does not verify\n    /// }\n    /// ```\n    pub fn sort_via<Env>(self, ordering: fn[Env](T, T) -> bool) -> Self {\n        /// Safety: `sorted` array is checked to be:\n        /// a. a permutation of `input`'s elements\n        /// b. satisfying the predicate `ordering`\n        unsafe {\n            let sorted = quicksort::quicksort(self, ordering);\n\n            if !is_unconstrained() {\n                for i in 0..N - 1 {\n                    assert(\n                        ordering(sorted[i], sorted[i + 1]),\n                        \"Array has not been sorted correctly according to `ordering`.\",\n                    );\n                }\n                check_shuffle::check_shuffle(self, sorted);\n            }\n            sorted\n        }\n    }\n}\n\nimpl<let N: u32> [u8; N] {\n    /// Converts a byte array of type `[u8; N]` to a string. Note that this performs no UTF-8 validation -\n    /// the given array is interpreted as-is as a string.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let hi = [104, 105].as_str_unchecked();\n    ///     assert_eq(hi, \"hi\");\n    /// }\n    /// ```\n    #[builtin(array_as_str_unchecked)]\n    pub fn as_str_unchecked(self) -> str<N> {}\n}\n\nimpl<let N: u32> From<str<N>> for [u8; N] {\n    /// Returns an array of the string bytes.\n    fn from(s: str<N>) -> Self {\n        s.as_bytes()\n    }\n}\n\nmod test {\n    #[test]\n    fn map_empty() {\n        assert_eq([].map(|x| x + 1), []);\n    }\n}\n"
    },
    "305": {
      "path": "/Users/hka/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/noir-protocol-circuits/crates/types/src/public_keys.nr",
      "source": "use crate::{\n    address::public_keys_hash::PublicKeysHash,\n    constants::{\n        DEFAULT_IVPK_M_X, DEFAULT_IVPK_M_Y, DEFAULT_NPK_M_X, DEFAULT_NPK_M_Y, DEFAULT_OVPK_M_X,\n        DEFAULT_OVPK_M_Y, DEFAULT_TPK_M_X, DEFAULT_TPK_M_Y, GENERATOR_INDEX__PUBLIC_KEYS_HASH,\n    },\n    hash::poseidon2_hash_with_separator,\n    point::POINT_LENGTH,\n    traits::{Deserialize, Hash, Serialize},\n};\n\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse std::default::Default;\n\npub global PUBLIC_KEYS_LENGTH: u32 = 12;\n\npub struct PublicKeys {\n    pub npk_m: NpkM,\n    pub ivpk_m: IvpkM,\n    pub ovpk_m: OvpkM,\n    pub tpk_m: TpkM,\n}\n\npub trait ToPoint {\n    fn to_point(self) -> Point;\n}\n\npub struct NpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for NpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for NpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\n// Note: If we store npk_m_hash directly we can remove this trait implementation. See #8091\nimpl Hash for NpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\npub struct IvpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for IvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for IvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct OvpkM {\n    pub inner: Point,\n}\n\nimpl Hash for OvpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\nimpl ToPoint for OvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for OvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct TpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for TpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for TpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\nimpl Default for PublicKeys {\n    fn default() -> Self {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point { x: DEFAULT_NPK_M_X, y: DEFAULT_NPK_M_Y, is_infinite: false },\n            },\n            ivpk_m: IvpkM {\n                inner: Point { x: DEFAULT_IVPK_M_X, y: DEFAULT_IVPK_M_Y, is_infinite: false },\n            },\n            ovpk_m: OvpkM {\n                inner: Point { x: DEFAULT_OVPK_M_X, y: DEFAULT_OVPK_M_Y, is_infinite: false },\n            },\n            tpk_m: TpkM {\n                inner: Point { x: DEFAULT_TPK_M_X, y: DEFAULT_TPK_M_Y, is_infinite: false },\n            },\n        }\n    }\n}\n\nimpl Eq for PublicKeys {\n    fn eq(self, other: PublicKeys) -> bool {\n        (self.npk_m.inner == other.npk_m.inner)\n            & (self.ivpk_m.inner == other.ivpk_m.inner)\n            & (self.ovpk_m.inner == other.ovpk_m.inner)\n            & (self.tpk_m.inner == other.tpk_m.inner)\n    }\n}\n\nimpl PublicKeys {\n    pub fn hash(self) -> PublicKeysHash {\n        PublicKeysHash::from_field(poseidon2_hash_with_separator(\n            self.serialize(),\n            GENERATOR_INDEX__PUBLIC_KEYS_HASH as Field,\n        ))\n    }\n}\n\nimpl Serialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn serialize(self) -> [Field; PUBLIC_KEYS_LENGTH] {\n        [\n            self.npk_m.inner.x,\n            self.npk_m.inner.y,\n            self.npk_m.inner.is_infinite as Field,\n            self.ivpk_m.inner.x,\n            self.ivpk_m.inner.y,\n            self.ivpk_m.inner.is_infinite as Field,\n            self.ovpk_m.inner.x,\n            self.ovpk_m.inner.y,\n            self.ovpk_m.inner.is_infinite as Field,\n            self.tpk_m.inner.x,\n            self.tpk_m.inner.y,\n            self.tpk_m.inner.is_infinite as Field,\n        ]\n    }\n}\n\nimpl Deserialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn deserialize(serialized: [Field; PUBLIC_KEYS_LENGTH]) -> PublicKeys {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point {\n                    x: serialized[0],\n                    y: serialized[1],\n                    is_infinite: serialized[2] as bool,\n                },\n            },\n            ivpk_m: IvpkM {\n                inner: Point {\n                    x: serialized[3],\n                    y: serialized[4],\n                    is_infinite: serialized[5] as bool,\n                },\n            },\n            ovpk_m: OvpkM {\n                inner: Point {\n                    x: serialized[6],\n                    y: serialized[7],\n                    is_infinite: serialized[8] as bool,\n                },\n            },\n            tpk_m: TpkM {\n                inner: Point {\n                    x: serialized[9],\n                    y: serialized[10],\n                    is_infinite: serialized[11] as bool,\n                },\n            },\n        }\n    }\n}\n\npub struct AddressPoint {\n    pub inner: Point,\n}\n\nimpl ToPoint for AddressPoint {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\n#[test]\nunconstrained fn compute_public_keys_hash() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let actual = keys.hash();\n    let expected_public_keys_hash =\n        0x0fecd9a32db731fec1fded1b9ff957a1625c069245a3613a2538bd527068b0ad;\n\n    assert(actual.to_field() == expected_public_keys_hash);\n}\n\n#[test]\nunconstrained fn compute_default_hash() {\n    let keys = PublicKeys::default();\n\n    let actual = keys.hash();\n    let test_data_default_hash = 0x1d3bf1fb93ae0e9cda83b203dd91c3bfb492a9aecf30ec90e1057eced0f0e62d;\n\n    assert(actual.to_field() == test_data_default_hash);\n}\n\n#[test]\nunconstrained fn test_public_keys_serialization() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let serialized = keys.serialize();\n    let deserialized = PublicKeys::deserialize(serialized);\n\n    assert_eq(keys.npk_m.inner.x, deserialized.npk_m.inner.x);\n    assert_eq(keys.npk_m.inner.y, deserialized.npk_m.inner.y);\n    assert_eq(keys.ivpk_m.inner.x, deserialized.ivpk_m.inner.x);\n    assert_eq(keys.ivpk_m.inner.y, deserialized.ivpk_m.inner.y);\n    assert_eq(keys.ovpk_m.inner.x, deserialized.ovpk_m.inner.x);\n    assert_eq(keys.ovpk_m.inner.y, deserialized.ovpk_m.inner.y);\n    assert_eq(keys.tpk_m.inner.x, deserialized.tpk_m.inner.x);\n    assert_eq(keys.tpk_m.inner.y, deserialized.tpk_m.inner.y);\n}\n"
    },
    "308": {
      "path": "/Users/hka/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/noir-protocol-circuits/crates/types/src/storage/map.nr",
      "source": "use crate::{hash::poseidon2_hash, traits::ToField};\n\npub fn derive_storage_slot_in_map<K>(storage_slot: Field, key: K) -> Field\nwhere\n    K: ToField,\n{\n    poseidon2_hash([storage_slot, key.to_field()])\n}\n\nmod test {\n    use crate::{address::AztecAddress, storage::map::derive_storage_slot_in_map, traits::FromField};\n\n    #[test]\n    fn test_derive_storage_slot_in_map_matches_typescript() {\n        let map_slot = 0x132258fb6962c4387ba659d9556521102d227549a386d39f0b22d1890d59c2b5;\n        let key = AztecAddress::from_field(\n            0x302dbc2f9b50a73283d5fb2f35bc01eae8935615817a0b4219a057b2ba8a5a3f,\n        );\n\n        let slot = derive_storage_slot_in_map(map_slot, key);\n\n        // The following value was generated by `map_slot.test.ts`\n        let slot_from_typescript =\n            0x15b9fe39449affd8b377461263e9d2b610b9ad40580553500b4e41d9cbd887ac;\n\n        assert_eq(slot, slot_from_typescript);\n    }\n}\n"
    },
    "321": {
      "path": "/Users/hka/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr",
      "source": "use crate::meta::{derive_deserialize, derive_packable, derive_serialize};\nuse crate::utils::field::field_from_bytes;\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic\n// if a value can actually be zero. In a future refactor, we can\n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\npub trait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field {\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl Empty for u1 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u8 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u32 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u64 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for U128 {\n    fn empty() -> Self {\n        U128::from_integer(0)\n    }\n}\n\npub fn is_empty<T>(item: T) -> bool\nwhere\n    T: Empty + Eq,\n{\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, let N: u32>(array: [T; N]) -> bool\nwhere\n    T: Empty + Eq,\n{\n    array.all(|elem| is_empty(elem))\n}\n\npub trait Hash {\n    fn hash(self) -> Field;\n}\n\npub trait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for bool {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u1 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u8 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u32 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u64 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for U128 {\n    fn to_field(self) -> Field {\n        self.to_integer()\n    }\n}\nimpl<let N: u32> ToField for str<N> {\n    fn to_field(self) -> Field {\n        assert(N < 32, \"String doesn't fit in a field, consider using Serialize instead\");\n        field_from_bytes(self.as_bytes(), true)\n    }\n}\n\npub trait FromField {\n    fn from_field(value: Field) -> Self;\n}\n\nimpl FromField for Field {\n    fn from_field(value: Field) -> Self {\n        value\n    }\n}\n\nimpl FromField for bool {\n    fn from_field(value: Field) -> Self {\n        value as bool\n    }\n}\nimpl FromField for u1 {\n    fn from_field(value: Field) -> Self {\n        value as u1\n    }\n}\nimpl FromField for u8 {\n    fn from_field(value: Field) -> Self {\n        value as u8\n    }\n}\nimpl FromField for u32 {\n    fn from_field(value: Field) -> Self {\n        value as u32\n    }\n}\nimpl FromField for u64 {\n    fn from_field(value: Field) -> Self {\n        value as u64\n    }\n}\nimpl FromField for U128 {\n    fn from_field(value: Field) -> Self {\n        U128::from_integer(value)\n    }\n}\n\n// docs:start:serialize\n/// Trait for serializing Noir types into arrays of Fields.\n///\n/// An implementation of the Serialize trait has to follow Noir's intrinsic serialization (each member of a struct\n/// converted directly into one or more Fields without any packing or compression). This trait (and Deserialize) are\n/// typically used to communicate between Noir and TypeScript (via oracles and function arguments).\n///\n/// # On Following Noir's Intrinsic Serialization\n/// When calling a Noir function from TypeScript (TS), first the function arguments are serialized into an array\n/// of fields. This array is then included in the initial witness. Noir's intrinsic serialization is then used\n/// to deserialize the arguments from the witness. When the same Noir function is called from Noir this Serialize trait\n/// is used instead of the serialization in TS. For this reason we need to have a match between TS serialization,\n/// Noir's intrinsic serialization and the implementation of this trait. If there is a mismatch, the function calls\n/// fail with an arguments hash mismatch error message.\n///\n/// # Type Parameters\n/// * `N` - The length of the output Field array, known at compile time\n///\n/// # Example\n/// ```\n/// impl<let N: u32> Serialize<N> for str<N> {\n///     fn serialize(self) -> [Field; N] {\n///         let bytes = self.as_bytes();\n///         let mut fields = [0; N];\n///         for i in 0..bytes.len() {\n///             fields[i] = bytes[i] as Field;  // Each byte gets its own Field\n///         }\n///         fields\n///     }\n/// }\n/// ```\n#[derive_via(derive_serialize)]\npub trait Serialize<let N: u32> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\nimpl<let N: u32> Serialize<N> for str<N> {\n    fn serialize(self) -> [Field; N] {\n        let bytes = self.as_bytes();\n        let mut fields = [0; N];\n        for i in 0..bytes.len() {\n            fields[i] = bytes[i] as Field;\n        }\n        fields\n    }\n}\n\n// docs:start:deserialize\n/// Trait for deserializing Noir types from arrays of Fields.\n///\n/// An implementation of the Deserialize trait has to follow Noir's intrinsic serialization (each member of a struct\n/// converted directly into one or more Fields without any packing or compression). This trait is typically used when\n/// deserializing return values from function calls in Noir. Since the same function could be called from TypeScript\n/// (TS), in which case the TS deserialization would get used, we need to have a match between the 2.\n///\n/// # Type Parameters\n/// * `N` - The length of the input Field array, known at compile time\n///\n/// # Example\n/// ```\n/// impl<let N: u32> Deserialize<N> for str<N> {\n///     fn deserialize(fields: [Field; N]) -> Self {\n///         str<N>::from(fields.map(|value| value as u8))\n///     }\n/// }\n/// ```\n#[derive_via(derive_deserialize)]\npub trait Deserialize<let N: u32> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n\nimpl<let N: u32> Deserialize<N> for str<N> {\n    fn deserialize(fields: [Field; N]) -> Self {\n        str<N>::from(fields.map(|value| value as u8))\n    }\n}\n\n/// Trait for efficiently packing and unpacking Noir types into and from arrays of Fields.\n///\n/// The `Packable` trait allows types to be serialized and deserialized with a focus on minimizing the size of\n/// the resulting Field array. This trait is used when storage efficiency is critical (e.g. when storing data\n/// in the contract's public storage).\n///\n/// # Type Parameters\n/// * `N` - The length of the Field array, known at compile time.\n#[derive_via(derive_packable)]\npub trait Packable<let N: u32> {\n    /// Packs the current value into a compact array of `Field` elements.\n    fn pack(self) -> [Field; N];\n\n    /// Unpacks a compact array of `Field` elements into the original value.\n    fn unpack(fields: [Field; N]) -> Self;\n}\n"
    },
    "325": {
      "path": "/Users/hka/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/noir-protocol-circuits/crates/types/src/type_packing.nr",
      "source": "use crate::traits::{Packable, ToField};\n\nglobal BOOL_PACKED_LEN: u32 = 1;\nglobal U8_PACKED_LEN: u32 = 1;\nglobal U16_PACKED_LEN: u32 = 1;\nglobal U32_PACKED_LEN: u32 = 1;\nglobal U64_PACKED_LEN: u32 = 1;\nglobal U128_PACKED_LEN: u32 = 1;\nglobal FIELD_PACKED_LEN: u32 = 1;\nglobal I8_PACKED_LEN: u32 = 1;\nglobal I16_PACKED_LEN: u32 = 1;\nglobal I32_PACKED_LEN: u32 = 1;\nglobal I64_PACKED_LEN: u32 = 1;\n\nimpl Packable<BOOL_PACKED_LEN> for bool {\n    fn pack(self) -> [Field; BOOL_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; BOOL_PACKED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Packable<U8_PACKED_LEN> for u8 {\n    fn pack(self) -> [Field; U8_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U8_PACKED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Packable<U16_PACKED_LEN> for u16 {\n    fn pack(self) -> [Field; U16_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U16_PACKED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Packable<U32_PACKED_LEN> for u32 {\n    fn pack(self) -> [Field; U32_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U32_PACKED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Packable<U64_PACKED_LEN> for u64 {\n    fn pack(self) -> [Field; U64_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U64_PACKED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Packable<U128_PACKED_LEN> for U128 {\n    fn pack(self) -> [Field; U128_PACKED_LEN] {\n        [self.to_field()]\n    }\n\n    fn unpack(fields: [Field; U128_PACKED_LEN]) -> Self {\n        U128::from_integer(fields[0])\n    }\n}\n\nimpl Packable<FIELD_PACKED_LEN> for Field {\n    fn pack(self) -> [Field; FIELD_PACKED_LEN] {\n        [self]\n    }\n\n    fn unpack(fields: [Field; FIELD_PACKED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Packable<I8_PACKED_LEN> for i8 {\n    fn pack(self) -> [Field; I8_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I8_PACKED_LEN]) -> Self {\n        fields[0] as i8\n    }\n}\n\nimpl Packable<I16_PACKED_LEN> for i16 {\n    fn pack(self) -> [Field; I16_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I16_PACKED_LEN]) -> Self {\n        fields[0] as i16\n    }\n}\n\nimpl Packable<I32_PACKED_LEN> for i32 {\n    fn pack(self) -> [Field; I32_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I32_PACKED_LEN]) -> Self {\n        fields[0] as i32\n    }\n}\n\nimpl Packable<I64_PACKED_LEN> for i64 {\n    fn pack(self) -> [Field; I64_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I64_PACKED_LEN]) -> Self {\n        fields[0] as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Packable<N * M> for [T; N]\nwhere\n    T: Packable<M>,\n{\n    fn pack(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].pack();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n\n    fn unpack(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Packable::unpack, result)\n    }\n}\n\n#[test]\nfn test_u16_packing() {\n    let a: u16 = 10;\n    assert_eq(a, u16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i8_packing() {\n    let a: i8 = -10;\n    assert_eq(a, i8::unpack(a.pack()));\n}\n\n#[test]\nfn test_i16_packing() {\n    let a: i16 = -10;\n    assert_eq(a, i16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i32_packing() {\n    let a: i32 = -10;\n    assert_eq(a, i32::unpack(a.pack()));\n}\n\n#[test]\nfn test_i64_packing() {\n    let a: i64 = -10;\n    assert_eq(a, i64::unpack(a.pack()));\n}\n"
    },
    "326": {
      "path": "/Users/hka/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr",
      "source": "use crate::traits::{Deserialize, Serialize};\n\nglobal BOOL_SERIALIZED_LEN: u32 = 1;\nglobal U8_SERIALIZED_LEN: u32 = 1;\nglobal U16_SERIALIZED_LEN: u32 = 1;\nglobal U32_SERIALIZED_LEN: u32 = 1;\nglobal U64_SERIALIZED_LEN: u32 = 1;\nglobal U128_SERIALIZED_LEN: u32 = 2;\nglobal FIELD_SERIALIZED_LEN: u32 = 1;\nglobal I8_SERIALIZED_LEN: u32 = 1;\nglobal I16_SERIALIZED_LEN: u32 = 1;\nglobal I32_SERIALIZED_LEN: u32 = 1;\nglobal I64_SERIALIZED_LEN: u32 = 1;\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<U16_SERIALIZED_LEN> for u16 {\n    fn serialize(self) -> [Field; U16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U16_SERIALIZED_LEN> for u16 {\n    fn deserialize(fields: [Field; U16_SERIALIZED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U64_SERIALIZED_LEN> for u64 {\n    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U64_SERIALIZED_LEN> for u64 {\n    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize<U128_SERIALIZED_LEN> for U128 {\n    fn serialize(self) -> [Field; U128_SERIALIZED_LEN] {\n        // We use little-endian ordering to match the order in which U128 defines its limbs.\n        // This is necessary because of how Noir handles serialization:\n        // - When calling a contract function from TypeScript, the serialization in encoder.ts gets used and then Noir\n        //   deserializes using its intrinsic serialization logic (based on the limb order in the struct).\n        // - When calling a contract function from another function, the `serialize` method is invoked on the type\n        //   first.\n        // For this reason if we didn't use the ordering of U128 limbs here and in encoder.ts we would get an arguments\n        // hash mismatch.\n        // The below warning is due to visibility in noir stdlib.\n        [self.lo, self.hi]\n    }\n}\n\nimpl Deserialize<U128_SERIALIZED_LEN> for U128 {\n    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {\n        U128::from_u64s_le(fields[0] as u64, fields[1] as u64)\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; FIELD_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Serialize<I8_SERIALIZED_LEN> for i8 {\n    fn serialize(self) -> [Field; I8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I8_SERIALIZED_LEN> for i8 {\n    fn deserialize(fields: [Field; I8_SERIALIZED_LEN]) -> Self {\n        fields[0] as i8\n    }\n}\n\nimpl Serialize<I16_SERIALIZED_LEN> for i16 {\n    fn serialize(self) -> [Field; I16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I16_SERIALIZED_LEN> for i16 {\n    fn deserialize(fields: [Field; I16_SERIALIZED_LEN]) -> Self {\n        fields[0] as i16\n    }\n}\n\nimpl Serialize<I32_SERIALIZED_LEN> for i32 {\n    fn serialize(self) -> [Field; I32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I32_SERIALIZED_LEN> for i32 {\n    fn deserialize(fields: [Field; I32_SERIALIZED_LEN]) -> Self {\n        fields[0] as i32\n    }\n}\n\nimpl Serialize<I64_SERIALIZED_LEN> for i64 {\n    fn serialize(self) -> [Field; I64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I64_SERIALIZED_LEN> for i64 {\n    fn deserialize(fields: [Field; I64_SERIALIZED_LEN]) -> Self {\n        fields[0] as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Serialize<N * M> for [T; N]\nwhere\n    T: Serialize<M>,\n{\n    fn serialize(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].serialize();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Deserialize<N * M> for [T; N]\nwhere\n    T: Deserialize<M>,\n{\n    fn deserialize(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Deserialize::deserialize, result)\n    }\n}\n\n#[test]\nfn test_u16_serialization() {\n    let a: u16 = 10;\n    assert_eq(a, u16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i8_serialization() {\n    let a: i8 = -10;\n    assert_eq(a, i8::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i16_serialization() {\n    let a: i16 = -10;\n    assert_eq(a, i16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i32_serialization() {\n    let a: i32 = -10;\n    assert_eq(a, i32::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i64_serialization() {\n    let a: i64 = -10;\n    assert_eq(a, i64::deserialize(a.serialize()));\n}\n"
    },
    "342": {
      "path": "/Users/hka/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/noir-protocol-circuits/crates/types/src/utils/arrays.nr",
      "source": "pub mod assert_array_appended;\npub mod assert_array_prepended;\npub mod assert_combined_array;\npub mod assert_combined_transformed_array;\npub mod assert_exposed_sorted_transformed_value_array;\npub mod assert_sorted_array;\npub mod assert_sorted_transformed_value_array;\npub mod assert_split_sorted_transformed_value_arrays;\npub mod assert_split_transformed_value_arrays;\npub mod get_sorted_result;\npub mod get_sorted_tuple;\npub mod sort_by;\npub mod sort_by_counter;\n\n// Re-exports.\npub use assert_array_appended::{\n    assert_array_appended, assert_array_appended_and_scoped, assert_array_appended_reversed,\n    assert_array_appended_scoped,\n};\npub use assert_array_prepended::assert_array_prepended;\npub use assert_combined_array::{assert_combined_array, combine_arrays};\npub use assert_combined_transformed_array::{\n    assert_combined_transformed_array, combine_and_transform_arrays,\n};\npub use assert_exposed_sorted_transformed_value_array::{\n    assert_exposed_sorted_transformed_value_array,\n    get_order_hints::{get_order_hints_asc, get_order_hints_desc, OrderHint},\n};\npub use assert_sorted_array::assert_sorted_array;\npub use assert_sorted_transformed_value_array::{\n    assert_sorted_transformed_value_array, assert_sorted_transformed_value_array_capped_size,\n};\npub use assert_split_sorted_transformed_value_arrays::{\n    assert_split_sorted_transformed_value_arrays_asc,\n    assert_split_sorted_transformed_value_arrays_desc,\n    get_split_order_hints::{get_split_order_hints_asc, get_split_order_hints_desc, SplitOrderHints},\n};\npub use assert_split_transformed_value_arrays::assert_split_transformed_value_arrays;\npub use get_sorted_result::{get_sorted_result, SortedResult};\npub use sort_by_counter::{sort_by_counter_asc, sort_by_counter_desc};\n\nuse crate::traits::{Empty, is_empty};\n\npub fn subarray<let SRC_LEN: u32, let DST_LEN: u32>(\n    src: [Field; SRC_LEN],\n    offset: u32,\n) -> [Field; DST_LEN] {\n    assert(offset + DST_LEN <= SRC_LEN, \"offset too large\");\n\n    let mut dst: [Field; DST_LEN] = std::mem::zeroed();\n    for i in 0..DST_LEN {\n        dst[i] = src[i + offset];\n    }\n\n    dst\n}\n\n// Helper function to convert a validated array to BoundedVec.\n// Important: Only use it for validated arrays: validate_array(array) should be true.\npub unconstrained fn array_to_bounded_vec<T, let N: u32>(array: [T; N]) -> BoundedVec<T, N>\nwhere\n    T: Empty + Eq,\n{\n    let len = array_length(array);\n    BoundedVec::from_parts_unchecked(array, len)\n}\n\n// Helper function to find the index of the first element in an array that satisfies a given predicate. If the element\n// is not found, the function returns N as the index.\npub unconstrained fn find_index_hint<T, let N: u32, Env>(\n    array: [T; N],\n    find: fn[Env](T) -> bool,\n) -> u32 {\n    let mut index = N;\n    for i in 0..N {\n        // We check `index == N` to ensure that we only update the index if we haven't found a match yet.\n        if (index == N) & find(array[i]) {\n            index = i;\n        }\n    }\n    index\n}\n\n// Routine which validates that all zero values of an array form a contiguous region at the end, i.e.,\n// of the form: [*,*,*...,0,0,0,0] where any * is non-zero. Note that a full array of non-zero values is\n// valid.\npub fn validate_array<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let mut seen_empty = false;\n    let mut length = 0;\n    for i in 0..N {\n        if is_empty(array[i]) {\n            seen_empty = true;\n        } else {\n            assert(seen_empty == false, \"invalid array\");\n            length += 1;\n        }\n    }\n    length\n}\n\n// Helper function to count the number of non-empty elements in a validated array.\n// Important: Only use it for validated arrays where validate_array(array) returns true,\n// which ensures that:\n// 1. All elements before the first empty element are non-empty\n// 2. All elements after and including the first empty element are empty\n// 3. The array forms a contiguous sequence of non-empty elements followed by empty elements\npub fn array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    // We get the length by checking the index of the first empty element.\n\n    /// Safety: This is safe because we have validated the array (see function doc above) and the emptiness\n    /// of the element and non-emptiness of the previous element is checked below.\n    let length = unsafe { find_index_hint(array, |elem: T| is_empty(elem)) };\n    if length != 0 {\n        assert(!is_empty(array[length - 1]));\n    }\n    if length != N {\n        assert(is_empty(array[length]));\n    }\n    length\n}\n\npub fn array_concat<T, let N: u32, let M: u32>(array1: [T; N], array2: [T; M]) -> [T; N + M] {\n    let mut result = [array1[0]; N + M];\n    for i in 1..N {\n        result[i] = array1[i];\n    }\n    for i in 0..M {\n        result[i + N] = array2[i];\n    }\n    result\n}\n/// This function assumes that `array1` and `array2` contain no more than N non-empty elements between them,\n/// if this is not the case then elements from the end of `array2` will be dropped.\npub fn array_merge<T, let N: u32>(array1: [T; N], array2: [T; N]) -> [T; N]\nwhere\n    T: Empty + Eq,\n{\n    /// Safety: we constrain this array below\n    let result = unsafe { array_merge_helper(array1, array2) };\n    // We assume arrays have been validated. The only use cases so far are with previously validated arrays.\n    let array1_len = array_length(array1);\n    let mut add_from_left = true;\n    for i in 0..N {\n        add_from_left &= i != array1_len;\n        if add_from_left {\n            assert_eq(result[i], array1[i]);\n        } else {\n            assert_eq(result[i], array2[i - array1_len]);\n        }\n    }\n    result\n}\n\nunconstrained fn array_merge_helper<T, let N: u32>(array1: [T; N], array2: [T; N]) -> [T; N]\nwhere\n    T: Empty + Eq,\n{\n    let mut result: [T; N] = [T::empty(); N];\n    let mut i = 0;\n    for elem in array1 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    for elem in array2 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    result\n}\n\n// Helper fn to create a subarray from a given array\npub fn array_splice<T, let N: u32, let M: u32>(array: [T; N], offset: u32) -> [T; M]\nwhere\n    T: Empty,\n{\n    assert(M + offset <= N, \"Subarray length larger than array length\");\n    let mut result: [T; M] = [T::empty(); M];\n    for i in 0..M {\n        result[i] = array[offset + i];\n    }\n    result\n}\n\npub fn check_permutation<T, let N: u32>(\n    original_array: [T; N],\n    permuted_array: [T; N],\n    original_indexes: [u32; N],\n)\nwhere\n    T: Eq + Empty,\n{\n    let mut seen_value = [false; N];\n    for i in 0..N {\n        let index = original_indexes[i];\n        let original_value = original_array[index];\n        assert(permuted_array[i].eq(original_value), \"Invalid index\");\n        assert(!seen_value[index], \"Duplicated index\");\n        seen_value[index] = true;\n    }\n}\n\n#[test]\nfn smoke_validate_array() {\n    let valid_array: [Field; 0] = [];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [0];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [3];\n    assert(validate_array(valid_array) == 1);\n\n    let valid_array = [1, 2, 3];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0, 0];\n    assert(validate_array(valid_array) == 3);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case0() {\n    let invalid_array = [0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case1() {\n    let invalid_array = [1, 0, 0, 1, 0];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case2() {\n    let invalid_array = [0, 0, 0, 0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test]\nfn test_empty_array_length() {\n    assert_eq(array_length([0]), 0);\n    assert_eq(array_length([0, 0, 0]), 0);\n}\n\n#[test]\nfn test_array_length() {\n    assert_eq(array_length([123]), 1);\n    assert_eq(array_length([123, 0, 0]), 1);\n    assert_eq(array_length([123, 456]), 2);\n    assert_eq(array_length([123, 456, 0]), 2);\n}\n\n#[test]\nfn test_array_length_invalid_arrays() {\n    // Result can be misleading (but correct) for invalid arrays.\n    assert_eq(array_length([0, 0, 123]), 0);\n    assert_eq(array_length([0, 123, 0]), 0);\n    assert_eq(array_length([0, 123, 456]), 0);\n    assert_eq(array_length([123, 0, 456]), 1);\n}\n\n#[test]\nunconstrained fn find_index_greater_than_min() {\n    let values = [10, 20, 30, 40];\n    let min = 22;\n    let index = find_index_hint(values, |v: Field| min.lt(v));\n    assert_eq(index, 2);\n}\n\n#[test]\nunconstrained fn find_index_not_found() {\n    let values = [10, 20, 30, 40];\n    let min = 100;\n    let index = find_index_hint(values, |v: Field| min.lt(v));\n    assert_eq(index, 4);\n}\n\n#[test]\nfn test_array_concat() {\n    let array0 = [1, 2, 3];\n    let array1 = [4, 5];\n    let concatenated = array_concat(array0, array1);\n    assert_eq(concatenated, [1, 2, 3, 4, 5]);\n}\n\n#[test]\nfn check_permutation_basic_test() {\n    let original_array = [1, 2, 3];\n    let permuted_array = [3, 1, 2];\n    let indexes = [2, 0, 1];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Duplicated index\")]\nfn check_permutation_duplicated_index() {\n    let original_array = [0, 1, 0];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 0];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Invalid index\")]\nfn check_permutation_invalid_index() {\n    let original_array = [0, 1, 2];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 2];\n    check_permutation(original_array, permuted_array, indexes);\n}\n"
    },
    "343": {
      "path": "/Users/hka/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/noir-protocol-circuits/crates/types/src/utils/field.nr",
      "source": "pub fn field_from_bytes<let N: u32>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// Convert a 32 byte array to a field element by truncating the final byte\npub fn field_from_bytes_32_trunc(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..15 {\n        // covers bytes 16..30 (31 is truncated and ignored)\n        low = low + (bytes32[15 + 15 - i] as Field) * v;\n        v = v * 256;\n        // covers bytes 0..14\n        high = high + (bytes32[14 - i] as Field) * v;\n    }\n    // covers byte 15\n    low = low + (bytes32[15] as Field) * v;\n\n    low + high * v\n}\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    lhs.lt(rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    rhs.lt(lhs)\n}\n\npub fn min(f1: Field, f2: Field) -> Field {\n    if f1.lt(f2) {\n        f1\n    } else {\n        f2\n    }\n}\n\n#[test]\nunconstrained fn bytes_field_test() {\n    // Tests correctness of field_from_bytes_32_trunc against existing methods\n    // Bytes representing 0x543e0a6642ffeb8039296861765a53407bba62bd1c97ca43374de950bbe0a7\n    let inputs = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28,\n        151, 202, 67, 55, 77, 233, 80, 187, 224, 167,\n    ];\n    let field = field_from_bytes(inputs, true);\n    let return_bytes: [u8; 31] = field.to_be_bytes();\n    assert_eq(inputs, return_bytes);\n    // 32 bytes - we remove the final byte, and check it matches the field\n    let inputs2 = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28,\n        151, 202, 67, 55, 77, 233, 80, 187, 224, 167, 158,\n    ];\n    let field2 = field_from_bytes_32_trunc(inputs2);\n    let return_bytes2: [u8; 31] = field.to_be_bytes();\n\n    assert_eq(return_bytes2, return_bytes);\n    assert_eq(field2, field);\n}\n\n#[test]\nunconstrained fn max_field_test() {\n    // Tests the hardcoded value in constants.nr vs underlying modulus\n    // NB: We can't use 0-1 in constants.nr as it will be transpiled incorrectly to ts and sol constants files\n    let max_value = crate::constants::MAX_FIELD_VALUE;\n    assert_eq(max_value, 0 - 1);\n    // modulus == 0 is tested elsewhere, so below is more of a sanity check\n    let max_bytes: [u8; 32] = max_value.to_be_bytes();\n    let mod_bytes = std::field::modulus_be_bytes();\n    for i in 0..31 {\n        assert_eq(max_bytes[i], mod_bytes[i]);\n    }\n    assert_eq(max_bytes[31], mod_bytes[31] - 1);\n}\n"
    },
    "345": {
      "path": "/Users/hka/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr",
      "source": "pub struct Reader<let N: u32> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<let N: u32> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() as bool\n    }\n\n    pub fn read_array<let K: u32>(&mut self) -> [Field; K] {\n        let mut result = [0; K];\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array());\n        result\n    }\n\n    pub fn read_struct_array<T, let K: u32, let C: u32>(\n        &mut self,\n        deserialise: fn([Field; K]) -> T,\n        mut result: [T; C],\n    ) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n"
    },
    "350": {
      "path": "/Users/hka/nargo/github.com/noir-lang/ec/v0.1.2/src/lib.nr",
      "source": "// Elliptic curve implementation\n// Overview\n// ========\n// The following three elliptic curve representations are admissible:\npub mod tecurve; // Twisted Edwards curves\npub mod swcurve; // Elliptic curves in Short Weierstrass form\npub mod montcurve; // Montgomery curves\npub mod consts; // Commonly used curve presets\n//\n// Note that Twisted Edwards and Montgomery curves are (birationally) equivalent, so that\n// they may be freely converted between one another, whereas Short Weierstrass curves are\n// more general. Diagramatically:\n//\n// tecurve == montcurve `subset` swcurve\n//\n// Each module is further divided into two submodules, 'affine' and 'curvegroup', depending\n// on the preferred coordinate representation. Affine coordinates are none other than the usual\n// two-dimensional Cartesian coordinates used in the definitions of these curves, whereas\n// 'CurveGroup' coordinates (terminology borrowed from Arkworks, whose conventions we try\n// to follow) are special coordinate systems with respect to which the group operations may be\n// implemented more efficiently, usually by means of an appropriate choice of projective coordinates.\n//\n// In each of these submodules, there is a Point struct and a Curve struct, the former\n// representing a point in the coordinate system and the latter a curve configuration.\n//\n// Points\n// ======\n// Points may be instantiated using the associated function `new`, which takes coordinates\n// as its arguments. For instance,\n//\n// `let p = swcurve::Point::new(1,1);`\n//\n// The additive identity may be constructed by a call to the associated function `zero` of no\n// arguments:\n//\n// `let zero = swcurve::Point::zero();`\n//\n// Points may be tested for equality by calling the method `eq`:\n//\n// `let pred = p.eq(zero);`\n//\n// There is also the method `is_zero` to explicitly check whether a point is the additive identity:\n//\n// `constrain pred == p.is_zero();`\n//\n// Points may be negated by calling the `negate` method and converted to CurveGroup (or affine)\n// coordinates by calling the `into_group` (resp. `into_affine`) method on them. Finally,\n// Points may be freely mapped between their respective Twisted Edwards and Montgomery\n// representations by calling the `into_montcurve` or `into_tecurve` methods. For mappings\n// between Twisted Edwards/Montgomery curves and Short Weierstrass curves, see the Curve section\n// below, as the underlying mappings are those of curves rather than ambient spaces.\n// As a rule, Points in affine (or CurveGroup) coordinates are mapped to Points in affine\n// (resp. CurveGroup) coordinates.\n//\n// Curves\n// ======\n// A curve configuration (Curve) is completely determined by the Field coefficients of its defining\n// equation (a and b in the case of swcurve, a and d in the case of tecurve, and j and k in\n// the case of montcurve) together with a generator (`gen`) in the corresponding coordinate system.\n// For example, the Baby Jubjub curve configuration as defined in ERC-2494 may be instantiated as a Twisted\n// Edwards curve in affine coordinates as follows:\n//\n// `let bjj_affine = tecurve::Curve::new(168700, 168696, tecurve::Point::new(995203441582195749578291179787384436505546430278305826713579947235728471134,5472060717959818805561601436314318772137091100104008585924551046643952123905));`\n//\n// The `contains` method may be used to check whether a Point lies on a given curve:\n//\n// `constrain bjj_affine.contains(tecurve::Point::zero());`\n//\n// The elliptic curve group's addition operation is exposed as the `add` method, e.g.\n//\n// `let p = bjj_affine.add(bjj_affine.gen, bjj_affine.gen);`\n//\n// subtraction as the `subtract` method, e.g.\n//\n// `constrain tecurve::Point::zero().eq(bjj_affine.subtract(bjj_affine.gen, bjj_affine.gen));`\n//\n// scalar multiplication as the `mul` method, where the scalar is assumed to be a Field* element, e.g.\n//\n// `constrain tecurve::Point::zero().eq(bjj_affine.mul(2, tecurve::Point::zero());`\n//\n// There is a scalar multiplication method (`bit_mul`) provided where the scalar input is expected to be\n// an array of bits (little-endian convention), as well as a multi-scalar multiplication method** (`msm`)\n// which takes an array of Field elements and an array of elliptic curve points as arguments, both assumed\n// to be of the same length.\n//\n// Curve configurations may be converted between different coordinate representations by calling the `into_group`\n// and `into_affine` methods on them, e.g.\n//\n// `let bjj_curvegroup = bjj_affine.into_group();`\n//\n// Curve configurations may also be converted between different curve representations by calling the `into_swcurve`,\n// `into_montcurve` and `into_tecurve` methods subject to the relation between the curve representations mentioned\n// above. Note that it is possible to map Points from a Twisted Edwards/Montgomery curve to the corresponding\n// Short Weierstrass representation and back, and the methods to do so are exposed as `map_into_swcurve` and\n// `map_from_swcurve`, which each take one argument, the point to be mapped.\n//\n// Curve maps\n// ==========\n// There are a few different ways of mapping Field elements to elliptic curves. Here we provide the simplified\n// Shallue-van de Woestijne-Ulas and Elligator 2 methods, the former being applicable to all curve types\n// provided above subject to the constraint that the coefficients of the corresponding Short Weierstrass curve satisfies\n// a*b != 0 and the latter being applicable to Montgomery and Twisted Edwards curves subject to the constraint that\n// the coefficients of the corresponding Montgomery curve satisfy j*k != 0 and (j^2 - 4)/k^2 is non-square.\n//\n// The simplified Shallue-van de Woestijne-Ulas method is exposed as the method `swu_map` on the Curve configuration and\n// depends on two parameters, a Field element z != -1 for which g(x) - z is irreducible over Field and g(b/(z*a)) is\n// square, where g(x) = x^3 + a*x + b is the right-hand side of the defining equation of the corresponding Short\n// Weierstrass curve, and a Field element u to be mapped onto the curve. For example, in the case of bjj_affine above,\n// it may be determined using the scripts provided at <https://github.com/cfrg/draft-irtf-cfrg-hash-to-curve> that z = 5.\n//\n// The Elligator 2 method is exposed as the method `elligator2_map` on the Curve configurations of Montgomery and\n// Twisted Edwards curves. Like the simplified SWU method above, it depends on a certain non-square element of Field,\n// but this element need not satisfy any further conditions, so it is included as the (Field-dependent) constant\n//`ZETA` below. Thus, the `elligator2_map` method depends only on one parameter, the Field element to be mapped onto\n// the curve.\n//\n// For details on all of the above in the context of hashing to elliptic curves, see <https://datatracker.ietf.org/doc/id/draft-irtf-cfrg-hash-to-curve-06.html>.\n//\n//\n// *TODO: Replace Field with Bigint.\n// **TODO: Support arrays of structs to make this work.\n// Field-dependent constant ZETA = a non-square element of Field\n// Required for Elligator 2 map\n// TODO: Replace with built-in constant.\nglobal ZETA: Field = 5;\n// Field-dependent constants for Tonelli-Shanks algorithm (see sqrt function below)\n// TODO: Possibly make this built-in.\nglobal C1: u32 = 28;\nglobal C3: Field = 40770029410420498293352137776570907027550720424234931066070132305055;\nglobal C5: Field = 19103219067921713944291392827692070036145651957329286315305642004821462161904;\n// Higher-order version of scalar multiplication\n// TODO: Make this work so that the submodules' bit_mul may be defined in terms of it.\n//fn bit_mul<T,N>(add: fn(T,T) -> T, e: T, bits: [u1; N], p: T) -> T {\n//    let mut out = e;\n//    let n = bits.len();\n//\n//    for i in 0..n {\n//        out = add(\n//            add(out, out),\n//            if(bits[n - i - 1] == 0) {e} else {p});\n//    }\n//\n//    out\n//}\n// TODO: Make this built-in.\npub fn safe_inverse(x: Field) -> Field {\n    if x == 0 {\n        0\n    } else {\n        1 / x\n    }\n}\n// Boolean indicating whether Field element is a square, i.e. whether there exists a y in Field s.t. x = y*y.\npub fn is_square(x: Field) -> bool {\n    let v = pow(x, 0 - 1 / 2);\n\n    v * (v - 1) == 0\n}\n// Power function of two Field arguments of arbitrary size.\n// Adapted from std::field::pow_32.\npub fn pow(x: Field, y: Field) -> Field {\n    let mut r = 1 as Field;\n    let b: [u1; 254] = y.to_le_bits();\n\n    for i in 0..254 {\n        r *= r;\n        r *= (b[254 - 1 - i] as Field) * x + (1 - b[254 - 1 - i] as Field);\n    }\n\n    r\n}\n// Tonelli-Shanks algorithm for computing the square root of a Field element.\n// Requires C1 = max{c: 2^c divides (p-1)}, where p is the order of Field\n// as well as C3 = (C2 - 1)/2, where C2 = (p-1)/(2^c1),\n// and C5 = ZETA^C2, where ZETA is a non-square element of Field.\n// These are pre-computed above as globals.\npub fn sqrt(x: Field) -> Field {\n    let mut z = pow(x, C3);\n    let mut t = z * z * x;\n    z *= x;\n    let mut b = t;\n    let mut c = C5;\n\n    for i in 0..(C1 - 1) {\n        for _j in 1..(C1 - i - 1) {\n            b *= b;\n        }\n\n        z *= if b == 1 { 1 } else { c };\n\n        c *= c;\n\n        t *= if b == 1 { 1 } else { c };\n\n        b = t;\n    }\n\n    z\n}\n\nmod tests {\n    use crate::montcurve::affine::Point as MGaffine;\n    use crate::montcurve::curvegroup::Point as MG;\n    use crate::swcurve::affine::Point as SWGaffine;\n    use crate::swcurve::curvegroup::Point as SWG;\n    use crate::tecurve::affine::Curve as AffineCurve;\n    use crate::tecurve::affine::Point as Gaffine;\n    use crate::tecurve::curvegroup::Point as G;\n\n    #[test]\n    fn smoke_test() {\n        // Tests may be checked against https://github.com/cfrg/draft-irtf-cfrg-hash-to-curve/tree/main/poc\n        // Define Baby Jubjub (ERC-2494) parameters in affine representation\n        let bjj_affine = AffineCurve::new(\n            168700,\n            168696,\n            Gaffine::new(\n                995203441582195749578291179787384436505546430278305826713579947235728471134,\n                5472060717959818805561601436314318772137091100104008585924551046643952123905,\n            ),\n        );\n        // Test addition\n        let p1_affine = Gaffine::new(\n            17777552123799933955779906779655732241715742912184938656739573121738514868268,\n            2626589144620713026669568689430873010625803728049924121243784502389097019475,\n        );\n        let p2_affine = Gaffine::new(\n            16540640123574156134436876038791482806971768689494387082833631921987005038935,\n            20819045374670962167435360035096875258406992893633759881276124905556507972311,\n        );\n\n        let p3_affine = bjj_affine.add(p1_affine, p2_affine);\n        assert(p3_affine.eq(Gaffine::new(\n            7916061937171219682591368294088513039687205273691143098332585753343424131937,\n            14035240266687799601661095864649209771790948434046947201833777492504781204499,\n        )));\n        // Test scalar multiplication\n        let p4_affine = bjj_affine.mul(2, p1_affine);\n        assert(p4_affine.eq(Gaffine::new(\n            6890855772600357754907169075114257697580319025794532037257385534741338397365,\n            4338620300185947561074059802482547481416142213883829469920100239455078257889,\n        )));\n        assert(p4_affine.eq(bjj_affine.bit_mul([0, 1], p1_affine)));\n        // Test subtraction\n        let p5_affine = bjj_affine.subtract(p3_affine, p3_affine);\n        assert(p5_affine.eq(Gaffine::zero()));\n        // Check that these points are on the curve\n        assert(\n            bjj_affine.contains(bjj_affine.gen)\n                & bjj_affine.contains(p1_affine)\n                & bjj_affine.contains(p2_affine)\n                & bjj_affine.contains(p3_affine)\n                & bjj_affine.contains(p4_affine)\n                & bjj_affine.contains(p5_affine),\n        );\n        // Test CurveGroup equivalents\n        let bjj = bjj_affine.into_group(); // Baby Jubjub\n        let p1 = p1_affine.into_group();\n        let p2 = p2_affine.into_group();\n        let p3 = p3_affine.into_group();\n        let p4 = p4_affine.into_group();\n        let p5 = p5_affine.into_group();\n        // Test addition\n        assert(p3.eq(bjj.add(p1, p2)));\n        // Test scalar multiplication\n        assert(p4.eq(bjj.mul(2, p1)));\n        assert(p4.eq(bjj.bit_mul([0, 1], p1)));\n        // Test subtraction\n        assert(G::zero().eq(bjj.subtract(p3, p3)));\n        assert(p5.eq(G::zero()));\n        // Check that these points are on the curve\n        assert(\n            bjj.contains(bjj.gen)\n                & bjj.contains(p1)\n                & bjj.contains(p2)\n                & bjj.contains(p3)\n                & bjj.contains(p4)\n                & bjj.contains(p5),\n        );\n        // Test SWCurve equivalents of the above\n        // First the affine representation\n        let bjj_swcurve_affine = bjj_affine.into_swcurve();\n\n        let p1_swcurve_affine = bjj_affine.map_into_swcurve(p1_affine);\n        let p2_swcurve_affine = bjj_affine.map_into_swcurve(p2_affine);\n        let p3_swcurve_affine = bjj_affine.map_into_swcurve(p3_affine);\n        let p4_swcurve_affine = bjj_affine.map_into_swcurve(p4_affine);\n        let p5_swcurve_affine = bjj_affine.map_into_swcurve(p5_affine);\n        // Addition\n        assert(p3_swcurve_affine.eq(bjj_swcurve_affine.add(p1_swcurve_affine, p2_swcurve_affine)));\n        // Doubling\n        assert(p4_swcurve_affine.eq(bjj_swcurve_affine.mul(2, p1_swcurve_affine)));\n        assert(p4_swcurve_affine.eq(bjj_swcurve_affine.bit_mul([0, 1], p1_swcurve_affine)));\n        // Subtraction\n        assert(SWGaffine::zero().eq(bjj_swcurve_affine.subtract(\n            p3_swcurve_affine,\n            p3_swcurve_affine,\n        )));\n        assert(p5_swcurve_affine.eq(SWGaffine::zero()));\n        // Check that these points are on the curve\n        assert(\n            bjj_swcurve_affine.contains(bjj_swcurve_affine.gen)\n                & bjj_swcurve_affine.contains(p1_swcurve_affine)\n                & bjj_swcurve_affine.contains(p2_swcurve_affine)\n                & bjj_swcurve_affine.contains(p3_swcurve_affine)\n                & bjj_swcurve_affine.contains(p4_swcurve_affine)\n                & bjj_swcurve_affine.contains(p5_swcurve_affine),\n        );\n        // Then the CurveGroup representation\n        let bjj_swcurve = bjj.into_swcurve();\n\n        let p1_swcurve = bjj.map_into_swcurve(p1);\n        let p2_swcurve = bjj.map_into_swcurve(p2);\n        let p3_swcurve = bjj.map_into_swcurve(p3);\n        let p4_swcurve = bjj.map_into_swcurve(p4);\n        let p5_swcurve = bjj.map_into_swcurve(p5);\n        // Addition\n        assert(p3_swcurve.eq(bjj_swcurve.add(p1_swcurve, p2_swcurve)));\n        // Doubling\n        assert(p4_swcurve.eq(bjj_swcurve.mul(2, p1_swcurve)));\n        assert(p4_swcurve.eq(bjj_swcurve.bit_mul([0, 1], p1_swcurve)));\n        // Subtraction\n        assert(SWG::zero().eq(bjj_swcurve.subtract(p3_swcurve, p3_swcurve)));\n        assert(p5_swcurve.eq(SWG::zero()));\n        // Check that these points are on the curve\n        assert(\n            bjj_swcurve.contains(bjj_swcurve.gen)\n                & bjj_swcurve.contains(p1_swcurve)\n                & bjj_swcurve.contains(p2_swcurve)\n                & bjj_swcurve.contains(p3_swcurve)\n                & bjj_swcurve.contains(p4_swcurve)\n                & bjj_swcurve.contains(p5_swcurve),\n        );\n        // Test MontCurve conversions\n        // First the affine representation\n        let bjj_montcurve_affine = bjj_affine.into_montcurve();\n\n        let p1_montcurve_affine = p1_affine.into_montcurve();\n        let p2_montcurve_affine = p2_affine.into_montcurve();\n        let p3_montcurve_affine = p3_affine.into_montcurve();\n        let p4_montcurve_affine = p4_affine.into_montcurve();\n        let p5_montcurve_affine = p5_affine.into_montcurve();\n        // Addition\n        assert(p3_montcurve_affine.eq(bjj_montcurve_affine.add(\n            p1_montcurve_affine,\n            p2_montcurve_affine,\n        )));\n        // Doubling\n        assert(p4_montcurve_affine.eq(bjj_montcurve_affine.mul(2, p1_montcurve_affine)));\n        assert(p4_montcurve_affine.eq(bjj_montcurve_affine.bit_mul([0, 1], p1_montcurve_affine)));\n        // Subtraction\n        assert(MGaffine::zero().eq(bjj_montcurve_affine.subtract(\n            p3_montcurve_affine,\n            p3_montcurve_affine,\n        )));\n        assert(p5_montcurve_affine.eq(MGaffine::zero()));\n        // Check that these points are on the curve\n        assert(\n            bjj_montcurve_affine.contains(bjj_montcurve_affine.gen)\n                & bjj_montcurve_affine.contains(p1_montcurve_affine)\n                & bjj_montcurve_affine.contains(p2_montcurve_affine)\n                & bjj_montcurve_affine.contains(p3_montcurve_affine)\n                & bjj_montcurve_affine.contains(p4_montcurve_affine)\n                & bjj_montcurve_affine.contains(p5_montcurve_affine),\n        );\n        // Then the CurveGroup representation\n        let bjj_montcurve = bjj.into_montcurve();\n\n        let p1_montcurve = p1_montcurve_affine.into_group();\n        let p2_montcurve = p2_montcurve_affine.into_group();\n        let p3_montcurve = p3_montcurve_affine.into_group();\n        let p4_montcurve = p4_montcurve_affine.into_group();\n        let p5_montcurve = p5_montcurve_affine.into_group();\n        // Addition\n        assert(p3_montcurve.eq(bjj_montcurve.add(p1_montcurve, p2_montcurve)));\n        // Doubling\n        assert(p4_montcurve.eq(bjj_montcurve.mul(2, p1_montcurve)));\n        assert(p4_montcurve.eq(bjj_montcurve.bit_mul([0, 1], p1_montcurve)));\n        // Subtraction\n        assert(MG::zero().eq(bjj_montcurve.subtract(p3_montcurve, p3_montcurve)));\n        assert(p5_montcurve.eq(MG::zero()));\n        // Check that these points are on the curve\n        assert(\n            bjj_montcurve.contains(bjj_montcurve.gen)\n                & bjj_montcurve.contains(p1_montcurve)\n                & bjj_montcurve.contains(p2_montcurve)\n                & bjj_montcurve.contains(p3_montcurve)\n                & bjj_montcurve.contains(p4_montcurve)\n                & bjj_montcurve.contains(p5_montcurve),\n        );\n        // Elligator 2 map-to-curve\n        let ell2_pt_map = bjj_affine.elligator2_map(27);\n\n        assert(ell2_pt_map.eq(MGaffine::new(\n            7972459279704486422145701269802978968072470631857513331988813812334797879121,\n            8142420778878030219043334189293412482212146646099536952861607542822144507872,\n        )\n            .into_tecurve()));\n        // SWU map-to-curve\n        let swu_pt_map = bjj_affine.swu_map(5, 27);\n\n        assert(swu_pt_map.eq(bjj_affine.map_from_swcurve(SWGaffine::new(\n            2162719247815120009132293839392097468339661471129795280520343931405114293888,\n            5341392251743377373758788728206293080122949448990104760111875914082289313973,\n        ))));\n    }\n\n}\n"
    },
    "359": {
      "path": "/Users/hka/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/aztec-nr/compressed-string/src/field_compressed_string.nr",
      "source": "use dep::aztec::protocol_types::{\n    traits::{Deserialize, Packable, Serialize},\n    utils::field::field_from_bytes,\n};\nuse std::meta::derive;\n\n// A Fixedsize Compressed String.\n// Essentially a special version of Compressed String for practical use.\n#[derive(Deserialize, Eq, Packable, Serialize)]\npub struct FieldCompressedString {\n    value: Field,\n}\n\nimpl FieldCompressedString {\n    pub fn is_eq(self, other: FieldCompressedString) -> bool {\n        self.value == other.value\n    }\n\n    pub fn from_field(input_field: Field) -> Self {\n        Self { value: input_field }\n    }\n\n    pub fn from_string(input_string: str<31>) -> Self {\n        Self { value: field_from_bytes(input_string.as_bytes(), true) }\n    }\n\n    pub fn to_bytes(self) -> [u8; 31] {\n        self.value.to_be_bytes()\n    }\n}\n"
    },
    "51": {
      "path": "std/option.nr",
      "source": "use crate::cmp::{Eq, Ord, Ordering};\nuse crate::default::Default;\nuse crate::hash::{Hash, Hasher};\n\npub struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    pub fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T>\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T>\nwhere\n    T: Ord,\n{\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else if other._is_some {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n"
    },
    "52": {
      "path": "std/panic.nr",
      "source": "pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\n    assert(false, message);\n    crate::mem::zeroed()\n}\n"
    },
    "6": {
      "path": "std/cmp.nr",
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: StructDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: StructDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n"
    },
    "62": {
      "path": "/Users/hka/tezac/src/contracts/erc721/src/main.nr",
      "source": "mod types;\nmod test;\n\nuse dep::aztec::macros::aztec;\n\n#[aztec]\ncontract NFT {\n    use crate::types::nft_note::NFTNote;\n    use dep::authwit::auth::{\n        assert_current_call_valid_authwit, assert_current_call_valid_authwit_public,\n        compute_authwit_nullifier,\n    };\n    use dep::aztec::{\n        encrypted_logs::log_assembly_strategies::default_aes128::note::encode_and_encrypt_note,\n        macros::{\n            events::event,\n            functions::{initializer, internal, private, public, view},\n            storage::storage,\n        },\n        note::constants::MAX_NOTES_PER_PAGE,\n        oracle::random::random,\n        prelude::{\n            AztecAddress, Map, NoteGetterOptions, NoteViewerOptions, PrivateContext, PrivateSet,\n            PublicContext, PublicImmutable, PublicMutable,\n        },\n        protocol_types::{point::Point, traits::Serialize},\n        utils::comparison::Comparator,\n    };\n    use dep::compressed_string::FieldCompressedString;\n    use std::meta::derive;\n\n    #[derive(Serialize)]\n    #[event]\n    pub struct NFTTransfer {\n        from: AztecAddress,\n        to: AztecAddress,\n        token_id: Field,\n    }\n\n    #[storage]\n    struct Storage<Context> {\n        symbol: PublicImmutable<FieldCompressedString, Context>,\n        name: PublicImmutable<FieldCompressedString, Context>,\n        admin: PublicMutable<AztecAddress, Context>,\n        private_nfts: Map<AztecAddress, PrivateSet<NFTNote, Context>, Context>,\n        nft_exists: Map<Field, PublicMutable<bool, Context>, Context>,\n        public_owners: Map<Field, PublicMutable<AztecAddress, Context>, Context>,\n    }\n\n    #[public]\n    #[initializer]\n    fn constructor(admin: AztecAddress, name: str<31>, symbol: str<31>) {\n        assert(!admin.is_zero(), \"invalid admin\");\n        storage.admin.write(admin);\n        storage.name.initialize(FieldCompressedString::from_string(name));\n        storage.symbol.initialize(FieldCompressedString::from_string(symbol));\n    }\n\n    #[public]\n    fn set_admin(new_admin: AztecAddress) {\n        assert(storage.admin.read().eq(context.msg_sender()), \"caller is not an admin\");\n        storage.admin.write(new_admin);\n    }\n\n    #[public]\n    fn mint(to: AztecAddress, token_id: Field) {\n        assert(token_id != 0, \"zero token ID not supported\");\n        assert(storage.nft_exists.at(token_id).read() == false, \"token already exists\");\n\n        storage.nft_exists.at(token_id).write(true);\n\n        storage.public_owners.at(token_id).write(to);\n    }\n\n    #[public]\n    #[view]\n    fn public_get_name() -> pub FieldCompressedString {\n        storage.name.read()\n    }\n\n    #[private]\n    #[view]\n    fn private_get_name() -> pub FieldCompressedString {\n        storage.name.read()\n    }\n\n    #[public]\n    #[view]\n    fn public_get_symbol() -> pub FieldCompressedString {\n        storage.symbol.read()\n    }\n\n    #[private]\n    #[view]\n    fn private_get_symbol() -> pub FieldCompressedString {\n        storage.symbol.read()\n    }\n\n    #[public]\n    #[view]\n    fn get_admin() -> Field {\n        storage.admin.read().to_field()\n    }\n\n    #[public]\n    fn transfer_in_public(from: AztecAddress, to: AztecAddress, token_id: Field, nonce: Field) {\n        if (!from.eq(context.msg_sender())) {\n            assert_current_call_valid_authwit_public(&mut context, from);\n        } else {\n            assert(nonce == 0, \"invalid nonce\");\n        }\n\n        let public_owners_storage = storage.public_owners.at(token_id);\n        assert(public_owners_storage.read().eq(from), \"invalid owner\");\n\n        public_owners_storage.write(to);\n    }\n\n    #[private]\n    fn transfer_to_private(to: AztecAddress, token_id: Field) {\n        let from = context.msg_sender();\n\n        let nft = NFT::at(context.this_address());\n\n        // We prepare the private balance increase.\n        let hiding_point_slot = _prepare_private_balance_increase(to, &mut context, storage);\n\n        // At last we finalize the transfer. Usage of the `unsafe` method here is safe because we set the `from`\n        // function argument to a message sender, guaranteeing that he can transfer only his own NFTs.\n        nft._finalize_transfer_to_private_unsafe(from, token_id, hiding_point_slot).enqueue(\n            &mut context,\n        );\n    }\n\n    /// Prepares an increase of private balance of `to` (partial note). The increase needs to be finalized by calling\n    /// `finalize_transfer_to_private. Returns a hiding point slot.\n    // docs:start:prepare_private_balance_increase\n    #[private]\n    fn prepare_private_balance_increase(to: AztecAddress) -> Field {\n        _prepare_private_balance_increase(to, &mut context, storage)\n    }\n    \n    /// This function exists separately from `prepare_private_balance_increase` solely as an optimization as it allows\n    /// us to have it inlined in the `transfer_to_private` function which results in one less kernel iteration.\n    ///\n    #[contract_library_method]\n    fn _prepare_private_balance_increase(\n        to: AztecAddress,\n        context: &mut PrivateContext,\n        storage: Storage<&mut PrivateContext>,\n    ) -> Field {\n        let to_note_slot = storage.private_nfts.at(to).storage_slot;\n\n        // We create a setup payload with unpopulated/zero token id for 'to'\n\n        /// Safety: We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing,\n        /// so a malicious sender could use non-random values to make the note less private. But they already know\n        /// the full note pre-image anyway, and so the recipient already trusts them to not disclose this\n        /// information. We can therefore assume that the sender will cooperate in the random value generation.\n        let note_randomness = unsafe { random() };\n        let note_setup_payload = NFTNote::setup_payload().new(to, note_randomness, to_note_slot);\n\n        let setup_log = note_setup_payload.encrypt_log(context, to, context.msg_sender());\n\n        // Using the x-coordinate as a hiding point slot is safe against someone else interfering with it because\n        // we have a guarantee that the public functions of the transaction are executed right after the private ones\n        // and for this reason the protocol guarantees that nobody can front-run us in consuming the hiding point.\n        // This guarantee would break if `finalize_transfer_to_private` was not called in the same transaction. This\n        // however is not the flow we are currently concerned with. To support the multi-transaction flow we could\n        // introduce a `from` function argument, hash the x-coordinate with it and then repeat the hashing in\n        // `finalize_transfer_to_private`.\n\n        // We can also be sure that the `hiding_point_slot` will not overwrite any other value in the storage because\n        // in our state variables we derive slots using a different hash function from multi scalar multiplication\n        // (MSM).\n        let hiding_point_slot = note_setup_payload.hiding_point.x;\n\n        // We don't need to perform a check that the value overwritten by `_store_point_in_transient_storage_unsafe`\n        // is zero because the slot is the x-coordinate of the hiding point and hence we could only overwrite\n        // the value in the slot with the same value. This makes usage of the `unsafe` method safe.\n        NFT::at(context.this_address())\n            ._store_payload_in_transient_storage_unsafe(\n                hiding_point_slot,\n                note_setup_payload.hiding_point,\n                setup_log,\n            )\n            .enqueue(context);\n\n        hiding_point_slot\n    }\n\n    // TODO(#9375): Having to define the note log length here is very unfortunate as it's basically impossible for\n    // users to derive manually. This will however go away once we have a real transient storage since we will not need\n    // the public call and instead we would do something like `context.transient_storage_write(slot, payload)` and that\n    // will allow us to use generics and hence user will not need to define it explicitly. We cannot use generics here\n    // as it is an entrypoint function.\n    // docs:start:store_payload_in_transient_storage_unsafe\n    #[public]\n    #[internal]\n    fn _store_payload_in_transient_storage_unsafe(\n        slot: Field,\n        point: Point,\n        setup_log: [Field; 9],\n    ) {\n        context.storage_write(slot, point);\n        context.storage_write(slot + aztec::protocol_types::point::POINT_LENGTH as Field, setup_log);\n    }\n\n    /// Finalizes a transfer of NFT with `token_id` from public balance of `from` to a private balance of `to`.\n    /// The transfer must be prepared by calling `prepare_private_balance_increase` first and the resulting\n    /// `hiding_point_slot` must be passed as an argument to this function.\n    // docs:start:finalize_transfer_to_private\n    #[public]\n    fn finalize_transfer_to_private(token_id: Field, hiding_point_slot: Field) {\n        let from = context.msg_sender();\n        _finalize_transfer_to_private(from, token_id, hiding_point_slot, &mut context, storage);\n    }\n\n    #[public]\n    #[internal]\n    fn _finalize_transfer_to_private_unsafe(\n        from: AztecAddress,\n        token_id: Field,\n        hiding_point_slot: Field,\n    ) {\n        _finalize_transfer_to_private(from, token_id, hiding_point_slot, &mut context, storage);\n    }\n\n    #[contract_library_method]\n    fn _finalize_transfer_to_private(\n        from: AztecAddress,\n        token_id: Field,\n        hiding_point_slot: Field,\n        context: &mut PublicContext,\n        storage: Storage<&mut PublicContext>,\n    ) {\n        let public_owners_storage = storage.public_owners.at(token_id);\n        assert(public_owners_storage.read().eq(from), \"invalid NFT owner\");\n\n        // Set the public NFT owner to zero\n        public_owners_storage.write(AztecAddress::zero());\n\n        // Finalize the partial note with the `token_id`\n        let finalization_payload =\n            NFTNote::finalization_payload().new(context, hiding_point_slot, token_id);\n\n        // At last we emit the note hash and the final log\n        finalization_payload.emit();\n    }\n\n    //\n    // Cancel a private authentication witness.\n    // @param inner_hash The inner hash of the authwit to cancel.\n    //\n    #[private]\n    fn cancel_authwit(inner_hash: Field) {\n        let on_behalf_of = context.msg_sender();\n        let nullifier = compute_authwit_nullifier(on_behalf_of, inner_hash);\n        context.push_nullifier(nullifier);\n    }\n\n    #[private]\n    fn transfer_in_private(from: AztecAddress, to: AztecAddress, token_id: Field, nonce: Field) {\n        if (!from.eq(context.msg_sender())) {\n            assert_current_call_valid_authwit(&mut context, from);\n        } else {\n            assert(nonce == 0, \"invalid nonce\");\n        }\n\n        let nfts = storage.private_nfts;\n\n        let notes = nfts.at(from).pop_notes(NoteGetterOptions::new()\n            .select(NFTNote::properties().token_id, Comparator.EQ, token_id)\n            .set_limit(1));\n        assert(notes.len() == 1, \"NFT not found when transferring\");\n\n        let mut new_note = NFTNote::new(token_id, to);\n\n        nfts.at(to).insert(&mut new_note).emit(encode_and_encrypt_note(&mut context, to, from));\n    }\n\n    #[private]\n    fn transfer_to_public(from: AztecAddress, to: AztecAddress, token_id: Field, nonce: Field) {\n        if (!from.eq(context.msg_sender())) {\n            assert_current_call_valid_authwit(&mut context, from);\n        } else {\n            assert(nonce == 0, \"invalid nonce\");\n        }\n\n        let notes = storage.private_nfts.at(from).pop_notes(NoteGetterOptions::new()\n            .select(NFTNote::properties().token_id, Comparator.EQ, token_id)\n            .set_limit(1));\n        assert(notes.len() == 1, \"NFT not found when transferring to public\");\n\n        NFT::at(context.this_address())._finish_transfer_to_public(to, token_id).enqueue(\n            &mut context,\n        );\n    }\n\n    #[public]\n    #[internal]\n    fn _finish_transfer_to_public(to: AztecAddress, token_id: Field) {\n        storage.public_owners.at(token_id).write(to);\n    }\n\n    #[public]\n    #[view]\n    // Returns zero address when the token does not have a public owner. Reverts if the token does not exist.\n    fn owner_of(token_id: Field) -> AztecAddress {\n        assert(storage.nft_exists.at(token_id).read(), \"token does not exist\");\n        storage.public_owners.at(token_id).read()\n    }\n\n    /// Returns an array of token IDs owned by `owner` in private and a flag indicating whether a page limit was\n    /// reached. Starts getting the notes from page with index `page_index`. Zero values in the array are placeholder\n    /// values for non-existing notes.\n    // docs:start:get_private_nfts\n    unconstrained fn get_private_nfts(\n        owner: AztecAddress,\n        page_index: u32,\n    ) -> pub ([Field; MAX_NOTES_PER_PAGE], bool) {\n        let offset = page_index * MAX_NOTES_PER_PAGE;\n        let mut options = NoteViewerOptions::new();\n        let notes = storage.private_nfts.at(owner).view_notes(options.set_offset(offset));\n\n        let mut owned_nft_ids = [0; MAX_NOTES_PER_PAGE];\n        for i in 0..options.limit {\n            if i < notes.len() {\n                owned_nft_ids[i] = notes.get_unchecked(i).token_id;\n            }\n        }\n\n        let page_limit_reached = notes.len() == options.limit;\n        (owned_nft_ids, page_limit_reached)\n    }\n}\n"
    },
    "7": {
      "path": "std/collections/bounded_vec.nr",
      "source": "use crate::{cmp::Eq, convert::From, runtime::is_unconstrained, static_assert};\n\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\n/// slices - and thus nested vectors as well - are disallowed).\n///\n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\n/// pushing an additional element is also more efficient - the length only needs to be increased\n/// by one.\n///\n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\n/// is a reasonable maximum bound that can be placed on the vector.\n///\n/// Example:\n///\n/// ```noir\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\n/// for i in 0..5 {\n///     vector.push(i);\n/// }\n/// assert(vector.len() == 5);\n/// assert(vector.max_len() == 10);\n/// ```\npub struct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    /// Creates a new, empty vector of length zero.\n    ///\n    /// Since this container is backed by an array internally, it still needs an initial value\n    /// to give each element. To resolve this, each element is zeroed internally. This value\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\n    /// assert(empty_vector.len() == 0);\n    /// ```\n    ///\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\n    /// via a type signature:\n    ///\n    /// ```noir\n    /// fn good() -> BoundedVec<Field, 10> {\n    ///     // Ok! MaxLen is specified with a type annotation\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\n    ///     let v2 = BoundedVec::new();\n    ///\n    ///     // Ok! MaxLen is known from the type of `good`'s return value\n    ///     v2\n    /// }\n    ///\n    /// fn bad() {\n    ///     // Error: Type annotation needed\n    ///     // The compiler can't infer `MaxLen` from the following code:\n    ///     let mut v3 = BoundedVec::new();\n    ///     v3.push(5);\n    /// }\n    /// ```\n    ///\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a\n    /// constraint failure at runtime when the vec is pushed to.\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this\n    /// will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     let last = v.get(v.len() - 1);\n    ///     assert(first != last);\n    /// }\n    /// ```\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero, without\n    /// performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element,\n    /// it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\n    ///     // Always ensure the length is larger than the largest\n    ///     // index passed to get_unchecked\n    ///     assert(v.len() > 2);\n    ///     let first = v.get_unchecked(0);\n    ///     let second = v.get_unchecked(1);\n    ///     let third = v.get_unchecked(2);\n    ///     first + second + third\n    /// }\n    /// ```\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     assert(first != 42);\n    ///     v.set(0, 42);\n    ///     let new_first = v.get(0);\n    ///     assert(new_first == 42);\n    /// }\n    /// ```\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn set_unchecked_example() {\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n    ///     vec.extend_from_array([1, 2]);\n    ///\n    ///     // Here we're safely writing within the valid range of `vec`\n    ///     // `vec` now has the value [42, 2]\n    ///     vec.set_unchecked(0, 42);\n    ///\n    ///     // We can then safely read this value back out of `vec`.\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\n    ///     assert_eq(vec.get(0), 42);\n    ///\n    ///     // We've now written past the end of `vec`.\n    ///     // As this index is still within the maximum potential length of `v`,\n    ///     // it won't cause a constraint failure.\n    ///     vec.set_unchecked(2, 42);\n    ///     println(vec);\n    ///\n    ///     // This will write past the end of the maximum potential length of `vec`,\n    ///     // it will then trigger a constraint failure.\n    ///     vec.set_unchecked(5, 42);\n    ///     println(vec);\n    /// }\n    /// ```\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    /// Pushes an element to the end of the vector. This increases the length\n    /// of the vector by one.\n    ///\n    /// Panics if the new length of the vector will be greater than the max length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    ///\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// // Panics with failed assertion \"push out of bounds\"\n    /// v.push(3);\n    /// ```\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    /// Returns the current length of this vector\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\n    /// assert(v.len() == 0);\n    ///\n    /// v.push(100);\n    /// assert(v.len() == 1);\n    ///\n    /// v.push(200);\n    /// v.push(300);\n    /// v.push(400);\n    /// assert(v.len() == 4);\n    ///\n    /// let _ = v.pop();\n    /// let _ = v.pop();\n    /// assert(v.len() == 2);\n    /// ```\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    /// Returns the maximum length of this vector. This is always\n    /// equal to the `MaxLen` parameter this vector was initialized with.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.max_len() == 5);\n    /// v.push(10);\n    /// assert(v.max_len() == 5);\n    /// ```\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    /// Returns the internal array within this vector.\n    ///\n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\n    /// the storage held internally by this vector.\n    ///\n    /// Note that uninitialized elements may be zeroed out!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\n    ///\n    /// v.push(57);\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\n    /// ```\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    /// Pushes each element from the given array to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_array([2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the given slice to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_slice(&[2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the other vector to this vector. The length of\n    /// the other vector is left unchanged.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// ```noir\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\n    ///\n    /// v2.extend_from_array([1, 2, 3]);\n    /// v1.extend_from_bounded_vec(v2);\n    ///\n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\n    /// ```\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        if is_unconstrained() {\n            for i in 0..append_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        } else {\n            let mut exceeded_len = false;\n            for i in 0..Len {\n                exceeded_len |= i == append_len;\n                if !exceeded_len {\n                    self.storage[self.len + i] = vec.get_unchecked(i);\n                }\n            }\n        }\n        self.len = new_len;\n    }\n\n    /// Creates a new vector, populating it with values derived from an array input.\n    /// The maximum length of the vector is determined based on the type signature.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\n    /// ```\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        static_assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    /// Pops the element at the end of the vector. This will decrease the length\n    /// of the vector by one.\n    ///\n    /// Panics if the vector is empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// let two = v.pop();\n    /// let one = v.pop();\n    ///\n    /// assert(two == 2);\n    /// assert(one == 1);\n    ///\n    /// // error: cannot pop from an empty vector\n    /// let _ = v.pop();\n    /// ```\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    /// Returns true if the given predicate returns true for any element\n    /// in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\n    /// v.extend_from_array([2, 4, 6]);\n    ///\n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\n    /// assert(all_even);\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        if is_unconstrained() {\n            for i in 0..self.len {\n                ret |= predicate(self.storage[i]);\n            }\n        } else {\n            let mut ret = false;\n            let mut exceeded_len = false;\n            for i in 0..MaxLen {\n                exceeded_len |= i == self.len;\n                if !exceeded_len {\n                    ret |= predicate(self.storage[i]);\n                }\n            }\n        }\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.map(|value| value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function will zero out any elements at or past index `len` of `array`.\n    /// This incurs an extra runtime cost of O(MaxLen). If you are sure your array is\n    /// zeroed after that index, you can use `from_parts_unchecked` to remove the extra loop.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    /// ```\n    pub fn from_parts(mut array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        let zeroed = crate::mem::zeroed();\n\n        if is_unconstrained() {\n            for i in len..MaxLen {\n                array[i] = zeroed;\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i >= len {\n                    array[i] = zeroed;\n                }\n            }\n        }\n\n        BoundedVec { storage: array, len }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function is unsafe because it expects all elements past the `len` index\n    /// of `array` to be zeroed, but does not check for this internally. Use `from_parts`\n    /// for a safe version of this function which does zero out any indices past the\n    /// given length. Invalidating this assumption can notably cause `BoundedVec::eq`\n    /// to give incorrect results since it will check even elements past `len`.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    ///\n    /// // invalid use!\n    /// let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n    /// let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n    ///\n    /// // both vecs have length 3 so we'd expect them to be equal, but this\n    /// // fails because elements past the length are still checked in eq\n    /// assert_eq(vec1, vec2); // fails\n    /// ```\n    pub fn from_parts_unchecked(array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        BoundedVec { storage: array, len }\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n        if self.len == other.len {\n            self.storage == other.storage\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n            assert_eq(bounded_vec.get(2), 3);\n        }\n\n        #[test(should_fail_with = \"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n        use crate::convert::From;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n\n    mod from_parts {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn from_parts() {\n            // docs:start:from-parts\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // Any elements past the given length are zeroed out, so these\n            // two BoundedVecs will be completely equal\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 2], 3);\n            assert_eq(vec1, vec2);\n            // docs:end:from-parts\n        }\n\n        #[test]\n        fn from_parts_unchecked() {\n            // docs:start:from-parts-unchecked\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // invalid use!\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n\n            // both vecs have length 3 so we'd expect them to be equal, but this\n            // fails because elements past the length are still checked in eq\n            assert(vec1 != vec2);\n            // docs:end:from-parts-unchecked\n        }\n    }\n}\n"
    },
    "71": {
      "path": "/Users/hka/tezac/src/contracts/erc721/src/types/nft_note.nr",
      "source": "use dep::aztec::{\n    keys::getters::{get_nsk_app, get_public_keys},\n    macros::notes::partial_note,\n    note::utils::compute_note_hash_for_nullify,\n    oracle::random::random,\n    prelude::{NoteHeader, NullifiableNote, PrivateContext},\n    protocol_types::{\n        address::AztecAddress, constants::GENERATOR_INDEX__NOTE_NULLIFIER,\n        hash::poseidon2_hash_with_separator, traits::Packable,\n    },\n};\n\n// docs:start:nft_note\n#[partial_note(quote {token_id})]\npub struct NFTNote {\n    // ID of the token\n    token_id: Field,\n    // The owner of the note\n    owner: AztecAddress,\n    // Randomness of the note to hide its contents\n    randomness: Field,\n}\n// docs:end:nft_note\n\nimpl NullifiableNote for NFTNote {\n    // docs:start:compute_nullifier\n    fn compute_nullifier(\n        self,\n        context: &mut PrivateContext,\n        note_hash_for_nullify: Field,\n    ) -> Field {\n        let owner_npk_m_hash: Field = get_public_keys(self.owner).npk_m.hash();\n        let secret = context.request_nsk_app(owner_npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n        )\n    }\n    // docs:end:compute_nullifier\n\n    unconstrained fn compute_nullifier_without_context(self, storage_slot: Field) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self, storage_slot);\n        let owner_npk_m_hash: Field = get_public_keys(self.owner).npk_m.hash();\n        let secret = get_nsk_app(owner_npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n        )\n    }\n}\n\nimpl NFTNote {\n    pub fn new(token_id: Field, owner: AztecAddress) -> Self {\n        /// Safety: We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing,\n        /// so a malicious sender could use non-random values to make the note less private. But they already know\n        /// the full note pre-image anyway, and so the recipient already trusts them to not disclose this\n        /// information. We can therefore assume that the sender will cooperate in the random value generation.\n        let randomness = unsafe { random() };\n        NFTNote { token_id, owner, randomness, header: NoteHeader::empty() }\n    }\n}\n\nimpl Eq for NFTNote {\n    fn eq(self, other: Self) -> bool {\n        (self.token_id == other.token_id)\n            & (self.owner == other.owner)\n            & (self.randomness == other.randomness)\n    }\n}"
    },
    "74": {
      "path": "/Users/hka/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/aztec-nr/authwit/src/auth.nr",
      "source": "use dep::aztec::{context::{gas::GasOpts, PrivateContext, PublicContext}, hash::hash_args_array};\nuse dep::aztec::protocol_types::{\n    abis::function_selector::FunctionSelector,\n    address::AztecAddress,\n    constants::{\n        CANONICAL_AUTH_REGISTRY_ADDRESS, GENERATOR_INDEX__AUTHWIT_INNER,\n        GENERATOR_INDEX__AUTHWIT_NULLIFIER, GENERATOR_INDEX__AUTHWIT_OUTER,\n    },\n    hash::poseidon2_hash_with_separator,\n};\n\n/**\n * Authenticaion witness helper library\n *\n * Authentication Witness is a scheme for authenticating actions on Aztec, so users can allow third-parties\n * (e.g. protocols or other users) to execute an action on their behalf.\n *\n * This library provides helper functions to manage such witnesses.\n * The authentication witness, is some \"witness\" (data) that authenticates a `message_hash`.\n * The simplest example of an authentication witness, is a signature. The signature is the \"evidence\",\n * that the signer has seen the message, agrees with it, and has allowed it.\n * It does not need to be a signature. It could be any kind of \"proof\" that the message is allowed.\n * Another proof could be knowing some kind of secret, or having some kind of \"token\" that allows the message.\n *\n * The `message_hash` is a hash of the following structure:\n * hash(consumer, chain_id, version, inner_hash)\n * - consumer: the address of the contract that is \"consuming\" the message,\n * - chain_id: the chain id of the chain that the message is being consumed on,\n * - version: the version of the chain that the message is being consumed on,\n * - inner_hash: the hash of the \"inner\" message that is being consumed, this is the \"actual\" message or action.\n *\n * While the `inner_hash` could be anything, such as showing you signed a specific message, it will often be\n * a hash of the \"action\" to approve, along with who made the call. As part of this library, we provide a few\n * helper functions to deal with such messages.\n *\n * For example, we provide helper function that is used for checking that the message is an encoding of the current call.\n * This can be used to let some contract \"allow\" another contract to act on its behalf, as long as it can\n * show that it is acting on behalf of the contract.\n *\n * If we take a case of allowing a contract to transfer tokens on behalf of an account, the `inner_hash` can be\n * derived as:\n * inner_hash = hash(caller, \"transfer\", hash(to, amount))\n *\n * Where the `caller` would be the address of the contract that is trying to transfer the tokens, and `to` and `amount`\n * the arguments for the transfer.\n *\n * Note that we have both a `caller` and a `consumer`, the `consumer` will be the contract that is consuming the message,\n * in the case of the transfer, it would be the `Token` contract itself, while the caller, will be the actor that is\n * allowed to transfer the tokens.\n *\n *\n * The authentication mechanism works differently in public and private contexts. In private, we recall that everything\n * is executed on the user's device, so we can use `oracles` to \"ask\" the user (not contract) for information. In public\n * we cannot do this, since it is executed by the sequencer (someone else). Therefore we can instead use a \"registry\"\n * to store the messages that we have approved.\n *\n * A simple example would be a \"token\" that is being \"pulled\" from one account into another. We will first outline\n * how this would look in private, and then in public later.\n *\n * Say that a user `Alice` wants to deposit some tokens into a DeFi protocol (say a DEX).\n * `Alice` would make a `deposit` transaction, that she is executing using her account contract.\n * The account would call the `DeFi` contract to execute `deposit`, which would try to pull funds from the `Token`\n * contract. Since the `DeFi` contract is trying to pull funds from an account that is not its own, it needs to\n * convince the `Token` contract that it is allowed to do so.\n *\n * This is where the authentication witness comes in The `Token` contract computes a `message_hash` from the\n * `transfer` call, and then asks `Alice Account` contract to verify that the `DeFi` contract is allowed to\n * execute that call.\n *\n * `Alice Account` contract can then ask `Alice` if she wants to allow the `DeFi` contract to pull funds from her\n * account. If she does, she will sign the `message_hash` and return the signature to the `Alice Account` which\n * will validate it and return success to the `Token` contract which will then allow the `DeFi` contract to pull\n * funds from `Alice`.\n *\n * To ensure that the same \"approval\" cannot be used multiple times, we also compute a `nullifier` for the\n * authentication witness, and emit it from the `Token` contract (consumer).\n *\n * Note that we can do this flow as we are in private were we can do oracle calls out from contracts.\n *\n *\n *  Person          Contract              Contract               Contract\n *  Alice          Alice Account          Token                   DeFi\n *   |                  |                  |                      |\n *   | Defi.deposit(Token, 1000)           |                      |\n *   |----------------->|                  |                      |\n *   |                  | deposit(Token, 1000)                    |\n *   |                  |---------------------------------------->|\n *   |                  |                  |                      |\n *   |                  |                  | transfer(Alice, Defi, 1000)\n *   |                  |                  |<---------------------|\n *   |                  |                  |                      |\n *   |                  | Check if Defi may call transfer(Alice, Defi, 1000)\n *   |                  |<-----------------|                      |\n *   |                  |                  |                      |\n *   | Please give me AuthWit for DeFi     |                      |\n *   | calling transfer(Alice, Defi, 1000) |                      |\n *   |<-----------------|                  |                      |\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *   | AuthWit for transfer(Alice, Defi, 1000)                    |\n *   |----------------->|                  |                      |\n *   |                  | AuthWit validity |                      |\n *   |                  |----------------->|                      |\n *   |                  |                  |                      |\n *   |                  |       throw if invalid AuthWit          |\n *   |                  |                  |                      |\n *   |                  |       emit AuthWit nullifier            |\n *   |                  |                  |                      |\n *   |                  |       transfer(Alice, Defi, 1000)       |\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *   |                  |                  | success              |\n *   |                  |                  |--------------------->|\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *   |                  |                  |           deposit(Token, 1000)\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *\n *\n * If we instead were in public, we cannot do the same flow. Instead we would use an authentication registry to store\n * the messages that we have approved.\n *\n * To approve a message, `Alice Account` can make a `set_authorized` call to the registry, to set a `message_hash`\n * as authorized. This is essentially a mapping from `message_hash` to `true` for `Alice Contract`. Every account\n * has its own map in the registry, so `Alice` cannot approve a message for `Bob`.\n *\n * The `Token` contract can then try to \"spend\" the approval by calling `consume` on the registry. If the message\n * was approved, the value is updated to `false`, and we return the success flag. For more information on the\n * registry, see `main.nr` in `auth_registry_contract`.\n *\n * Person          Contract              Contract            Contract               Contract\n * Alice          Alice Account          Registry             Token                   DeFi\n *   |                  |                    |                   |                      |\n *   | Registry.set_authorized(..., true)    |                   |                      |\n *   |----------------->|                    |                   |                      |\n *   |                  | set_authorized(..., true)              |                      |\n *   |                  |------------------->|                   |                      |\n *   |                  |                    |                   |                      |\n *   |                  |         set authorized to true         |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |                      |\n *   | Defi.deposit(Token, 1000)             |                   |                      |\n *   |----------------->|                    |                   |                      |\n *   |                  | deposit(Token, 1000)                   |                      |\n *   |                  |-------------------------------------------------------------->|\n *   |                  |                    |                   |                      |\n *   |                  |                    |              transfer(Alice, Defi, 1000) |\n *   |                  |                    |                   |<---------------------|\n *   |                  |                    |                   |                      |\n *   |                  |                    | Check if Defi may call transfer(Alice, Defi, 1000)\n *   |                  |                    |<------------------|                      |\n *   |                  |                    |                   |                      |\n *   |                  |          throw if invalid AuthWit      |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |                      |\n *   |                  |           set authorized to false      |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    | AuthWit validity  |                      |\n *   |                  |                    |------------------>|                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   | transfer(Alice, Defi, 1000)\n *   |                  |                    |                   |<-------------------->|\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   | success              |\n *   |                  |                    |                   |--------------------->|\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |     deposit(Token, 1000)\n *   |                  |                    |                   |                      |\n *\n *\n * --- FAQ ---\n * Q:   Why are we using a success flag of `poseidon2_hash_bytes(\"IS_VALID()\")` instead of just returning a boolean?\n * A:   We want to make sure that we don't accidentally return `true` if there is a collision in the function selector.\n *      By returning a hash of `IS_VALID()`, it becomes very unlikely that there is both a collision and we return\n *      a success flag.\n *\n * Q:   Why are we using static calls?\n * A:   We are using static calls to ensure that the account contract cannot re-enter. If it was a normal call, it\n *      could make a new call and do a re-entry attack. Using a static ensures that it cannot update any state.\n *\n * Q:   Would it not be cheaper to use a nullifier instead of updating state in public?\n * A:   At a quick glance, a public state update + nullifier is 96 bytes, but two state updates are 128, so it would be\n *      cheaper to use a nullifier, if this is the way it would always be done. However, if both the approval and the\n *      consumption is done in the same transaction, then we will be able to squash the updates (only final tx state diff is posted to DA), and now it is cheaper.\n *\n * Q:   Why is the chain id and the version part of the message hash?\n * A:   The chain id and the version is part of the message hash to ensure that the message is only valid on a specific\n *      chain to avoid a case where the same message could be used across multiple chains.\n */\n\nglobal IS_VALID_SELECTOR: Field = 0x47dacd73; // 4 last bytes of poseidon2_hash_bytes(\"IS_VALID()\")\n\n/**\n * Assert that `on_behalf_of` has authorized the current call with a valid authentication witness\n *\n * Compute the `inner_hash` using the `msg_sender`, `selector` and `args_hash` and then make a call out to the\n * `on_behalf_of` contract to verify that the `inner_hash` is valid.\n *\n * @param on_behalf_of The address that has allegedly authorized the current call\n */\n// docs:start:assert_current_call_valid_authwit\npub fn assert_current_call_valid_authwit(context: &mut PrivateContext, on_behalf_of: AztecAddress) {\n    let inner_hash = compute_inner_authwit_hash([\n        context.msg_sender().to_field(),\n        context.selector().to_field(),\n        context.args_hash,\n    ]);\n    assert_inner_hash_valid_authwit(context, on_behalf_of, inner_hash);\n}\n// docs:end:assert_current_call_valid_authwit\n\n/**\n * Assert that a specific `inner_hash` is valid for the `on_behalf_of` address\n *\n * Used as an internal function for `assert_current_call_valid_authwit` and can be used as a standalone function when\n * the `inner_hash` is from a different source, e.g., say a block of text etc.\n *\n * @param on_behalf_of The address that has allegedly authorized the current call\n * @param inner_hash The hash of the message to authorize\n */\npub fn assert_inner_hash_valid_authwit(\n    context: &mut PrivateContext,\n    on_behalf_of: AztecAddress,\n    inner_hash: Field,\n) {\n    // We perform a static call here and not a standard one to ensure that the account contract cannot re-enter.\n    let result: Field = context\n        .static_call_private_function(\n            on_behalf_of,\n            comptime { FunctionSelector::from_signature(\"verify_private_authwit(Field)\") },\n            [inner_hash],\n        )\n        .get_preimage();\n    assert(result == IS_VALID_SELECTOR, \"Message not authorized by account\");\n    // Compute the nullifier, similar computation to the outer hash, but without the chain_id and version.\n    // Those should already be handled in the verification, so we just need something to nullify, that allows the same inner_hash for multiple actors.\n    let nullifier = compute_authwit_nullifier(on_behalf_of, inner_hash);\n    context.push_nullifier(nullifier);\n}\n\n/**\n * Assert that `on_behalf_of` has authorized the current call in the authentication registry\n *\n * Compute the `inner_hash` using the `msg_sender`, `selector` and `args_hash` and then make a call out to the\n * `on_behalf_of` contract to verify that the `inner_hash` is valid.\n *\n * Note that the authentication registry will take the `msg_sender` into account as the consumer, so this will only\n * work if the `msg_sender` is the same as the `consumer` when the `message_hash` was inserted into the registry.\n *\n * @param on_behalf_of The address that has allegedly authorized the current call\n */\n// docs:start:assert_current_call_valid_authwit_public\npub unconstrained fn assert_current_call_valid_authwit_public(\n    context: &mut PublicContext,\n    on_behalf_of: AztecAddress,\n) {\n    let inner_hash = compute_inner_authwit_hash([\n        (*context).msg_sender().to_field(),\n        (*context).selector().to_field(),\n        (*context).get_args_hash(),\n    ]);\n    assert_inner_hash_valid_authwit_public(context, on_behalf_of, inner_hash);\n}\n// docs:end:assert_current_call_valid_authwit_public\n\n/**\n * Assert that `on_behalf_of` has authorized a specific `inner_hash` in the authentication registry\n *\n * Compute the `inner_hash` using the `msg_sender`, `selector` and `args_hash` and then make a call out to the\n * `on_behalf_of` contract to verify that the `inner_hash` is valid.\n *\n * Note that the authentication registry will take the `msg_sender` into account as the consumer, so this will only\n * work if the `msg_sender` is the same as the `consumer` when the `message_hash` was inserted into the registry.\n *\n * @param on_behalf_of The address that has allegedly authorized the `inner_hash`\n */\npub unconstrained fn assert_inner_hash_valid_authwit_public(\n    context: &mut PublicContext,\n    on_behalf_of: AztecAddress,\n    inner_hash: Field,\n) {\n    let results: [Field] = context.call_public_function(\n        CANONICAL_AUTH_REGISTRY_ADDRESS,\n        comptime { FunctionSelector::from_signature(\"consume((Field),Field)\") },\n        [on_behalf_of.to_field(), inner_hash].as_slice(),\n        GasOpts::default(),\n    );\n    assert(results.len() == 1, \"Invalid response from registry\");\n    assert(results[0] == IS_VALID_SELECTOR, \"Message not authorized by account\");\n}\n\n/**\n * Compute the `message_hash` from a function call to be used by an authentication witness\n *\n * Useful for when you need a non-account contract to approve during execution. For example if you need a contract\n * to make a call to nested contract, e.g., contract A wants to exit token T to L1 using bridge B, so it needs to allow\n * B to transfer T on its behalf.\n *\n * @param caller The address of the contract that is calling the function, in the example above, this would be B\n * @param consumer The address of the contract that is consuming the message, in the example above, this would be T\n * @param chain_id The chain id of the chain that the message is being consumed on\n * @param version The version of the chain that the message is being consumed on\n * @param selector The function selector of the function that is being called\n * @param args The arguments of the function that is being called\n */\n// docs:start:compute_authwit_message_hash_from_call\npub fn compute_authwit_message_hash_from_call<let N: u32>(\n    caller: AztecAddress,\n    consumer: AztecAddress,\n    chain_id: Field,\n    version: Field,\n    selector: FunctionSelector,\n    args: [Field; N],\n) -> Field {\n    let args_hash = hash_args_array(args);\n    let inner_hash =\n        compute_inner_authwit_hash([caller.to_field(), selector.to_field(), args_hash]);\n    compute_authwit_message_hash(consumer, chain_id, version, inner_hash)\n}\n// docs:end:compute_authwit_message_hash_from_call\n\n/**\n * Computes the `inner_hash` of the authentication witness\n *\n * This is used internally, but also useful in cases where you want to compute the `inner_hash` for a specific message\n * that is not necessarily a call, but just some \"bytes\" or text.\n *\n * @param args The arguments to hash\n */\npub fn compute_inner_authwit_hash<let N: u32>(args: [Field; N]) -> Field {\n    poseidon2_hash_with_separator(args, GENERATOR_INDEX__AUTHWIT_INNER)\n}\n\n/**\n * Computes the `authwit_nullifier` for a specific `on_behalf_of` and `inner_hash`\n *\n * Using the `on_behalf_of` and the `inner_hash` to ensure that the nullifier is siloed for a specific `on_behalf_of`.\n *\n * @param on_behalf_of The address that has authorized the `inner_hash`\n * @param inner_hash The hash of the message to authorize\n */\npub fn compute_authwit_nullifier(on_behalf_of: AztecAddress, inner_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [on_behalf_of.to_field(), inner_hash],\n        GENERATOR_INDEX__AUTHWIT_NULLIFIER,\n    )\n}\n\n/**\n * Computes the `message_hash` for the authentication witness\n *\n * @param consumer The address of the contract that is consuming the message\n * @param chain_id The chain id of the chain that the message is being consumed on\n * @param version The version of the chain that the message is being consumed on\n * @param inner_hash The hash of the \"inner\" message that is being consumed\n */\npub fn compute_authwit_message_hash(\n    consumer: AztecAddress,\n    chain_id: Field,\n    version: Field,\n    inner_hash: Field,\n) -> Field {\n    poseidon2_hash_with_separator(\n        [consumer.to_field(), chain_id, version, inner_hash],\n        GENERATOR_INDEX__AUTHWIT_OUTER,\n    )\n}\n\n/**\n * Helper function to set the authorization status of a message hash\n *\n * Wraps a public call to the authentication registry to set the authorization status of a `message_hash`\n *\n * @param message_hash The hash of the message to authorize\n * @param authorize True if the message should be authorized, false if it should be revoked\n */\npub unconstrained fn set_authorized(\n    context: &mut PublicContext,\n    message_hash: Field,\n    authorize: bool,\n) {\n    let res = context.call_public_function(\n        CANONICAL_AUTH_REGISTRY_ADDRESS,\n        comptime { FunctionSelector::from_signature(\"set_authorized(Field,bool)\") },\n        [message_hash, authorize as Field].as_slice(),\n        GasOpts::default(),\n    );\n    assert(res.len() == 0);\n}\n\n/**\n * Helper function to reject all authwits\n *\n * Wraps a public call to the authentication registry to set the `reject_all` flag\n *\n * @param reject True if all authwits should be rejected, false otherwise\n */\npub unconstrained fn set_reject_all(context: &mut PublicContext, reject: bool) {\n    let res = context.call_public_function(\n        CANONICAL_AUTH_REGISTRY_ADDRESS,\n        comptime { FunctionSelector::from_signature(\"set_reject_all(bool)\") },\n        [context.this_address().to_field(), reject as Field].as_slice(),\n        GasOpts::default(),\n    );\n    assert(res.len() == 0);\n}\n"
    },
    "83": {
      "path": "/Users/hka/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/aztec-nr/aztec/src/context/call_interfaces.nr",
      "source": "use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress, traits::Deserialize,\n};\n\nuse crate::context::{gas::GasOpts, private_context::PrivateContext, public_context::PublicContext};\n\nuse crate::hash::hash_args;\nuse crate::oracle::execution_cache;\n\npub trait CallInterface<let N: u32> {\n    fn get_args(self) -> [Field];\n    fn get_selector(self) -> FunctionSelector;\n    fn get_name(self) -> str<N>;\n    fn get_contract_address(self) -> AztecAddress;\n    fn get_is_static(self) -> bool;\n}\n\npub struct PrivateCallInterface<let N: u32, T> {\n    pub target_contract: AztecAddress,\n    pub selector: FunctionSelector,\n    pub name: str<N>,\n    pub args_hash: Field,\n    pub args: [Field],\n    pub return_type: T,\n    pub is_static: bool,\n}\n\nimpl<let N: u32, T> PrivateCallInterface<N, T> {\n    pub fn call<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        execution_cache::store(self.args);\n        let returns_hash = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            false,\n        );\n        let returns: T = returns_hash.get_preimage();\n        returns\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        execution_cache::store(self.args);\n        let returns_hash = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            true,\n        );\n        returns_hash.get_preimage()\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PrivateVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\npub struct PrivateVoidCallInterface<let N: u32> {\n    pub target_contract: AztecAddress,\n    pub selector: FunctionSelector,\n    pub name: str<N>,\n    pub args_hash: Field,\n    pub args: [Field],\n    pub return_type: (),\n    pub is_static: bool,\n}\n\nimpl<let N: u32> PrivateVoidCallInterface<N> {\n    pub fn call(self, context: &mut PrivateContext) {\n        execution_cache::store(self.args);\n        context\n            .call_private_function_with_args_hash(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                false,\n            )\n            .assert_empty();\n    }\n\n    pub fn view(self, context: &mut PrivateContext) {\n        execution_cache::store(self.args);\n        context\n            .call_private_function_with_args_hash(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                true,\n            )\n            .assert_empty();\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PrivateStaticCallInterface<N, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\npub struct PrivateStaticCallInterface<let N: u32, T> {\n    pub target_contract: AztecAddress,\n    pub selector: FunctionSelector,\n    pub name: str<N>,\n    pub args_hash: Field,\n    pub args: [Field],\n    pub return_type: T,\n    pub is_static: bool,\n}\n\nimpl<let N: u32, T> PrivateStaticCallInterface<N, T> {\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        execution_cache::store(self.args);\n        let returns = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            true,\n        );\n        returns.get_preimage()\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PrivateStaticVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\npub struct PrivateStaticVoidCallInterface<let N: u32> {\n    pub target_contract: AztecAddress,\n    pub selector: FunctionSelector,\n    pub name: str<N>,\n    pub args_hash: Field,\n    pub args: [Field],\n    pub return_type: (),\n    pub is_static: bool,\n}\n\nimpl<let N: u32> PrivateStaticVoidCallInterface<N> {\n    pub fn view(self, context: &mut PrivateContext) {\n        execution_cache::store(self.args);\n        context\n            .call_private_function_with_args_hash(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                true,\n            )\n            .assert_empty();\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PublicCallInterface<N, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\npub struct PublicCallInterface<let N: u32, T> {\n    pub target_contract: AztecAddress,\n    pub selector: FunctionSelector,\n    pub name: str<N>,\n    pub args: [Field],\n    pub gas_opts: GasOpts,\n    pub return_type: T,\n    pub is_static: bool,\n}\n\nimpl<let N: u32, T> PublicCallInterface<N, T> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn call<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<M>())\n    }\n\n    pub unconstrained fn view<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<M>())\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        execution_cache::store(self.args);\n        context.call_public_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            false,\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        execution_cache::store(self.args);\n        context.call_public_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PublicVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\npub struct PublicVoidCallInterface<let N: u32> {\n    pub target_contract: AztecAddress,\n    pub selector: FunctionSelector,\n    pub name: str<N>,\n    pub args: [Field],\n    pub return_type: (),\n    pub is_static: bool,\n    pub gas_opts: GasOpts,\n}\n\nimpl<let N: u32> PublicVoidCallInterface<N> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn call(self, context: &mut PublicContext) {\n        let returns = context.call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub unconstrained fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        execution_cache::store(self.args);\n        context.call_public_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            false,\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        execution_cache::store(self.args);\n        context.call_public_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PublicStaticCallInterface<N, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\npub struct PublicStaticCallInterface<let N: u32, T> {\n    pub target_contract: AztecAddress,\n    pub selector: FunctionSelector,\n    pub name: str<N>,\n    pub args: [Field],\n    pub return_type: T,\n    pub is_static: bool,\n    pub gas_opts: GasOpts,\n}\n\nimpl<let N: u32, T> PublicStaticCallInterface<N, T> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn view<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<M>())\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        execution_cache::store(self.args);\n        context.call_public_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PublicStaticVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\npub struct PublicStaticVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    return_type: (),\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let N: u32> PublicStaticVoidCallInterface<N> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        execution_cache::store(self.args);\n        context.call_public_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n"
    },
    "90": {
      "path": "/Users/hka/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/aztec-nr/aztec/src/context/private_context.nr",
      "source": "use dep::protocol_types::debug_log::debug_log_format;\n\nuse crate::{\n    context::{inputs::PrivateContextInputs, returns_hash::ReturnsHash},\n    hash::{ArgsHasher, hash_args_array},\n    keys::constants::{NULLIFIER_INDEX, NUM_KEY_TYPES, OUTGOING_INDEX, sk_generators},\n    messaging::process_l1_to_l2_message,\n    oracle::{\n        block_header::get_block_header_at,\n        call_private_function::call_private_function_internal,\n        enqueue_public_function_call::{\n            enqueue_public_function_call_internal, notify_set_min_revertible_side_effect_counter,\n            set_public_teardown_function_call_internal,\n        },\n        execution_cache,\n        key_validation_request::get_key_validation_request,\n        notes::{notify_created_nullifier, notify_nullified_note},\n    },\n};\nuse dep::protocol_types::{\n    abis::{\n        call_context::CallContext,\n        function_selector::FunctionSelector,\n        log::Log,\n        log_hash::LogHash,\n        max_block_number::MaxBlockNumber,\n        note_hash::NoteHash,\n        nullifier::Nullifier,\n        private_call_request::PrivateCallRequest,\n        private_circuit_public_inputs::PrivateCircuitPublicInputs,\n        private_log::PrivateLogData,\n        public_call_request::PublicCallRequest,\n        read_request::ReadRequest,\n        side_effect::Counted,\n        validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n    },\n    address::{AztecAddress, EthAddress},\n    block_header::BlockHeader,\n    constants::{\n        MAX_CONTRACT_CLASS_LOGS_PER_CALL, MAX_ENQUEUED_CALLS_PER_CALL,\n        MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL,\n        MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NOTE_HASHES_PER_CALL,\n        MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n        MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PRIVATE_LOGS_PER_CALL,\n        PRIVATE_LOG_SIZE_IN_FIELDS, PUBLIC_DISPATCH_SELECTOR,\n    },\n    messaging::l2_to_l1_message::L2ToL1Message,\n    traits::Empty,\n};\n\n// When finished, one can call .finish() to convert back to the abi\npub struct PrivateContext {\n    // docs:start:private-context\n    pub inputs: PrivateContextInputs,\n    pub side_effect_counter: u32,\n\n    pub min_revertible_side_effect_counter: u32,\n    pub is_fee_payer: bool,\n\n    pub args_hash: Field,\n    pub return_hash: Field,\n\n    pub max_block_number: MaxBlockNumber,\n\n    pub note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    pub nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    pub note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\n    pub nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\n\n    pub private_call_requests: BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    pub public_call_requests: BoundedVec<Counted<PublicCallRequest>, MAX_ENQUEUED_CALLS_PER_CALL>,\n    pub public_teardown_call_request: PublicCallRequest,\n    pub l2_to_l1_msgs: BoundedVec<L2ToL1Message, MAX_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    pub historical_header: BlockHeader,\n\n    pub private_logs: BoundedVec<PrivateLogData, MAX_PRIVATE_LOGS_PER_CALL>,\n    pub contract_class_logs_hashes: BoundedVec<LogHash, MAX_CONTRACT_CLASS_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    pub last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            private_logs: BoundedVec::new(),\n            contract_class_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n\n    pub fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    pub fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    pub fn push_note_hash(&mut self, note_hash: Field) {\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n\n        // WARNING(https://github.com/AztecProtocol/aztec-packages/issues/10558): if you delete this debug_log_format line, some tests fail.\n        debug_log_format(\n            \"Context.note_hashes, after pushing new note hash: {0}\",\n            self.note_hashes.storage().map(|nh: NoteHash| nh.value),\n        );\n    }\n\n    pub fn push_nullifier(&mut self, nullifier: Field) {\n        notify_created_nullifier(nullifier);\n        self.nullifiers.push(\n            Nullifier { value: nullifier, note_hash: 0, counter: self.next_counter() },\n        );\n    }\n\n    pub fn push_nullifier_for_note_hash(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        let nullifier_counter = self.next_counter();\n        notify_nullified_note(nullifier, nullified_note_hash, nullifier_counter);\n        self.nullifiers.push(\n            Nullifier {\n                value: nullifier,\n                note_hash: nullified_note_hash,\n                counter: nullifier_counter,\n            },\n        );\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    pub fn get_block_header(self) -> BlockHeader {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_block_header_at(self, block_number: u32) -> BlockHeader {\n        get_block_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        execution_cache::store(returns_hasher.fields);\n        self.return_hash = returns_hasher.hash();\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            max_block_number: self.max_block_number,\n            note_hash_read_requests: self.note_hash_read_requests.storage(),\n            nullifier_read_requests: self.nullifier_read_requests.storage(),\n            key_validation_requests_and_generators: self\n                .key_validation_requests_and_generators\n                .storage(),\n            note_hashes: self.note_hashes.storage(),\n            nullifiers: self.nullifiers.storage(),\n            private_call_requests: self.private_call_requests.storage(),\n            public_call_requests: self.public_call_requests.storage(),\n            public_teardown_call_request: self.public_teardown_call_request,\n            l2_to_l1_msgs: self.l2_to_l1_msgs.storage(),\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            private_logs: self.private_logs.storage(),\n            contract_class_logs_hashes: self.contract_class_logs_hashes.storage(),\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context,\n        }\n    }\n\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\n            \"Setting {0} as fee payer\",\n            [self.this_address().to_field()],\n        );\n        self.is_fee_payer = true;\n    }\n\n    pub fn end_setup(&mut self) {\n        // dep::protocol_types::debug_log::debug_log_format(\n        //     \"Ending setup at counter {0}\",\n        //     [self.side_effect_counter as Field]\n        // );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n        notify_set_min_revertible_side_effect_counter(self.min_revertible_side_effect_counter);\n    }\n\n    // docs:start:max-block-number\n    pub fn set_tx_max_block_number(&mut self, max_block_number: u32) {\n        // docs:end:max-block-number\n        self.max_block_number =\n            MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request =\n            self.last_key_validation_requests[key_index].unwrap_or(KeyValidationRequest::empty());\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one\n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale\n            // Typically we'd validate keys by showing that they are the preimage of `pk_m_hash`, but that'd require\n            // the oracle returning the master secret keys, which could cause malicious contracts to leak it or learn\n            // about secrets from other contracts. We therefore silo secret keys, and rely on the private kernel to\n            // validate that we siloed secret key corresponds to correct siloing of the master secret key that hashes\n            // to `pk_m_hash`.\n\n            /// Safety: Kernels verify that the key validation request is valid and below we verify that a request\n            /// for the correct public key has been received.\n            let request = unsafe { get_key_validation_request(pk_m_hash, key_index) };\n            assert_eq(request.pk_m.hash(), pk_m_hash, \"Obtained invalid key validation request\");\n\n            self.key_validation_requests_and_generators.push(\n                KeyValidationRequestAndGenerator {\n                    request,\n                    sk_app_generator: sk_generators[key_index],\n                },\n            );\n            self.last_key_validation_requests[key_index] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content, counter: self.next_counter() };\n        self.l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret,\n            leaf_index,\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn emit_private_log(&mut self, log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS]) {\n        let counter = self.next_counter();\n        let private_log = PrivateLogData { log: Log::new(log), note_hash_counter: 0, counter };\n        self.private_logs.push(private_log);\n    }\n\n    pub fn emit_raw_note_log(\n        &mut self,\n        log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS],\n        note_hash_counter: u32,\n    ) {\n        let counter = self.next_counter();\n        let private_log = PrivateLogData { log: Log::new(log), note_hash_counter, counter };\n        self.private_logs.push(private_log);\n    }\n\n    pub fn call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> ReturnsHash {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args);\n        self.call_private_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn static_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> ReturnsHash {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args);\n        self.call_private_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            true,\n        )\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> ReturnsHash {\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, false)\n    }\n\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> ReturnsHash {\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, true)\n    }\n\n    pub fn call_private_function_with_args_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) -> ReturnsHash {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n\n        /// Safety: The oracle simulates the private call and returns the value of the side effects counter after\n        /// execution of the call (which means that end_side_effect_counter - start_side_effect_counter is\n        /// the number of side effects that took place), along with the hash of the return values. We validate these\n        /// by requesting a private kernel iteration in which the return values are constrained to hash\n        /// to `returns_hash` and the side effects counter to increment from start to end.\n        let (end_side_effect_counter, returns_hash) = unsafe {\n            call_private_function_internal(\n                contract_address,\n                function_selector,\n                args_hash,\n                start_side_effect_counter,\n                is_static_call,\n            )\n        };\n\n        self.private_call_requests.push(\n            PrivateCallRequest {\n                call_context: CallContext {\n                    msg_sender: self.this_address(),\n                    contract_address,\n                    function_selector,\n                    is_static_call,\n                },\n                args_hash,\n                returns_hash,\n                start_side_effect_counter,\n                end_side_effect_counter,\n            },\n        );\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n        self.side_effect_counter = end_side_effect_counter + 1;\n        ReturnsHash::new(returns_hash)\n    }\n\n    pub fn call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args);\n        self.call_public_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn static_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args);\n        self.call_public_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            true,\n        )\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        self.call_public_function_with_args_hash(contract_address, function_selector, 0, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        self.call_public_function_with_args_hash(contract_address, function_selector, 0, true)\n    }\n\n    pub fn call_public_function_with_args_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        /// Safety: TODO(https://github.com/AztecProtocol/aztec-packages/issues/8985): Fix this.\n        /// WARNING: This is insecure and should be temporary!\n        /// The oracle hashes the arguments and returns a new args_hash.\n        /// new_args = [selector, ...old_args], so as to make it suitable to call the public dispatch function.\n        /// We don't validate or compute it in the circuit because a) it's harder to do with slices, and\n        /// b) this is only temporary.\n        let args_hash = unsafe {\n            enqueue_public_function_call_internal(\n                contract_address,\n                function_selector,\n                args_hash,\n                counter,\n                is_static_call,\n            )\n        };\n\n        // Public calls are rerouted through the dispatch function.\n        let function_selector = comptime { FunctionSelector::from_field(PUBLIC_DISPATCH_SELECTOR) };\n\n        let call_request = PublicCallRequest {\n            msg_sender: self.this_address(),\n            contract_address,\n            function_selector,\n            is_static_call,\n            args_hash,\n        };\n\n        self.public_call_requests.push(Counted::new(call_request, counter));\n    }\n\n    pub fn set_public_teardown_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args);\n        self.set_public_teardown_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn set_public_teardown_function_with_args_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        /// Safety: TODO(https://github.com/AztecProtocol/aztec-packages/issues/8985): Fix this.\n        /// WARNING: This is insecure and should be temporary!\n        /// The oracle hashes the arguments and returns a new args_hash.\n        /// new_args = [selector, ...old_args], so as to make it suitable to call the public dispatch function.\n        /// We don't validate or compute it in the circuit because a) it's harder to do with slices, and\n        /// b) this is only temporary.\n        let args_hash = unsafe {\n            set_public_teardown_function_call_internal(\n                contract_address,\n                function_selector,\n                args_hash,\n                counter,\n                is_static_call,\n            )\n        };\n\n        let function_selector = comptime { FunctionSelector::from_field(PUBLIC_DISPATCH_SELECTOR) };\n\n        self.public_teardown_call_request = PublicCallRequest {\n            msg_sender: self.this_address(),\n            contract_address,\n            function_selector,\n            is_static_call,\n            args_hash,\n        };\n    }\n\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            historical_header: BlockHeader::empty(),\n            private_logs: BoundedVec::new(),\n            contract_class_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n}\n"
    },
    "91": {
      "path": "/Users/hka/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/aztec-nr/aztec/src/context/public_context.nr",
      "source": "use crate::context::gas::GasOpts;\nuse crate::hash::{\n    compute_l1_to_l2_message_hash, compute_l1_to_l2_message_nullifier, compute_secret_hash,\n};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::constants::MAX_FIELD_VALUE;\nuse dep::protocol_types::traits::{Empty, Packable, Serialize};\n\npub struct PublicContext {\n    pub args_hash: Option<Field>,\n    pub compute_args_hash: fn() -> Field,\n}\n\nimpl PublicContext {\n    pub fn new(compute_args_hash: fn() -> Field) -> Self {\n        PublicContext { args_hash: Option::none(), compute_args_hash }\n    }\n\n    pub fn emit_public_log<T, let N: u32>(_self: &mut Self, log: T)\n    where\n        T: Serialize<N>,\n    {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_public_log(Serialize::serialize(log).as_slice()) };\n    }\n\n    pub fn note_hash_exists(_self: Self, note_hash: Field, leaf_index: Field) -> bool {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { note_hash_exists(note_hash, leaf_index) } == 1\n    }\n\n    pub fn l1_to_l2_msg_exists(_self: Self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { l1_to_l2_msg_exists(msg_hash, msg_leaf_index) } == 1\n    }\n\n    pub fn nullifier_exists(_self: Self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { nullifier_exists(unsiloed_nullifier, address.to_field()) } == 1\n    }\n\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_l1_to_l2_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/\n            self.this_address(),\n            self.version(),\n            content,\n            secret_hash,\n            leaf_index,\n        );\n        let nullifier = compute_l1_to_l2_message_nullifier(message_hash, secret);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()),\n            \"L1-to-L2 message is already nullified\",\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index),\n            \"Tried to consume nonexistent L1-to-L2 message\",\n        );\n\n        self.push_nullifier(nullifier);\n    }\n\n    pub fn message_portal(_self: &mut Self, recipient: EthAddress, content: Field) {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { send_l2_to_l1_msg(recipient, content) };\n    }\n\n    pub unconstrained fn call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let args = args.push_front(function_selector.to_field());\n        let success = call(gas_for_call(gas_opts), contract_address, args);\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub unconstrained fn static_call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let args = args.push_front(function_selector.to_field());\n        let success = call_static(gas_for_call(gas_opts), contract_address, args);\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub fn push_note_hash(_self: &mut Self, note_hash: Field) {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_note_hash(note_hash) };\n    }\n    pub fn push_nullifier(_self: &mut Self, nullifier: Field) {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_nullifier(nullifier) };\n    }\n\n    pub fn this_address(_self: Self) -> AztecAddress {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            address()\n        }\n    }\n    pub fn msg_sender(_self: Self) -> AztecAddress {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            sender()\n        }\n    }\n    pub fn selector(_self: Self) -> FunctionSelector {\n        // The selector is the first element of the calldata when calling a public function through dispatch.\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        let raw_selector: [Field; 1] = unsafe { calldata_copy(0, 1) };\n        FunctionSelector::from_field(raw_selector[0])\n    }\n    pub fn get_args_hash(mut self) -> Field {\n        if !self.args_hash.is_some() {\n            self.args_hash = Option::some((self.compute_args_hash)());\n        }\n\n        self.args_hash.unwrap_unchecked()\n    }\n    pub fn transaction_fee(_self: Self) -> Field {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            transaction_fee()\n        }\n    }\n\n    pub fn chain_id(_self: Self) -> Field {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            chain_id()\n        }\n    }\n    pub fn version(_self: Self) -> Field {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            version()\n        }\n    }\n    pub fn block_number(_self: Self) -> Field {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            block_number()\n        }\n    }\n    pub fn timestamp(_self: Self) -> u64 {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            timestamp()\n        }\n    }\n    pub fn fee_per_l2_gas(_self: Self) -> Field {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_l2_gas()\n        }\n    }\n    pub fn fee_per_da_gas(_self: Self) -> Field {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_da_gas()\n        }\n    }\n\n    pub fn l2_gas_left(_self: Self) -> Field {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            l2_gas_left()\n        }\n    }\n    pub fn da_gas_left(_self: Self) -> Field {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            da_gas_left()\n        }\n    }\n    pub fn is_static_call(_self: Self) -> bool {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { is_static_call() } == 1\n    }\n\n    pub fn raw_storage_read<let N: u32>(_self: Self, storage_slot: Field) -> [Field; N] {\n        let mut out = [0; N];\n        for i in 0..N {\n            /// Safety: AVM opcodes are constrained by the AVM itself\n            out[i] = unsafe { storage_read(storage_slot + i as Field) };\n        }\n        out\n    }\n\n    pub fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n\n    pub fn raw_storage_write<let N: u32>(_self: Self, storage_slot: Field, values: [Field; N]) {\n        for i in 0..N {\n            /// Safety: AVM opcodes are constrained by the AVM itself\n            unsafe { storage_write(storage_slot + i as Field, values[i]) };\n        }\n    }\n\n    pub fn storage_write<T, let N: u32>(self, storage_slot: Field, value: T)\n    where\n        T: Packable<N>,\n    {\n        self.raw_storage_write(storage_slot, value.pack());\n    }\n}\n\n// Helper functions\nfn gas_for_call(user_gas: GasOpts) -> [Field; 2] {\n    // It's ok to use the max possible gas here, because the gas will be\n    // capped by the gas left in the (STATIC)CALL instruction.\n    [user_gas.l2_gas.unwrap_or(MAX_FIELD_VALUE), user_gas.da_gas.unwrap_or(MAX_FIELD_VALUE)]\n}\n\n// Unconstrained opcode wrappers (do not use directly).\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> Field {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn fee_per_l2_gas() -> Field {\n    fee_per_l2_gas_opcode()\n}\nunconstrained fn fee_per_da_gas() -> Field {\n    fee_per_da_gas_opcode()\n}\nunconstrained fn l2_gas_left() -> Field {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> Field {\n    da_gas_left_opcode()\n}\nunconstrained fn is_static_call() -> Field {\n    is_static_call_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: Field) -> u1 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u1 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_public_log(message: [Field]) {\n    emit_public_log_opcode(message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> u1 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\nunconstrained fn call(gas: [Field; 2], address: AztecAddress, args: [Field]) -> bool {\n    call_opcode(gas, address, args)\n}\nunconstrained fn call_static(gas: [Field; 2], address: AztecAddress, args: [Field]) -> bool {\n    call_static_opcode(gas, address, args)\n}\n\npub unconstrained fn calldata_copy<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {\n    calldata_copy_opcode(cdoffset, copy_size)\n}\n\nunconstrained fn returndata_size() -> u32 {\n    returndata_size_opcode()\n}\n\nunconstrained fn returndata_copy(rdoffset: u32, copy_size: u32) -> [Field] {\n    returndata_copy_opcode(rdoffset, copy_size)\n}\n\npub unconstrained fn avm_return(returndata: [Field]) {\n    return_opcode(returndata)\n}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\nunconstrained fn avm_revert(revertdata: [Field]) {\n    revert_opcode(revertdata)\n}\n\nunconstrained fn storage_read(storage_slot: Field) -> Field {\n    storage_read_opcode(storage_slot)\n}\n\nunconstrained fn storage_write(storage_slot: Field, value: Field) {\n    storage_write_opcode(storage_slot, value);\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(|| 0)\n    }\n}\n\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nunconstrained fn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nunconstrained fn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeTransactionFee)]\nunconstrained fn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nunconstrained fn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nunconstrained fn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nunconstrained fn block_number_opcode() -> Field {}\n\n#[oracle(avmOpcodeTimestamp)]\nunconstrained fn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeFeePerL2Gas)]\nunconstrained fn fee_per_l2_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeFeePerDaGas)]\nunconstrained fn fee_per_da_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nunconstrained fn l2_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nunconstrained fn da_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeIsStaticCall)]\nunconstrained fn is_static_call_opcode() -> Field {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\n\n// TODO(#11124): rename unencrypted to public in avm\n#[oracle(avmOpcodeEmitUnencryptedLog)]\nunconstrained fn emit_public_log_opcode(message: [Field]) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCalldataCopy)]\nunconstrained fn calldata_copy_opcode<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {}\n\n#[oracle(avmOpcodeReturndataSize)]\nunconstrained fn returndata_size_opcode() -> u32 {}\n\n#[oracle(avmOpcodeReturndataCopy)]\nunconstrained fn returndata_copy_opcode(rdoffset: u32, copy_size: u32) -> [Field] {}\n\n#[oracle(avmOpcodeReturn)]\nunconstrained fn return_opcode(returndata: [Field]) {}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\n#[oracle(avmOpcodeRevert)]\nunconstrained fn revert_opcode(revertdata: [Field]) {}\n\n#[oracle(avmOpcodeCall)]\nunconstrained fn call_opcode(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n) -> bool {}\n\n#[oracle(avmOpcodeStaticCall)]\nunconstrained fn call_static_opcode(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n) -> bool {}\n\n#[oracle(avmOpcodeStorageRead)]\nunconstrained fn storage_read_opcode(storage_slot: Field) -> Field {}\n\n#[oracle(avmOpcodeStorageWrite)]\nunconstrained fn storage_write_opcode(storage_slot: Field, value: Field) {}\n"
    },
    "92": {
      "path": "/Users/hka/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/aztec-nr/aztec/src/context/returns_hash.nr",
      "source": "use crate::{hash::hash_args_array, oracle::execution_cache};\nuse dep::protocol_types::traits::Deserialize;\n\npub struct ReturnsHash {\n    hash: Field,\n}\n\nimpl ReturnsHash {\n    pub fn new(hash: Field) -> Self {\n        ReturnsHash { hash }\n    }\n\n    pub fn assert_empty(self) {\n        assert_eq(self.hash, 0);\n    }\n\n    pub fn raw(self) -> Field {\n        self.hash\n    }\n\n    /// This is only used during private execution, since in public it is the VM itself that keeps track of return\n    /// values.\n    pub fn get_preimage<T, let N: u32>(self) -> T\n    where\n        T: Deserialize<N>,\n    {\n        /// Safety: We verify that the value returned by `load` is the preimage of `hash`, fully constraining it.\n        let preimage: [Field; N] = unsafe { execution_cache::load(self.hash) };\n        assert_eq(self.hash, hash_args_array(preimage));\n\n        Deserialize::deserialize(preimage)\n    }\n}\n"
    },
    "93": {
      "path": "/Users/hka/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/aztec-nr/aztec/src/context/unconstrained_context.nr",
      "source": "use crate::oracle::{\n    execution::{get_block_number, get_chain_id, get_contract_address, get_version},\n    storage::storage_read,\n};\nuse dep::protocol_types::{address::AztecAddress, traits::Packable};\n\npub struct UnconstrainedContext {\n    block_number: u32,\n    contract_address: AztecAddress,\n    version: Field,\n    chain_id: Field,\n}\n\nimpl UnconstrainedContext {\n    pub unconstrained fn new() -> Self {\n        // We could call these oracles on the getters instead of at creation, which makes sense given that they might\n        // not even be accessed. However any performance gains are minimal, and we'd rather fail early if a user\n        // incorrectly attempts to create an UnconstrainedContext in an environment in which these oracles are not\n        // available.\n        let block_number = get_block_number();\n        let contract_address = get_contract_address();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at(contract_address: AztecAddress) -> Self {\n        let block_number = get_block_number();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at_historical(contract_address: AztecAddress, block_number: u32) -> Self {\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub fn block_number(self) -> u32 {\n        self.block_number\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.contract_address\n    }\n\n    pub fn version(self) -> Field {\n        self.version\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.chain_id\n    }\n\n    pub unconstrained fn raw_storage_read<let N: u32>(\n        self: Self,\n        storage_slot: Field,\n    ) -> [Field; N] {\n        storage_read(self.this_address(), storage_slot, self.block_number())\n    }\n\n    pub unconstrained fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n}\n"
    },
    "95": {
      "path": "/Users/hka/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/aztec-nr/aztec/src/encrypted_logs/encrypt/aes128.nr",
      "source": "use std::hash::{from_field_unsafe as fr_to_fq_unsafe, sha256};\n\nuse dep::protocol_types::{\n    constants::{GENERATOR_INDEX__SYMMETRIC_KEY, GENERATOR_INDEX__SYMMETRIC_KEY_2},\n    hash::poseidon2_hash_with_separator,\n    point::Point,\n};\n\nuse crate::utils::point::point_to_bytes;\n\nfn extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_poseidon2(\n    shared_secret: Point,\n) -> [u8; 32] {\n    let rand1: Field = poseidon2_hash_with_separator(\n        [shared_secret.x, shared_secret.y],\n        GENERATOR_INDEX__SYMMETRIC_KEY,\n    );\n    let rand2: Field = poseidon2_hash_with_separator(\n        [shared_secret.x, shared_secret.y],\n        GENERATOR_INDEX__SYMMETRIC_KEY_2,\n    );\n    let rand1_bytes: [u8; 16] = rand1.to_le_bytes();\n    let rand2_bytes: [u8; 16] = rand2.to_le_bytes();\n    let mut bytes: [u8; 32] = [0; 32];\n    for i in 0..16 {\n        bytes[i] = rand1_bytes[i];\n        bytes[i + 1] = rand2_bytes[i];\n    }\n    bytes\n}\n\nfn extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_sha256(\n    shared_secret: Point,\n) -> [u8; 32] {\n    let shared_secret_bytes: [u8; 32] = point_to_bytes(shared_secret);\n\n    let mut shared_secret_bytes_with_separator: [u8; 33] = std::mem::zeroed();\n    for i in 0..shared_secret_bytes.len() {\n        shared_secret_bytes_with_separator[i] = shared_secret_bytes[i];\n    }\n    shared_secret_bytes_with_separator[32] = GENERATOR_INDEX__SYMMETRIC_KEY;\n\n    sha256(shared_secret_bytes_with_separator)\n}\n\nfn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n    shared_secret: Point,\n    randomness_extraction_fn: fn(Point) -> [u8; 32],\n) -> ([u8; 16], [u8; 16]) {\n    let random_256_bits = randomness_extraction_fn(shared_secret);\n    let mut sym_key = [0; 16];\n    let mut iv = [0; 16];\n    for i in 0..16 {\n        sym_key[i] = random_256_bits[i];\n        iv[i] = random_256_bits[i + 16];\n    }\n    (sym_key, iv)\n}\n\npub fn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n    shared_secret: Point,\n) -> ([u8; 16], [u8; 16]) {\n    derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n        shared_secret,\n        extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_sha256,\n    )\n}\n\npub fn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_poseidon2(\n    shared_secret: Point,\n) -> ([u8; 16], [u8; 16]) {\n    derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n        shared_secret,\n        extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_poseidon2,\n    )\n}\n"
    },
    "99": {
      "path": "/Users/hka/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.76.4/noir-projects/aztec-nr/aztec/src/encrypted_logs/log_assembly_strategies/default_aes128/note.nr",
      "source": "use crate::{\n    context::PrivateContext,\n    encrypted_logs::encrypt::aes128::derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256,\n    keys::{\n        ecdh_shared_secret::derive_ecdh_shared_secret_using_aztec_address,\n        ephemeral::generate_ephemeral_key_pair,\n    },\n    note::{note_emission::NoteEmission, note_interface::NoteInterface},\n    oracle::{\n        notes::{get_app_tag_as_sender, increment_app_tagging_secret_index_as_sender},\n        random::random,\n    },\n    utils::{bytes::{be_bytes_31_to_fields, get_random_bytes}, point::get_sign_of_point},\n};\nuse dep::protocol_types::{\n    abis::note_hash::NoteHash, address::AztecAddress, constants::PRIVATE_LOG_SIZE_IN_FIELDS,\n};\nuse std::aes128::aes128_encrypt;\n\npub(crate) global HEADER_CIPHERTEXT_SIZE_IN_BYTES: u32 = 48; // contract_address (32) + ciphertext_length (2) + 16 bytes pkcs#7 AES padding.\n\n/*\n * WHY IS THERE LOTS OF CODE DUPLICATION BETWEEN event.nr and note.nr?\n * It's because there are a few more optimisations that can be done for notes,\n * and so the stuff that looks like duplicated code currently, won't be\n * the same for long.\n * To modularise now feels premature, because we might get that modularisation wrong.\n * Much better (imo) to have a flattened templates for log assembly, because it\n * makes it much easier for us all to follow, it serves as a nice example for the\n * community to follow (if they wish to roll their own log layouts), and it gives\n * us more time to spot common patterns across all kinds of log layouts.\n */\n\n/*\n * LOG CONFIGURATION CHOICES:\n *\n * deliver_to: INPUT as recipient: AztecAddress\n * encrypt_with: aes128 CBC (Cipher Block Chaining)\n * shared_secret: ephemeral\n * shared_secret_randomness_extraction_hash: sha256\n * tag: true\n * tag_from: INPUT as sender: AztecAddress\n *\n * Note-specific:\n * derive_note_randomness_from_shared_secret: false\n *\n */\n\n/*\n * LOG LAYOUT CHOICE:\n *\n * Short explanation:\n * log = [tag, epk, header_ct=[[contract_address, ct_len], pkcs7_pad], ct=[[pt], pkcs7_pad], some bytes padding, some fields padding]\n *\n * Long explanation:\n * tag: Field\n * epk: [Field, u8]\n * header_ct: [[u8; 32], [u8; 2], [u8; 16]]\n * ct: [[u8; 2], [u8; x], [u8; y]]\n *\n * More precisely (in pseudocode):\n *\n * log = [\n *     tag: Field,\n *     Epk: Field,\n *\n *     le_bytes_31_to_fields(\n *\n *         log_bytes: [\n *             eph_pk_sign: [u8; 1],\n *\n *             header_ciphertext: aes_encrypt(\n *                 contract_address: [u8; 32],\n *                 ct_length: [u8; 2],\n *\n *                 // the aes128_encrypt fn automatically inserts padding:\n *                 header_pt_aes_padding: [u8; 14], // `16 - (input.len() % 16)`\n\n *             ): [u8; 48],\n *\n *             ciphertext: aes_encrypt(\n *                 final_pt: [\n *                     pt: {\n *                         note_bytes: {\n *                             storage_slot: [u8; 32],\n *                             note_type_id: [u8; 32],\n *                             ...note: [u8; N * 32],\n *                         }: [u8; N * 32 + 64],\n *                     }: [u8; N * 32 + 64],\n\n *                 ]: [u8; N * 32 + 64],\n *\n *                 // the aes128_encrypt fn automatically inserts padding:\n *                 pt_aes_padding: [u8; 16 - ( (|pt_length| + |pt|) % 16 )]\n *\n *             ): [u8; |pt| + |pt_aes_padding|]\n *                [u8; |ct|]\n *\n *             log_bytes_padding_to_mult_31: [u8; 31 * ceil((1 + 48 + |ct|)/31) - (1 + 48 + |ct|)],\n *                                           [u8; p]\n *\n *         ]: [u8; 1 + 48 + |ct| + p]\n *\n *     ): [Field; (1 + 48 + |ct| + p) / 31]\n *\n *     log_fields_padding: [Field; PRIVATE_LOG_SIZE_IN_FIELDS - 2 - (1 + 48 + |ct| + p) / 31],\n *\n * ]: [Field; PRIVATE_LOG_SIZE_IN_FIELDS]\n *\n *\n */\n\n/********************************************************/\n// Disgusting arithmetic on generics\n/********************************************************/\n\n// In this section, instead of initialising arrays with very complicated generic\n// arithmetic, such as:\n// let my_arr: [u8; (((PT + (16 - (PT % 16))) + 49) + ((((((PT + (16 - (PT % 16))) + 49) + 30) / 31) * 31) - ((PT + (16 - (PT % 16))) + 49)))] = [0; (((PT + (16 - (PT % 16))) + 49) + ((((((PT + (16 - (PT % 16))) + 49) + 30) / 31) * 31) - ((PT + (16 - (PT % 16))) + 49)))];\n//... we instead do the arithmetic a little bit at a time, so that the computation\n// can be audited and understood. Now, we can't do arithmetic on generics in the body\n// of a function, so we abusing functions in the following way:\n\n// |full_pt| = |pt| = (N * 32) + 64\nfn get_arr_of_size__full_plaintext<let PT: u32>() -> [u8; PT] {\n    [0; PT]\n}\n\n// |pt_aes_padding| = 16 - (|full_pt| % 16)\nfn get_arr_of_size__plaintext_aes_padding<let FULL_PT: u32>(\n    _full_pt: [u8; FULL_PT],\n) -> [u8; 16 - (FULL_PT % 16)] {\n    [0; 16 - (FULL_PT % 16)]\n}\n\n// |ct| = |full_pt| + |pt_aes_padding|\nfn get_arr_of_size__ciphertext<let FULL_PT: u32, let PT_AES_PADDING: u32>(\n    _full_pt: [u8; FULL_PT],\n    _pt_aes_padding: [u8; PT_AES_PADDING],\n) -> [u8; FULL_PT + PT_AES_PADDING] {\n    [0; FULL_PT + PT_AES_PADDING]\n}\n\n// Ok, so we have the following bytes:\n// eph_pk_sign, header_ciphertext, ciphertext:\n// Let lbwop = 1 + 48 + |ct| // aka log bytes without padding\nfn get_arr_of_size__log_bytes_without_padding<let CT: u32>(_ct: [u8; CT]) -> [u8; 1 + 48 + CT] {\n    [0; 1 + 48 + CT]\n}\n\n// Recall:\n//   lbwop := 1 + 48 + |ct| // aka log bytes without padding\n// We now want to pad b to the next multiple of 31, so as to \"fill\" fields.\n// Let p be that padding.\n// p = 31 * ceil(lbwop / 31) - lbwop\n//   = 31 * ((lbwop + 30) // 31) - lbwop\n//     (because ceil(x / y) = (x + y - 1) // y ).\nfn get_arr_of_size__log_bytes_padding<let LBWOP: u32>(\n    _lbwop: [u8; LBWOP],\n) -> [u8; (31 * ((LBWOP + 30) / 31)) - LBWOP] {\n    [0; (31 * ((LBWOP + 30) / 31)) - LBWOP]\n}\n\n// |log_bytes| = 1 + 48 + |ct| + p // aka log bytes (with padding)\n// Recall:\n//   lbwop := 1 + 48 + |ct|\n//   p is the padding\nfn get_arr_of_size__log_bytes<let LBWOP: u32, let P: u32>(\n    _lbwop: [u8; LBWOP],\n    _p: [u8; P],\n) -> [u8; LBWOP + P] {\n    [0; LBWOP + P]\n}\n\n// The return type is pasted from the LSP's expectation, because it was too difficult\n// to match its weird way of doing algebra. It doesn't know all rules of arithmetic.\n// PT is the plaintext length.\npub(crate) fn get_arr_of_size__log_bytes_padding__from_PT<let PT: u32>() -> [u8; ((((((PT + (16 - (PT % 16))) + 49) + 30) / 31) * 31) - ((PT + (16 - (PT % 16))) + 49))] {\n    let full_pt = get_arr_of_size__full_plaintext::<PT>();\n    let pt_aes_padding = get_arr_of_size__plaintext_aes_padding(full_pt);\n    let ct = get_arr_of_size__ciphertext(full_pt, pt_aes_padding);\n    let lbwop = get_arr_of_size__log_bytes_without_padding(ct);\n    let p = get_arr_of_size__log_bytes_padding(lbwop);\n    p\n}\n\n// The return type is pasted from the LSP's expectation, because it was too difficult\n// to match its weird way of doing algebra. It doesn't know all rules of arithmetic.\npub(crate) fn get_arr_of_size__log_bytes__from_PT<let PT: u32>() -> [u8; (((PT + (16 - (PT % 16))) + 49) + ((((((PT + (16 - (PT % 16))) + 49) + 30) / 31) * 31) - ((PT + (16 - (PT % 16))) + 49)))] {\n    let full_pt = get_arr_of_size__full_plaintext::<PT>();\n    let pt_aes_padding = get_arr_of_size__plaintext_aes_padding(full_pt);\n    let ct = get_arr_of_size__ciphertext(full_pt, pt_aes_padding);\n    let lbwop = get_arr_of_size__log_bytes_without_padding(ct);\n    let p = get_arr_of_size__log_bytes_padding(lbwop);\n    let log_bytes = get_arr_of_size__log_bytes(lbwop, p);\n    log_bytes\n}\n\n/********************************************************/\n// End of disgusting arithmetic on generics\n/********************************************************/\n\n// TODO: it feels like this existence check is in the wrong place. In fact, why is it needed at all? Under what circumstances have we found a non-existent note being emitted accidentally?\nfn assert_note_exists<Note, let N: u32>(context: PrivateContext, note: Note)\nwhere\n    Note: NoteInterface<N>,\n{\n    let note_header = note.get_header();\n    let note_hash_counter = note_header.note_hash_counter;\n    // TODO(#8589): use typesystem to skip this check when not needed\n    let note_exists =\n        context.note_hashes.storage().any(|n: NoteHash| n.counter == note_hash_counter);\n    assert(note_exists, \"Can only emit a note log for an existing note.\");\n}\n\n/// This particular log assembly strategy (AES 128) requires the note (and the\n/// note_id and the storage_slot) to be converted into bytes, because the aes function\n/// operates on bytes; not fields.\n/// NB: The extra `+ 64` bytes is for the note_id and the storage_slot of the note:\nfn compute_note_plaintext_for_this_strategy<Note, let N: u32>(\n    note: Note,\n    storage_slot: Field,\n) -> [u8; N * 32 + 64]\nwhere\n    Note: NoteInterface<N>,\n{\n    let packed_note = note.pack_content();\n\n    let note_header = note.get_header();\n    let storage_slot_bytes: [u8; 32] = storage_slot.to_be_bytes();\n\n    // TODO(#10952): The following can be reduced to 7 bits\n    let note_type_id_bytes: [u8; 32] = Note::get_note_type_id().to_be_bytes();\n\n    // We combine all the bytes into plaintext_bytes:\n    let mut plaintext_bytes: [u8; N * 32 + 64] = [0; N * 32 + 64];\n    for i in 0..32 {\n        plaintext_bytes[i] = storage_slot_bytes[i];\n        plaintext_bytes[32 + i] = note_type_id_bytes[i];\n    }\n\n    for i in 0..packed_note.len() {\n        let bytes: [u8; 32] = packed_note[i].to_be_bytes();\n        for j in 0..32 {\n            plaintext_bytes[64 + i * 32 + j] = bytes[j];\n        }\n    }\n\n    plaintext_bytes\n}\n\nfn compute_log<Note, let N: u32>(\n    context: PrivateContext,\n    note: Note,\n    storage_slot: Field,\n    recipient: AztecAddress,\n    sender: AztecAddress,\n) -> [Field; PRIVATE_LOG_SIZE_IN_FIELDS]\nwhere\n    Note: NoteInterface<N>,\n{\n    // *****************************************************************************\n    // Compute the shared secret\n    // *****************************************************************************\n\n    let (eph_sk, eph_pk) = generate_ephemeral_key_pair();\n\n    let eph_pk_sign_byte: u8 = get_sign_of_point(eph_pk) as u8;\n\n    let ciphertext_shared_secret = derive_ecdh_shared_secret_using_aztec_address(eph_sk, recipient); // not to be confused with the tagging shared secret\n\n    // TODO: also use this shared secret for deriving note randomness.\n\n    // *****************************************************************************\n    // Compute the plaintext\n    // *****************************************************************************\n\n    let final_plaintext_bytes = compute_note_plaintext_for_this_strategy(note, storage_slot);\n\n    // *****************************************************************************\n    // Convert the plaintext into whatever format the encryption function expects\n    // *****************************************************************************\n\n    // Already done for this strategy: AES expects bytes.\n\n    // *****************************************************************************\n    // Encrypt the plaintext\n    // *****************************************************************************\n\n    let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n        ciphertext_shared_secret,\n    );\n\n    let ciphertext_bytes = aes128_encrypt(final_plaintext_bytes, iv, sym_key);\n\n    // |full_pt| = |pt_length| + |pt|\n    // |pt_aes_padding| = 16 - (|full_pt| % 16)\n    // or... since a % b is the same as a - b * (a // b) (integer division), so:\n    // |pt_aes_padding| = 16 - (|full_pt| - 16 * (|full_pt| // 16))\n    // |ct| = |full_pt| + |pt_aes_padding|\n    //      = |full_pt| + 16 - (|full_pt| - 16 * (|full_pt| // 16))\n    //      = 16 + 16 * (|full_pt| // 16)\n    //      = 16 * (1 + |full_pt| // 16)\n    assert(ciphertext_bytes.len() == 16 * (1 + ((N * 32) + 64) / 16));\n\n    // *****************************************************************************\n    // Compute the header ciphertext\n    // *****************************************************************************\n\n    let contract_address = context.this_address();\n    let contract_address_bytes = contract_address.to_field().to_be_bytes::<32>();\n\n    let mut header_plaintext: [u8; 32 + 2] = [0; 32 + 2];\n    for i in 0..32 {\n        header_plaintext[i] = contract_address_bytes[i];\n    }\n    let offset = 32;\n    let ciphertext_bytes_length = ciphertext_bytes.len();\n    header_plaintext[offset] = (ciphertext_bytes_length >> 8) as u8;\n    header_plaintext[offset + 1] = ciphertext_bytes_length as u8;\n\n    // TODO: this is insecure and wasteful:\n    // \"Insecure\", because the esk shouldn't be used twice (once for the header,\n    // and again for the proper ciphertext) (at least, I never got the\n    // \"go ahead\" that this would be safe, unfortunately).\n    // \"Wasteful\", because the exact same computation is happening further down.\n    // I'm leaving that 2nd computation where it is, because this 1st computation\n    // will be imminently deleted, when the header logic is deleted.\n    let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n        ciphertext_shared_secret,\n    );\n\n    // Note: the aes128_encrypt builtin fn automatically appends bytes to the\n    // input, according to pkcs#7; hence why the output `header_ciphertext_bytes` is 16\n    // bytes larger than the input in this case.\n    let header_ciphertext_bytes = aes128_encrypt(header_plaintext, iv, sym_key);\n    // I recall that converting a slice to an array incurs constraints, so I'll check the length this way instead:\n    assert(header_ciphertext_bytes.len() == HEADER_CIPHERTEXT_SIZE_IN_BYTES);\n\n    // *****************************************************************************\n    // Prepend / append more bytes of data to the ciphertext, before converting back\n    // to fields.\n    // *****************************************************************************\n\n    let mut log_bytes_padding_to_mult_31 =\n        get_arr_of_size__log_bytes_padding__from_PT::<(N * 32) + 64>();\n    /// Safety: this randomness won't be constrained to be random. It's in the\n    /// interest of the executor of this fn to encrypt with random bytes.\n    log_bytes_padding_to_mult_31 = unsafe { get_random_bytes() };\n\n    let mut log_bytes = get_arr_of_size__log_bytes__from_PT::<(N * 32) + 64>();\n\n    assert(\n        log_bytes.len() % 31 == 0,\n        \"Unexpected error: log_bytes.len() should be divisible by 31, by construction.\",\n    );\n\n    log_bytes[0] = eph_pk_sign_byte;\n    let mut offset = 1;\n    for i in 0..header_ciphertext_bytes.len() {\n        log_bytes[offset + i] = header_ciphertext_bytes[i];\n    }\n    offset += header_ciphertext_bytes.len();\n\n    for i in 0..ciphertext_bytes.len() {\n        log_bytes[offset + i] = ciphertext_bytes[i];\n    }\n    offset += ciphertext_bytes.len();\n\n    for i in 0..log_bytes_padding_to_mult_31.len() {\n        log_bytes[offset + i] = log_bytes_padding_to_mult_31[i];\n    }\n\n    assert(\n        offset + log_bytes_padding_to_mult_31.len() == log_bytes.len(),\n        \"Something has gone wrong\",\n    );\n\n    // *****************************************************************************\n    // Convert bytes back to fields\n    // *****************************************************************************\n\n    let log_bytes_as_fields = be_bytes_31_to_fields(log_bytes);\n\n    // *****************************************************************************\n    // Prepend / append fields, to create the final log\n    // *****************************************************************************\n\n    // In this strategy, we prepend [tag, eph_pk.x]\n\n    // We assume that the sender wants for the recipient to find the tagged note,\n    // and therefore that they will cooperate and use the correct tag. Usage of a bad\n    // tag will result in the recipient not being able to find the note automatically.\n    let tag = unsafe { get_app_tag_as_sender(sender, recipient) };\n    increment_app_tagging_secret_index_as_sender(sender, recipient);\n\n    let mut final_log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS] = [0; PRIVATE_LOG_SIZE_IN_FIELDS];\n\n    final_log[0] = tag;\n    final_log[1] = eph_pk.x;\n\n    let mut offset = 2;\n    for i in 0..log_bytes_as_fields.len() {\n        final_log[offset + i] = log_bytes_as_fields[i];\n    }\n    offset += log_bytes_as_fields.len();\n\n    for i in offset..PRIVATE_LOG_SIZE_IN_FIELDS {\n        /// Safety: randomness cannot be constrained.\n        final_log[i] = unsafe { random() };\n    }\n\n    final_log\n}\n\nunconstrained fn compute_log_unconstrained<Note, let N: u32>(\n    context: PrivateContext,\n    note: Note,\n    storage_slot: Field,\n    recipient: AztecAddress,\n    sender: AztecAddress,\n) -> [Field; PRIVATE_LOG_SIZE_IN_FIELDS]\nwhere\n    Note: NoteInterface<N>,\n{\n    compute_log(context, note, storage_slot, recipient, sender)\n}\n\n// This function seems to be affected by the following Noir bug:\n// https://github.com/noir-lang/noir/issues/5771\n// If you get weird behavior it might be because of it.\npub fn encode_and_encrypt_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    recipient: AztecAddress,\n    // We need this because to compute a tagging secret, we require a sender:\n    sender: AztecAddress,\n) -> fn[(&mut PrivateContext, AztecAddress, AztecAddress)](NoteEmission<Note>) -> ()\nwhere\n    Note: NoteInterface<N>,\n{\n    |e: NoteEmission<Note>| {\n        let note = e.note;\n        let storage_slot = e.storage_slot;\n        assert_note_exists(*context, note);\n\n        let note_hash_counter = note.get_header().note_hash_counter;\n\n        let encrypted_log = compute_log(*context, note, storage_slot, recipient, sender);\n        context.emit_raw_note_log(encrypted_log, note_hash_counter);\n    }\n}\n\n// Important note: this function -- although called \"unconstrained\" -- the\n// function is not labelled as `unconstrained`, because we pass a reference to the\n// context.\npub fn encode_and_encrypt_note_unconstrained<Note, let N: u32>(\n    context: &mut PrivateContext,\n    recipient: AztecAddress,\n    // We need this because to compute a tagging secret, we require a sender:\n    sender: AztecAddress,\n) -> fn[(&mut PrivateContext, AztecAddress, AztecAddress)](NoteEmission<Note>) -> ()\nwhere\n    Note: NoteInterface<N>,\n{\n    |e: NoteEmission<Note>| {\n        let note = e.note;\n        let storage_slot = e.storage_slot;\n        assert_note_exists(*context, note);\n\n        let note_hash_counter = note.get_header().note_hash_counter;\n\n        //   Unconstrained logs have both their content and encryption unconstrained - it could occur that the\n        // recipient is unable to decrypt the payload.\n        //   Regarding the note hash counter, this is used for squashing. The kernel assumes that a given note can have\n        // more than one log and removes all of the matching ones, so all a malicious sender could do is either: cause\n        // for the log to be deleted when it shouldn't have (which is fine - they can already make the content be\n        // whatever), or cause for the log to not be deleted when it should have (which is also fine - it'll be a log\n        // for a note that doesn't exist).\n        //   It's important here that we do not\n        // return the log from this function to the app, otherwise it could try to do stuff with it and then that might\n        // be wrong.\n        let encrypted_log =\n            unsafe { compute_log_unconstrained(*context, note, storage_slot, recipient, sender) };\n        context.emit_raw_note_log(encrypted_log, note_hash_counter);\n    }\n}\n\nmod test {\n    use crate::test::{helpers::test_environment::TestEnvironment, mocks::mock_note::MockNote};\n    use dep::protocol_types::address::AztecAddress;\n    use std::test::OracleMock;\n\n    #[test]\n    unconstrained fn test_encrypted_log_matches_typescript() {\n        let mut env = TestEnvironment::new();\n        // Advance 1 block so we can read historic state from private\n        env.advance_block_by(1);\n        let mut context = env.private();\n\n        // I'm not sure how to initialise an `env` or `context` with a consistent contract address for every run of this test; the value kept changing each time. So I'm going to overwrite it now:\n        context.inputs.call_context.contract_address = AztecAddress::from_field(\n            0x10f48cd9eff7ae5b209c557c70de2e657ee79166868676b787e9417e19260e04,\n        ); // This is an address copied to match the typescript one.\n\n        let storage_slot = 42;\n        let note = MockNote::new(1234).contract_address(context.this_address()).build();\n        let contract_address = context.this_address();\n\n        // All the values in this test were copied over from `encrypted_log_payload.test.ts`\n        let contract_address = AztecAddress::from_field(\n            0x10f48cd9eff7ae5b209c557c70de2e657ee79166868676b787e9417e19260e04,\n        );\n\n        let plaintext = super::compute_note_plaintext_for_this_strategy(note, storage_slot);\n\n        let eph_sk = 0x1358d15019d4639393d62b97e1588c095957ce74a1c32d6ec7d62fe6705d9538;\n        let _ = OracleMock::mock(\"getRandomField\").returns(eph_sk).times(1);\n\n        let randomness = 0x0101010101010101010101010101010101010101010101010101010101010101;\n        let _ = OracleMock::mock(\"getRandomField\").returns(randomness).times(1000000);\n\n        let recipient = AztecAddress::from_field(\n            0x25afb798ea6d0b8c1618e50fdeafa463059415013d3b7c75d46abf5e242be70c,\n        );\n\n        let sender = AztecAddress::from_field(\n            0x25afb798ea6d0b8c1618e50fdeafa463059415013d3b7c75d46abf5e242be70c,\n        );\n\n        let _ = OracleMock::mock(\"getIndexedTaggingSecretAsSender\").returns([69420, 1337]);\n\n        let _ = OracleMock::mock(\"incrementAppTaggingSecretIndexAsSender\").returns(());\n\n        let payload = super::compute_log(context, note, storage_slot, recipient, sender);\n\n        // The following value was generated by `encrypted_log_payload.test.ts`\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let private_log_payload_from_typescript = [\n            0x0e9cffc3ddd746affb02410d8f0a823e89939785bcc8e88ee4f3cae05e737c36,\n            0x0d460c0e434d846ec1ea286e4090eb56376ff27bddc1aacae1d856549f701fa7,\n            0x000194e6d7872db8f61e8e59f23580f4db45d13677f873ec473a409cf61fd04d,\n            0x00334e5fb6083721f3eb4eef500876af3c9acfab0a1cb1804b930606fdb0b283,\n            0x00af91db798fa320746831a59b74362dfd0cf9e7c239f6aad11a4b47d0d870ee,\n            0x00d25a054613a83be7be8512f2c09664bc4f7ab60a127b06584f476918581b8a,\n            0x003840d100d8c1d78d4b68b787ed353ebfb8cd2987503d3b472f614f25799a18,\n            0x003f38322629d401010101010101010101010101010101010101010101010101,\n            0x0101010101010101010101010101010101010101010101010101010101010101,\n            0x0101010101010101010101010101010101010101010101010101010101010101,\n            0x0101010101010101010101010101010101010101010101010101010101010101,\n            0x0101010101010101010101010101010101010101010101010101010101010101,\n            0x0101010101010101010101010101010101010101010101010101010101010101,\n            0x0101010101010101010101010101010101010101010101010101010101010101,\n            0x0101010101010101010101010101010101010101010101010101010101010101,\n            0x0101010101010101010101010101010101010101010101010101010101010101,\n            0x0101010101010101010101010101010101010101010101010101010101010101,\n            0x0101010101010101010101010101010101010101010101010101010101010101,\n        ];\n\n        assert_eq(payload, private_log_payload_from_typescript);\n    }\n}\n"
    }
  }
}
